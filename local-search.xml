<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ACM寒假第一讲</title>
    <link href="/2025/02/06/ACM%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%89%E8%AE%B2/"/>
    <url>/2025/02/06/ACM%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%89%E8%AE%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Priority-Queue"><a href="#一、Priority-Queue" class="headerlink" title="一、Priority Queue"></a>一、Priority Queue</h1><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>题目要求对于一个队列，我们可以执行insert（S，k）<em>即元素插入操作</em>，以及extractMax（S）<em>即移除并返回具有最大键的S元素</em>。这边一开始想到的是构建一个string类型的优先队列，并且针对输入的字符串进行if-else的条件判断（因为执行的操作不多），<strong>核心是substr函数的字符检测</strong>，在测试途中遇到一个小问题——k也是字符类型，而字符类型的大小比较又偏复杂，于是重新写了一个比较函数，将字符类型k通过roll函数转换为long long类型，之后成功比较。</p><h2 id="设计代码"><a href="#设计代码" class="headerlink" title="设计代码"></a>设计代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Compare</span> &#123;<span class="hljs-comment">//重写比较函数</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> string &amp;a, <span class="hljs-type">const</span> string &amp;b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">stoll</span>(a) &lt; <span class="hljs-built_in">stoll</span>(b);<span class="hljs-comment">//类型转换</span><br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>priority_queue&lt;string, vector&lt;string&gt;, Compare&gt; q;<span class="hljs-comment">//优先队列，独立比较方式</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>string s;<br><span class="hljs-built_in">getline</span>(cin, s);<span class="hljs-comment">//整行输入，避免空格影响</span><br>string word = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><span class="hljs-keyword">if</span> (word == <span class="hljs-string">&quot;insert&quot;</span>) &#123;<br>string num = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">7</span>);<br>q.<span class="hljs-built_in">push</span>(num);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (word == <span class="hljs-string">&quot;extrac&quot;</span>) &#123;<br>string num2 = q.<span class="hljs-built_in">top</span>();<br>q.<span class="hljs-built_in">pop</span>();<br>cout &lt;&lt; num2 &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;end&quot;</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、ST表-RMQ问题"><a href="#二、ST表-RMQ问题" class="headerlink" title="二、ST表&amp;&amp;RMQ问题"></a>二、ST表&amp;&amp;RMQ问题</h1><h2 id="设计思路-1"><a href="#设计思路-1" class="headerlink" title="设计思路"></a>设计思路</h2><p>题目要求设计一个程序，判断静态区间最大值。通过对群里发的PDF以及自己网上查阅资料进行消化，慢慢捋清楚ST表的作用以及应用方法——主要用于重复数据的判断。由于本题的数据时限很短，因此在反复试错之后，通过scanf与printf的输入输出流能达到节省时间的目的，从而通过测试而不需要内置函数read（），至于问题本身也是参考模板进行撰写，这里不多赘述。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">2e6</span>+<span class="hljs-number">5</span>, MAX_L = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span> stmax[MAXN][MAX_L];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> N, M;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;N, &amp;M);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;stmax[i][<span class="hljs-number">0</span>]);<span class="hljs-comment">//输入</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-built_in">log2</span>(N); j++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + (<span class="hljs-number">1</span> &lt;&lt; j) - <span class="hljs-number">1</span> &lt;= N; i++) &#123;<br>stmax[i][j] = <span class="hljs-built_in">max</span>(stmax[i][j - <span class="hljs-number">1</span>], stmax[i + (<span class="hljs-number">1</span> &lt;&lt; j - <span class="hljs-number">1</span>)][j - <span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span> (M--) &#123;<br><span class="hljs-type">int</span> l, r;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);<br><span class="hljs-type">int</span> x = <span class="hljs-built_in">log2</span>(r - l + <span class="hljs-number">1</span>);<span class="hljs-comment">//并不需要重新书写log2，本身就是向下取整的，也变相节省了时间</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">max</span>(stmax[l][x], stmax[r - (<span class="hljs-number">1</span> &lt;&lt; x) + <span class="hljs-number">1</span>][x]));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、合并果子"><a href="#三、合并果子" class="headerlink" title="三、合并果子"></a>三、合并果子</h1><h2 id="设计思路-2"><a href="#设计思路-2" class="headerlink" title="设计思路"></a>设计思路</h2><p>题目要算对于n堆果子，求需要消耗的最小体力。此题和2024年数据结构课中的一题<em>《这条拉面好长》</em>类似，算法本质是利用贪心算法进行累加即可；实践到编程中就是利用优先队列构造小根堆，把数据存储之后进行反复的出队累加，再入队的操作，以及来达到最小体力消耗的目的。</p><h2 id="设计代码-1"><a href="#设计代码-1" class="headerlink" title="设计代码"></a>设计代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt; &gt; q;<br><span class="hljs-type">int</span> l;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>cin &gt;&gt; l;<br>q.<span class="hljs-built_in">push</span>(l);<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-type">int</span> u = q.<span class="hljs-built_in">top</span>();<br>q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">int</span> v = q.<span class="hljs-built_in">top</span>();<br>q.<span class="hljs-built_in">pop</span>();<br>sum = sum + u + v;<br><span class="hljs-keyword">if</span> (q.<span class="hljs-built_in">empty</span>())<br><span class="hljs-keyword">break</span>;<br>q.<span class="hljs-built_in">push</span>(u + v);<br>&#125;<br>cout &lt;&lt; sum;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="四、约瑟夫问题"><a href="#四、约瑟夫问题" class="headerlink" title="四、约瑟夫问题"></a>四、约瑟夫问题</h1><h2 id="设计思路-3"><a href="#设计思路-3" class="headerlink" title="设计思路"></a>设计思路</h2><p>这个题目要求n个人围成一圈，从第一个人开始报数,数到m的人出列，再由下一个人重新从1开始报数，数到m的人再出圈，依次类推，直到所有的人都出圈，请输出依次出圈人的编号。这题就没多想，通过经典的遍历操作就可以做出来，发现竟然没超时，还是很震惊的，毕竟时间复杂度太高了。</p><p>附：后续又查阅了网上资料，发现也有暴力破解的代码，也参阅了其他不同的方法，收获颇深。</p><h2 id="设计代码-2"><a href="#设计代码-2" class="headerlink" title="设计代码"></a>设计代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, m, i, num, j;<br>cin &gt;&gt; n &gt;&gt; m;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(n + <span class="hljs-number">1</span>);<br>i = <span class="hljs-number">0</span>;<br>num = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (num &lt; n) &#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br><span class="hljs-keyword">if</span> (a[j] == <span class="hljs-number">0</span>) &#123;<br>i++;<br><span class="hljs-keyword">if</span> (i % m == <span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>a[j] = <span class="hljs-number">1</span>;<span class="hljs-comment">//标记。表示已经输出</span><br>num++;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、学习总结"><a href="#五、学习总结" class="headerlink" title="五、学习总结"></a>五、学习总结</h1><p>在这次C++代码中，学会了优先队列的使用以及ST表的运用，特别是ST表对于重复性问题的解决，很有启发，目前还在看ST表的相关资料，因为确实还不甚了解。</p>]]></content>
    
    
    <categories>
      
      <category>Cpp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM寒假第二讲</title>
    <link href="/2025/01/26/ACM%E5%AF%92%E5%81%87%E7%AC%AC%E4%BA%8C%E8%AE%B2/"/>
    <url>/2025/01/26/ACM%E5%AF%92%E5%81%87%E7%AC%AC%E4%BA%8C%E8%AE%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、二分查找"><a href="#一、二分查找" class="headerlink" title="一、二分查找"></a>一、二分查找</h1><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>题目要求输入一个数字整数q代表q次查询，查询是否在之前的n个整数中出现过，若出现则输出“Yes”，否则输出“No”。典型的二分查找思路，对照资料即可得出代码。</p><h2 id="设计代码"><a href="#设计代码" class="headerlink" title="设计代码"></a>设计代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Tsearch</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; &amp;a, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">while</span> (l &lt; r) &#123;<br><span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (a[mid] &gt;= x)<br>r = mid;<br><span class="hljs-keyword">else</span><br>l = mid + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; a[i];<br>&#125;<br><span class="hljs-type">int</span> q;<br>cin &gt;&gt; q;<br><span class="hljs-type">int</span> x;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; q; i++) &#123;<br>cin &gt;&gt; x;<br><span class="hljs-type">int</span> result = <span class="hljs-built_in">Tsearch</span>(a, <span class="hljs-number">0</span>, n, x);<br><span class="hljs-keyword">if</span> (a[result] == x) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、A-B数对"><a href="#二、A-B数对" class="headerlink" title="二、A-B数对"></a>二、A-B数对</h1><h2 id="设计思路-1"><a href="#设计思路-1" class="headerlink" title="设计思路"></a>设计思路</h2><p>题目要求在一串整数中求满足A-B&#x3D;C的数对（A，B），这边利用STL的二分查找函数upper_bound和lower_bound。并且进行思路转换，寻找满足B+C&#x3D;A中A的个数，就是我们要求的数对个数。</p><h2 id="设计代码-1"><a href="#设计代码-1" class="headerlink" title="设计代码"></a>设计代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, c;<br>cin &gt;&gt; n &gt;&gt; c;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(n);<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> s = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>cin &gt;&gt; a[i];<br><span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>s += <span class="hljs-built_in">upper_bound</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), a[i] + c) - <span class="hljs-built_in">lower_bound</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), a[i] + c);<span class="hljs-comment">//关键，利用两个二分查找锁定目标A（即满足B+C的数字A）</span><br>cout &lt;&lt; s &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="三、分巧克力"><a href="#三、分巧克力" class="headerlink" title="三、分巧克力"></a>三、分巧克力</h1><h2 id="设计思路-2"><a href="#设计思路-2" class="headerlink" title="设计思路"></a>设计思路</h2><p>题目简单来说，就是给定N块巧克力，并给定它们的宽高，求出能够给K个小朋友的最大边长的巧克力。</p><p>容易想到，一块大块的巧克力可以切的块数为（宽&#x2F;r）*（高&#x2F;r），只需要用二分查找进行逼近，求出对应的r即可</p><h2 id="设计代码-2"><a href="#设计代码-2" class="headerlink" title="设计代码"></a>设计代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, k, mid;<br>cin &gt;&gt; n &gt;&gt; k;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">h</span>(n);<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">w</span>(n);<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; h[i] &gt;&gt; w[i];<br>ans = <span class="hljs-built_in">max</span>(h[i], <span class="hljs-built_in">max</span>(ans, w[i]));<br>&#125;<br><span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">2</span> * ans;<span class="hljs-comment">//原本从很大范围进行查找，因为这边已知边长，因此可以缩小范围</span><br><span class="hljs-keyword">while</span> (l &lt; r) &#123;<span class="hljs-comment">//l&lt;r的模型</span><br>ans = <span class="hljs-number">0</span>;<br>mid = (l + r + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>ans += (h[i] / mid) * (w[i] / mid);<br><span class="hljs-keyword">if</span> (ans &gt;= k)<span class="hljs-comment">//若所求块数大于小朋友人数，进行逼近</span><br>l = mid;<br><span class="hljs-keyword">else</span><span class="hljs-comment">//小于所求人数，右边减少一位进行缩小</span><br>r = mid - <span class="hljs-number">1</span>;<br>&#125;<br>cout &lt;&lt; l;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、卡牌"><a href="#四、卡牌" class="headerlink" title="四、卡牌"></a>四、卡牌</h1><h2 id="设计思路-3"><a href="#设计思路-3" class="headerlink" title="设计思路"></a>设计思路</h2><p>这个题目主要要考虑可以手写的手牌数以及原本有的手牌数，以此来进一步确认我们所需要的二分查找的l与r，才能进一步利用l和r来逼近所求的套牌数，要注意本题需要开long long否则测试样例会超时。</p><h2 id="设计代码-3"><a href="#设计代码-3" class="headerlink" title="设计代码"></a>设计代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> n, k, l, r, ans;<br>cin &gt;&gt; n &gt;&gt; k;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> need = <span class="hljs-number">0</span>;<br>vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt;<span class="hljs-built_in">p</span>(n), <span class="hljs-built_in">m</span>(n);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; p[i];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; m[i];<br>&#125;<br>l = <span class="hljs-number">1</span>;<br>r = <span class="hljs-number">200000000</span>;<span class="hljs-comment">//先开很大的区间来确保全概况</span><br><span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>need = <span class="hljs-number">0</span>;<span class="hljs-comment">//所求套牌数</span><br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<span class="hljs-comment">//标记，为了应对特殊情况</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">if</span> (mid - p[i] &gt; m[i]) &#123;<span class="hljs-comment">//如果所需空白牌大于可以绘制的次数</span><br>r = mid - <span class="hljs-number">1</span>;<span class="hljs-comment">//缩小区间</span><br>flag = <span class="hljs-number">1</span>;<span class="hljs-comment">//标记</span><br><span class="hljs-keyword">break</span>;<br>&#125;<br>need += <span class="hljs-built_in">max</span>(mid - p[i], <span class="hljs-number">0ll</span>);<span class="hljs-comment">//累加空白牌的数目</span><br>&#125;<br><span class="hljs-keyword">if</span> (flag)<br><span class="hljs-keyword">continue</span>;<span class="hljs-comment">//应对特殊情况，缩小后无需判断，故continue进行跳过</span><br><span class="hljs-keyword">if</span> (need &lt;= k) &#123;<br>ans = mid;<br>l = mid + <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>r = mid - <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>cout &lt;&lt; ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="五、学习总结"><a href="#五、学习总结" class="headerlink" title="五、学习总结"></a>五、学习总结</h1><p>在这次C++代码中，系统性学习了二分查找的相关知识点和代码，也理解了之前不理解的一些小细节，并且认识到二分查找使用的范围其实还是很广泛的，尤其是对所求目标进行“逼近”的思想，很值得进一步深入思考。</p>]]></content>
    
    
    <categories>
      
      <category>Cpp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM寒假第一讲</title>
    <link href="/2025/01/22/ACM%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E8%AE%B2/"/>
    <url>/2025/01/22/ACM%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E8%AE%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Long-Loong"><a href="#一、Long-Loong" class="headerlink" title="一、Long Loong"></a>一、Long Loong</h1><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>题目要求输入一个数字N，输出一个字母L，N个字母o，一个字母n，一个字母g，这边想到直接使用for循环，执行N次操作即可。（毕竟是easy题不需要什么高端操作）</p><h2 id="设计代码"><a href="#设计代码" class="headerlink" title="设计代码"></a>设计代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<span class="hljs-comment">//输入数字N</span><br>cout &lt;&lt; <span class="hljs-string">&quot;L&quot;</span>;<span class="hljs-comment">//先输出L</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<span class="hljs-comment">//for循环执行次数输出o</span><br>cout &lt;&lt; <span class="hljs-string">&quot;o&quot;</span>;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;ng&quot;</span>;<span class="hljs-comment">//ng一起输出</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二、YES-or-YES"><a href="#二、YES-or-YES" class="headerlink" title="二、YES or YES ?"></a>二、YES or YES ?</h1><h2 id="设计思路-1"><a href="#设计思路-1" class="headerlink" title="设计思路"></a>设计思路</h2><p>题目要求设计一个程序，检测其是否为“YES”，并且”YES”不分大小写。刚开始的时候想直接用穷举进行判断，毕竟“YES”部分大小写最多也就八种可能性，也不会很困难；后来继续思考有没有更优的思路，翻找C++的库得知有一个小写转大写的函数，于是有一个新思路，利用函数将输入的字符串转为大写，之后直接与“YES”作比较即可，较为省事，代码也比较简洁。</p><h2 id="设计代码-1"><a href="#设计代码-1" class="headerlink" title="设计代码"></a>设计代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> t;<br>cin &gt;&gt; t;<br>cin.<span class="hljs-built_in">ignore</span>();<br><span class="hljs-keyword">while</span> (t--) &#123;<br>string s;<br><span class="hljs-built_in">getline</span>(cin, s);<span class="hljs-comment">//字符串输入</span><br><span class="hljs-built_in">transform</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>(), s.<span class="hljs-built_in">begin</span>(), ::toupper);<span class="hljs-comment">//利用transform函数转换为大写</span><br><span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;YES&quot;</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、Problem-Generator"><a href="#三、Problem-Generator" class="headerlink" title="三、Problem Generator"></a>三、Problem Generator</h1><h2 id="设计思路-2"><a href="#设计思路-2" class="headerlink" title="设计思路"></a>设计思路</h2><p>题目简单来说，要求m轮比赛中，每一轮比赛都必须至少有ABCDEFG七个类型的题目各一个，因此共需求m个对应字母。由于ABCDEFG七个大写字母都是char类型，因此这边的思路是：先写一个char为key，int为value的map类型，由于存储每一次输入的题目的各类型个数，之后再从A到G进行遍历，检测差值并相加即可</p><h2 id="设计代码-2"><a href="#设计代码-2" class="headerlink" title="设计代码"></a>设计代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt;problemScale = &#123;&#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-number">0</span>&#125;&#125;;<span class="hljs-comment">//map类型检索</span><br><span class="hljs-type">int</span> t;<br>cin &gt;&gt; t;<br><span class="hljs-keyword">while</span> (t--) &#123;<br><span class="hljs-type">int</span> n, m;<br>cin &gt;&gt; n &gt;&gt; m;<br>string a;<br>cin &gt;&gt; a;<br>cin.<span class="hljs-built_in">ignore</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i++) &#123;<br><span class="hljs-type">char</span> x = a[i];<br>problemScale[x]++;<span class="hljs-comment">//对应字母次数加</span><br>&#125;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-string">&#x27;A&#x27;</span>; i &lt;= <span class="hljs-string">&#x27;G&#x27;</span>; i++) &#123;<br><span class="hljs-keyword">if</span> (problemScale[i] &lt; m) &#123;<br>x = m - problemScale[i];<span class="hljs-comment">//差值</span><br>count += x;<br>&#125;<br>problemScale[i] = <span class="hljs-number">0</span>;<br>&#125;<br>cout &lt;&lt; count &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、rules"><a href="#四、rules" class="headerlink" title="四、rules"></a>四、rules</h1><h2 id="设计思路-3"><a href="#设计思路-3" class="headerlink" title="设计思路"></a>设计思路</h2><p>这个题目主要要考虑“大于等于一半的人”以及“大于等于一半的天数”这两个语境，其实不能用简单的整除来表示，必须用double类型算出精确小数（如果是奇数的话），之后再进行向上取整即可。具体统计过程其实利用数组（毕竟只有1000个居民）统计和int计数器即可。</p><h2 id="设计代码-3"><a href="#设计代码-3" class="headerlink" title="设计代码"></a>设计代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> k;<br>cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br><span class="hljs-type">int</span> t = m;<span class="hljs-comment">//备份，以便后续比较</span><br><span class="hljs-type">int</span> next = <span class="hljs-number">0</span>;<span class="hljs-comment">//计天数</span><br><span class="hljs-keyword">while</span> (m--) &#123;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<span class="hljs-comment">//计人数</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">1000</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>cin &gt;&gt; a[i];<span class="hljs-comment">//输入居民遵守的规则</span><br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">if</span> (a[i] == k) &#123;<br>count++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (count &gt;= <span class="hljs-built_in">ceil</span>((<span class="hljs-type">double</span>)n / <span class="hljs-number">2</span>)) &#123;<span class="hljs-comment">//向上取整</span><br>next++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (next &gt;= <span class="hljs-built_in">ceil</span>((<span class="hljs-type">double</span>)t / <span class="hljs-number">2</span>)) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、学习总结"><a href="#五、学习总结" class="headerlink" title="五、学习总结"></a>五、学习总结</h1><p>在这次C++代码中，进一步学会了对STL的运用以及对算法的初步认识，而关于语法糖中的一些便捷的用法还没有完全掌握，期待后续进一步的掌握来提升代码质量。</p>]]></content>
    
    
    <categories>
      
      <category>Cpp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Cpp入门二</title>
    <link href="/2024/01/24/Cpp%E5%85%A5%E9%97%A8%E4%BA%8C/"/>
    <url>/2024/01/24/Cpp%E5%85%A5%E9%97%A8%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>作用：整形变量表示的是整形类型的数据</p><table><thead><tr><th align="left">数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td align="left">short(短整型)</td><td>2字节</td><td>(-2^15~2^15-1)</td></tr><tr><td align="left">int（整形）</td><td>4字节</td><td>(-2^31~2^31-1)</td></tr><tr><td align="left">long（长整型）</td><td>Windows为4字节，Linux为4字节（32位），8字节（64位）</td><td>(-2^31~2^31-1)</td></tr><tr><td align="left">long long（长长整形）</td><td>8字节</td><td>(-2^63~2^63-1)</td></tr></tbody></table><p><strong>sizeof关键字</strong></p><p>作用：利用sizeof关键字可以统计数据类型所占内存大小</p><p>语法：sizeof（数据类型&#x2F;变量）</p><p>整形结论：short&lt;int&lt;&#x3D;long&lt;&#x3D;long long</p><h2 id="实型（浮点型）"><a href="#实型（浮点型）" class="headerlink" title="实型（浮点型）"></a>实型（浮点型）</h2><p>作用：用于表示小数</p><p>1.单精度float</p><p>2.双精度double</p><p>两者的区别在于表示的有效数字范围不同</p><table><thead><tr><th>数据类型</th><th>占用空间</th><th>有效数字范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15~16位有效数字</td></tr></tbody></table><p>默认情况下输出一个小数会显示6位有效数字</p><p>（float要加f     float a&#x3D;0.3f)</p><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><p>作用：字符型变量用于显示单个字符</p><p>语法： char ch&#x3D;’a’;</p><p><em>注意：1.在显示字符型变量时，用单引号将字符括起来，不要用双引号。</em></p><p>​    <em>2.单引号内只能有一个字符，不可以是字符串</em></p><p>C和Cpp中字符型变量只占用一个字节</p><p>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入存储单元。</p><p><strong>ASCII码大致由以下两部分组成：</strong></p><p>ASCII非打印控制字符：ASCII表上的数字0-31分配给了控制字符，用于控制像打印机等一些外围设备</p><p>ASCII打印字符：数字32-126分配给了能在键盘上找到的字符，当查看或打印文档就会出现</p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>作用：用于表示一些不能显示出来的ASCII字符</p><p>现阶段我们常用的转移字符有：\n 和\\以及 \t</p><table><thead><tr><th>转义字符</th><th>含义</th><th>ASCII码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格（BS），将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页（FF），将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行（LF），将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车（CR），将当前位置移动到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表（HT）（跳到下一个TAB位置）</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直指标（VT）</td><td>011</td></tr><tr><td>\\</td><td><strong>代表一个反斜线字符“\“</strong></td><td><strong>092</strong></td></tr><tr><td>\‘</td><td>代表一个单引号字符</td><td>039</td></tr><tr><td>\‘’</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>\?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符</td><td>3位16进制</td></tr></tbody></table><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>作用：用于表示一串字符</p><p><strong>两种风格</strong></p><p><strong>1.C风格字符串：</strong>char 变量名字[]&#x3D;”字符串值”;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">char</span> str1[]=<span class="hljs-string">&quot;hello world&quot;</span>;<br>    cout&lt;&lt;str1&lt;&lt;endl;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//注意：C风格的字符串要用双引号括号括起来</span><br></code></pre></td></tr></table></figure><p><strong>2.C++风格字符串：</strong>string 变量名字&#x3D;”字符串值”;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-comment">//用C++风格的字符串时，要包含这个头文件</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string str2=<span class="hljs-string">&quot;hello&quot;</span>;<br>    cout&lt;&lt;str2&lt;&lt;endl;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="布尔类型-bool"><a href="#布尔类型-bool" class="headerlink" title="布尔类型 bool"></a>布尔类型 bool</h2><p>作用：布尔数据类型代表真或者假的值</p><p>bool类型只有两个值：</p><p>true –真（本质是1）</p><p>false –假（本质是0）</p><p>bool类型占一个字节大小</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">bool</span> flag=<span class="hljs-literal">true</span>;<br>    cout&lt;&lt;flag&lt;&lt;endl;<span class="hljs-comment">//1</span><br>    flag=<span class="hljs-literal">false</span>;<br>    cout&lt;&lt;flag&lt;&lt;endl;<span class="hljs-comment">//0</span><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数据的输入"><a href="#数据的输入" class="headerlink" title="数据的输入"></a>数据的输入</h2><p><strong>作用</strong>：用于从键盘或获取数据</p><p><strong>关键字</strong>：cin</p><p><strong>语法</strong>：cin&gt;&gt;变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//整形输入</span><br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;请输入整形变量&quot;</span>&lt;&lt;endl;<br>    cin&gt;&gt;a;<br>    cout&lt;&lt;a&lt;&lt;endl;<br>    <span class="hljs-comment">//浮点型输入</span><br>    <span class="hljs-type">double</span> d=<span class="hljs-number">0</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;请输入浮点型变量&quot;</span>&lt;&lt;endl;<br>    cin&gt;&gt;d;<br>    cout&lt;&lt;d&lt;&lt;endl;<br>    <span class="hljs-comment">//字符型输入</span><br>    <span class="hljs-type">char</span> ch=<span class="hljs-string">&#x27;a&#x27;</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;请输入字符型变量&quot;</span>&lt;&lt;endl;<br>    cin&gt;&gt;ch;<br>    cout&lt;&lt;<span class="hljs-string">&quot;ch=&quot;</span>&lt;&lt;ch&lt;&lt;endl;<br>    <span class="hljs-comment">//bool类型</span><br>    <span class="hljs-type">bool</span> flag=<span class="hljs-literal">false</span>;<br>    cin&gt;&gt;flag;<br>    cout&lt;&lt;flag&lt;&lt;endl;<br>    <span class="hljs-comment">//bool类型只要是非0的都代表真</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Cpp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Cpp入门一</title>
    <link href="/2024/01/23/Cpp%E5%85%A5%E9%97%A8%E4%B8%80/"/>
    <url>/2024/01/23/Cpp%E5%85%A5%E9%97%A8%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Cpp初始"><a href="#Cpp初始" class="headerlink" title="Cpp初始"></a>Cpp初始</h1><h2 id="Cpp基本框架"><a href="#Cpp基本框架" class="headerlink" title="Cpp基本框架"></a>Cpp基本框架</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Hello World&quot;</span>&lt;&lt;endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//目前已知endl为自动换行，类似于c语言中的/n。</span><br>    <span class="hljs-comment">//而system(&quot;pause&quot;);可以理解为调用内部命令，使得程序暂停住，按任意键才可以继续。</span><br>&#125;<br><span class="hljs-comment">//打印出Hello World——梦开始的地方</span><br></code></pre></td></tr></table></figure><h2 id="关于注释"><a href="#关于注释" class="headerlink" title="关于注释"></a>关于注释</h2><p>作用：在代码中加一些说明和解释，方便自己或者其他程序员阅读代码</p><p>两种格式：1.单行注释       &#x2F;&#x2F;描述信息</p><p>​    2.多行注释      &#x2F;* 描述信息 *&#x2F;</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>作用：给一段制定的内存空间起名字，方便操作这段内存</p><p>语法：数据类型 变量名&#x3D;初始值；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">10</span>;<br>cout&lt;&lt;<span class="hljs-string">&quot;a =&quot;</span>&lt;&lt; a &lt;&lt;endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>作用：用于记录程序中不可更改的数据</p><p>Cpp定义常量的两种方式</p><p>1.#define 宏常量——#define 常量名 常量值</p><p>通常在文件上方定义，表示一个常量</p><p>2.const修饰的变量 const 数据类型 常量名&#x3D;常量值</p><p>通常在变量定义前加上关键字const，修饰该变量为常量，不可修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> day 7</span><br><span class="hljs-comment">//1.宏常量</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;一周里总共有&quot;</span>&lt;&lt; day &lt;&lt;<span class="hljs-string">&quot;天&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-comment">//day=8——报错，宏常量不可以修改</span><br>    <span class="hljs-comment">//2.const 修饰变量</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> month=<span class="hljs-number">12</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;一年有&quot;</span>&lt;&lt;month&lt;&lt;<span class="hljs-string">&quot;月&quot;</span>&lt;&lt;endl;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>作用：关键字是C++中预先保留的单词（标识符）</p><p><strong>在定义变量或者常量时，不要用关键字</strong></p><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><h2 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h2><p>作用：C++规定给标识符（变量，常量）命名时，有一套自己的规则</p><p>1.标识符不能是关键字</p><p>2.标识符只能由字母、数字、下划线组成</p><p>3.第一个字符必须为字母或者下划线</p><p>4.标识符中字母区分大小写</p>]]></content>
    
    
    <categories>
      
      <category>Cpp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象之继承一</title>
    <link href="/2023/12/30/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%A7%E6%89%BF%E4%B8%80/"/>
    <url>/2023/12/30/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%BB%A7%E6%89%BF%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="继承的基本原则"><a href="#继承的基本原则" class="headerlink" title="继承的基本原则"></a>继承的基本原则</h1><h2 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一.基本概念"></a>一.基本概念</h2><p>一个类A继承一个类B</p><p>类A会继承类B的所有成员</p><p><strong>A类将拥有B类的所有特征和行为</strong></p><p>被继承的类称为：父类，基类，超类</p><p>继承的类称为：子类，派生类</p><p>子类可以有直接的特征和行为</p><p><strong>特点：</strong></p><p>1.单根性 子类只能有一个父类</p><p>2.传递性 子类可以间接继承父类的父类</p><h2 id="二-基本语法"><a href="#二-基本语法" class="headerlink" title="二.基本语法"></a>二.基本语法</h2><p>class 类名 :被继承的类名</p><p>{</p><p>}</p><h2 id="三-实例"><a href="#三-实例" class="headerlink" title="三.实例"></a>三.实例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> number;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>()</span>&#123;<br>        Console.WriteLine(name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">TeachingTeacher</span> :<span class="hljs-title">Teacher</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> subject;<br>    <span class="hljs-comment">//上面的name，number都是可以直接写的.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SpeakSubject</span>()</span>&#123;<br>        Console.WriteLine(subject);<br>&#125;<br>&#125;<br><span class="hljs-comment">//下面是主函数模块</span><br>TeachingTeacher tt =<span class="hljs-keyword">new</span> TeachingTeacher();<br>tt.name =<span class="hljs-string">&quot;大帅哥&quot;</span>;<br>tt.number =<span class="hljs-number">1</span>;<br>tt.Speak();<br><span class="hljs-comment">//可以直接用父类的成员变量和成员方法。</span><br></code></pre></td></tr></table></figure><h2 id="四-访问修饰符的影响"><a href="#四-访问修饰符的影响" class="headerlink" title="四.访问修饰符的影响"></a>四.访问修饰符的影响</h2><p>public -公共 内外部访问</p><p>private -私有 内部访问</p><p>protected -保护 内部和子类访问</p><p>之后讲命名空间的时候讲</p><p>internal -内部的，只有在同一个程序集的文件中，内部类型或者是成员才可以访问。</p><h2 id="五-子类和父类的同名成员"><a href="#五-子类和父类的同名成员" class="headerlink" title="五.子类和父类的同名成员"></a>五.子类和父类的同名成员</h2><p>概念 C#中允许子类和父类存在同名成员，<strong>但是极其不建议使用</strong></p><p>子类会把父类的成员名覆盖掉了。</p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git命令入门</title>
    <link href="/2023/12/24/Git%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/"/>
    <url>/2023/12/24/Git%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="关于Git命令的一些小汇总"><a href="#关于Git命令的一些小汇总" class="headerlink" title="关于Git命令的一些小汇总"></a>关于Git命令的一些小汇总</h1><h2 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name<span class="hljs-string">&quot;Your Name&quot;</span>   配置用户名<br>git config --global user.email<span class="hljs-string">&quot;mail@example.com&quot;</span>  配置邮箱<br>git config --global credential store  存储配置<br>git config --global --list  查看用户配置信息<br></code></pre></td></tr></table></figure><p><strong>注:</strong></p><p>省略参数（Local）：表示本地配置，只对本地仓库有效</p><p>global：全局配置，所有仓库生效</p><p>system：系统配置，对所有用户生效</p><h2 id="新建版本库（仓库）"><a href="#新建版本库（仓库）" class="headerlink" title="新建版本库（仓库）"></a>新建版本库（仓库）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init &lt;project-name&gt;<br>创建一个新的本地仓库（省略project-name则在当前目录创建）<br>git <span class="hljs-built_in">clone</span>&lt;url&gt;<br>克隆一个远程仓库<br></code></pre></td></tr></table></figure><h2 id="Git的工作区域和工作状态"><a href="#Git的工作区域和工作状态" class="headerlink" title="Git的工作区域和工作状态"></a>Git的工作区域和工作状态</h2><h3 id="四个区域"><a href="#四个区域" class="headerlink" title="四个区域"></a>四个区域</h3><p><strong>工作区（Working Directory)</strong></p><p>就是你在电脑里能实际看到的目录</p><p><strong>暂存区(Stage&#x2F;Index)</strong></p><p>暂存区也叫索引，用来临时存放未提交的内容，一般在.git目录下的index中</p><p><strong>本地仓库（Repository)</strong></p><p>Git在本地的版本库，仓库信息存储在.git这个隐藏目录中。</p><p><strong>远程仓库(Remote Repository)</strong></p><p>托管在远程服务器上的仓库。常用的有GitHub、GitLab、Gitee.</p><h3 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h3><p><strong>已修改（Modified）</strong></p><p>修改了但是没有保存到暂存区的文件</p><p><strong>已暂存（Staged）</strong></p><p>修改后已经保存到暂存区的文件</p><p><strong>已提交（Committed）</strong></p><p>把暂存区的文件提交到本地仓库后的状态</p><h3 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h3><p><strong>main&#x2F;master</strong>      默认主分支</p><p>**Origin**默认远程仓库</p><p><strong>HEAD</strong>指向当前分支的指针</p><p><strong>HEAD^</strong>上一个版本</p><p><strong>HEAD~</strong>上四个版本</p><h3 id="特殊文件"><a href="#特殊文件" class="headerlink" title="特殊文件"></a>特殊文件</h3><p>.gitGit仓库的元数据和对象数据库</p><p>.gitignore忽略文件,不需要提交到仓库的文件</p><p>.gitattributes指向当前分支的指针</p><p>.gitkeep使空目录被提交到仓库</p><p>.gitmodules记录子模块的信息</p><p>.gitconfig记录仓库的配置信息</p><h2 id="添加和提交文件"><a href="#添加和提交文件" class="headerlink" title="添加和提交文件"></a>添加和提交文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git status  <span class="hljs-comment">#查看仓库当前状态</span><br>On branch master<br><br>No commits yet<br><br>nothing to commit (create/copy files and use <span class="hljs-string">&quot;git add&quot;</span> to track)<br><span class="hljs-comment">#空仓库会显示上面的状况</span><br><span class="hljs-comment">#之后,可以用Linux或者Vscode创建一个文件,这里用Linux</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ss&quot;</span> &gt;file1.txt<br><span class="hljs-comment">#此时再次查看状态,会发现变化</span><br>On branch master<br><br>No commits yet<br><br>Untracked files:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="hljs-keyword">in</span> what will be committed)<br>        file1.txt<br><br>nothing added to commit but untracked files present (use <span class="hljs-string">&quot;git add&quot;</span> to track)<br><span class="hljs-comment">#之后使用添加命令,将文件放到暂存区中</span><br>$ git add file1.txt<br>On branch master<br><br>No commits yet<br><br>Changes to be committed:<br>  (use <span class="hljs-string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)<br>        new file:   file1.txt<br><span class="hljs-comment">#会发现,文件的状态再次被改变,表示该文件已经被添加到了暂存区域中</span><br><span class="hljs-comment">#在括号中的那一栏表示取消缓存</span><br><span class="hljs-comment">#之后,尝试将文件提交到仓库之中</span><br>$ git commit -m <span class="hljs-string">&quot;ss&quot;</span><br>[master (root-commit) e3c2751] ss<br> 1 file changed, 1 insertion(+)<br> create mode 100644 file1.txt<br><span class="hljs-comment">#显示以上信息,此时再来查看仓库的状态</span><br>$ git status<br>On branch master<br>nothing to commit, working tree clean<br><span class="hljs-comment">#file已经不见了,已经到仓库里面了</span><br><span class="hljs-comment">#之后可以使用git log 查看仓库提交信息</span><br>$ git <span class="hljs-built_in">log</span><br>commit e3c2751597d4b423fa23c338814725974282b6c8 (HEAD -&gt; master)<br>Author: huangjinhong &lt;3392591652@qq.com&gt;<br>Date:   Sun Dec 24 19:38:00 2023 +0800<br><br>    ss<br><span class="hljs-comment">#log后面可以加一些东西,来查看简洁的提交记录</span><br>$ git <span class="hljs-built_in">log</span> --oneline<br>e3c2751 (HEAD -&gt; master) ss<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象之封装十一</title>
    <link href="/2023/12/24/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E5%8D%81%E4%B8%80/"/>
    <url>/2023/12/24/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E5%8D%81%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="内部类和分布类（了解即可）"><a href="#内部类和分布类（了解即可）" class="headerlink" title="内部类和分布类（了解即可）"></a>内部类和分布类（了解即可）</h1><h2 id="一-内部类"><a href="#一-内部类" class="headerlink" title="一.内部类"></a>一.内部类</h2><p><strong>概念：</strong>在一个类中再申明一个类</p><p><strong>特点：</strong>使用时要用包裹者点出自己</p><p><strong>作用：</strong>亲密关系的变现</p><p><strong>注意：</strong>访问修饰符的作用很大</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">public</span> Body body;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Body</span>&#123;<br>        Arm leftArm;<br>        Arm rightArm;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title">Arm</span>&#123;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//以下是主函数模块</span><br>Person p =<span class="hljs-keyword">new</span> Person();<br>Person.Body body=<span class="hljs-keyword">new</span> Person.Body();<br><span class="hljs-comment">//这里点不出Arm，因为默认是私有的（private），改成public就行了。</span><br></code></pre></td></tr></table></figure><h2 id="二-分布类"><a href="#二-分布类" class="headerlink" title="二.分布类"></a>二.分布类</h2><p><strong>概念</strong>：把一个类分成几部分申明</p><p>关键字：<strong>partial</strong></p><p><strong>作用：</strong></p><p>分部描述一个类</p><p>增加程序的拓展性</p><p><strong>注意：</strong></p><p>分部类可以写在<strong>多个脚本文件中</strong></p><p>分部类的访问修饰符要一致</p><p>分部类中不能有重复成员</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> sex;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>&#125;<br><span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> number;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;&#123;0&#125;&quot;</span>,str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>这个重点在于分部类可以写在多个脚本文件中，等到后面会继续涉及。</em></p><h2 id="三-分部方法"><a href="#三-分部方法" class="headerlink" title="三.分部方法"></a>三.分部方法</h2><p>概念：</p><p>将方法的申明和实现分离</p><p>特点：</p><p>1.不能加访问修饰符 默认私有</p><p>2.只能再分部类中申明</p><p>3.返回值只能是void</p><p>4.可以有参数但是不用，out关键字</p><p><strong>局限很大，了解即可</strong></p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象之封装十</title>
    <link href="/2023/12/24/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E5%8D%81/"/>
    <url>/2023/12/24/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E5%8D%81/</url>
    
    <content type="html"><![CDATA[<h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1><h2 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一.基本概念"></a>一.基本概念</h2><p>概念：让自定义类和结构体能够使用运算符</p><p>使用关键字：<strong>operator</strong></p><p><strong>特点：</strong></p><p>1.一定是一个公共的静态方法</p><p>2.返回值写在operator前面</p><p>3.逻辑处理自定义</p><p><strong>作用：</strong></p><p>让自定义类和结构体对象可以进行运算</p><p><strong>注意：</strong></p><p>1.条件运算符需要成对实现</p><p>2.一个符号可以多个重载</p><p>3.不能使用ref和out</p><h2 id="二-基本语法"><a href="#二-基本语法" class="headerlink" title="二.基本语法"></a>二.基本语法</h2><p>public static 返回类型 operator 运算符(参数列表){   }</p><p>注意：参数类型至少有一个是和类的类型是一样的。</p><h2 id="三-实例与使用"><a href="#三-实例与使用" class="headerlink" title="三.实例与使用"></a>三.实例与使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Point</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> x;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> y;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Point <span class="hljs-keyword">operator</span> +(Point p1,Point p2)&#123;<br>        Point p=<span class="hljs-keyword">new</span> Point();<br>        p.x=p1.x+p2.x;<br>        p.y=p1.y+p2.y;<br>        <span class="hljs-keyword">return</span> p;<br>&#125;<br>    <span class="hljs-comment">//接下来对运算符加号再进行重载</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Point <span class="hljs-keyword">operator</span> +(Point p1,<span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span>)&#123;<br>        Point p=<span class="hljs-keyword">new</span> Point();<br>        p.x=p1.x+<span class="hljs-keyword">value</span>;<br>        p.y=p1.y+<span class="hljs-keyword">value</span>;<br>        <span class="hljs-keyword">return</span> p;<br>&#125;<br>&#125;<br><span class="hljs-comment">//以下是主函数模块</span><br>Point p=<span class="hljs-keyword">new</span> Point();<br>p.x=<span class="hljs-number">1</span>;<br>p.y=<span class="hljs-number">1</span>;<br>Point p2=<span class="hljs-keyword">new</span> Point();<br>p.x=<span class="hljs-number">2</span>;<br>p.y=<span class="hljs-number">2</span>;<br>Point p3=p+p2;<br><span class="hljs-comment">//相当于为加号新加了一个成员方法（即重载了一个函数），这个成员方法可以把两个自定义类相加。</span><br>Point p4=p3+<span class="hljs-number">2</span>;<br><span class="hljs-comment">//相当于p3的横坐标加上了2. </span><br></code></pre></td></tr></table></figure><h2 id="四-可重载和不可重载运算符"><a href="#四-可重载和不可重载运算符" class="headerlink" title="四.可重载和不可重载运算符"></a>四.可重载和不可重载运算符</h2><h3 id="可重载"><a href="#可重载" class="headerlink" title="可重载"></a>可重载</h3><p><strong>算数运算符</strong></p><p>+ - * &#x2F; % ++ –</p><p>（注意符号需要的是两个参数还是一个参数）</p><p><strong>逻辑运算符</strong></p><p>!(逻辑非)</p><p><strong>位运算符</strong></p><p>^ ~ &lt;&lt; &gt;&gt; | &amp;</p><p><strong>条件运算符</strong></p><p>1.返回值一般是bool值，也可以是其他的</p><p>2.相关符号必须配对实现</p><p><em>(重载了大于，一定要重载小于，一定要配对)</em></p><p>&gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; !&#x3D;</p><h3 id="不可重载"><a href="#不可重载" class="headerlink" title="不可重载"></a>不可重载</h3><p>逻辑与（&amp;&amp;）</p><p>逻辑或（||）</p><p>索引符（[]）</p><p>强转运算符（（））</p><p>特殊运算符：点（.）,三目运算符(? : )赋值符号（&#x3D;）</p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象之封装九</title>
    <link href="/2023/12/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E4%B9%9D/"/>
    <url>/2023/12/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E4%B9%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="拓展方法"><a href="#拓展方法" class="headerlink" title="拓展方法"></a>拓展方法</h1><h2 id="一-拓展方法基本概念"><a href="#一-拓展方法基本概念" class="headerlink" title="一.拓展方法基本概念"></a>一.拓展方法基本概念</h2><p><strong>概念：</strong>为现有非静态变量类型添加新方法</p><p><strong>作用：</strong></p><p>1.提升程序拓展性</p><p>2.不需要在对象中重新写方法</p><p>3.不需要继承来添加方法</p><p>4.为别人封装的类型写额外的方法</p><p><strong>特点：</strong></p><p>1.一定是写在静态类中</p><p>2.一定是个静态函数</p><p>3.第一个参数为拓展目标</p><p>4.第一个参数用this修饰</p><h2 id="二-基本语法"><a href="#二-基本语法" class="headerlink" title="二.基本语法"></a>二.基本语法</h2><p>访问修饰符 static 返回值 函数名（this 拓展类名 参数名，参数类型 参数名，参数类型 参数名……)</p><h2 id="三-实例"><a href="#三-实例" class="headerlink" title="三.实例"></a>三.实例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Tools</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SpeakValue</span>(<span class="hljs-params"><span class="hljs-keyword">this</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span></span>)</span><br><span class="hljs-function">        <span class="hljs-comment">//为int类型拓展一个成员方法</span></span><br><span class="hljs-function">        <span class="hljs-comment">//而成员方法是需要实例化对象后才能使用的</span></span><br><span class="hljs-function">        <span class="hljs-comment">//value就代表使用该方法的实例化对象</span></span><br>    &#123;<br>        <span class="hljs-comment">//拓展的方法的逻辑</span><br>        Console.WriteLine(<span class="hljs-string">&quot;为int类型拓展的方法&quot;</span>+<span class="hljs-keyword">value</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-使用"><a href="#四-使用" class="headerlink" title="四.使用"></a>四.使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Tools</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SpeakValue</span>(<span class="hljs-params"><span class="hljs-keyword">this</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span></span>)</span><br><span class="hljs-function">        <span class="hljs-comment">//为int类型拓展一个成员方法</span></span><br><span class="hljs-function">        <span class="hljs-comment">//而成员方法是需要实例化对象后才能使用的</span></span><br><span class="hljs-function">        <span class="hljs-comment">//value就代表使用该方法的实例化对象</span></span><br>    &#123;<br>        <span class="hljs-comment">//拓展的方法的逻辑</span><br>        Console.WriteLine(<span class="hljs-string">&quot;为int类型拓展的方法&quot;</span>+<span class="hljs-keyword">value</span>);<br>    &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SpeakStringInfo</span>(<span class="hljs-params"><span class="hljs-keyword">this</span> <span class="hljs-built_in">string</span> str,<span class="hljs-built_in">string</span> str2,<span class="hljs-built_in">string</span> str3</span>)</span>&#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;为string类型拓展的方法&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;调用方法的对象&quot;</span>+str);<br>            Console.WriteLine(<span class="hljs-string">&quot;传的参数为&quot;</span>+str2+str3);<br>        &#125;<br>&#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> i =<span class="hljs-number">10</span>;<br>            i.SpeakValue();<br>            <span class="hljs-comment">//可以点出来使用了，它不需要参数（为什么？？）</span><br>            <span class="hljs-comment">//因为我们this后面跟着的是拓展类名（代表为谁拓展这一个方法）和参数名（这个参数名代表的就是我实例化的对象是谁，在这个例子中所指的正是i，（也是value），相当于实例化对象i调用了这个拓展方法。</span><br>            <span class="hljs-built_in">string</span> str=<span class="hljs-string">&quot;000&quot;</span>;<br>            str.SpeakStringInfo(<span class="hljs-string">&quot;111&quot;</span>,<span class="hljs-string">&quot;222&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说白了，拓展方法就是为那些无法修改的静态类新增加一些成员方法，这样即不用动大手术，又可以起到作用，相当于“打补丁”了。</p><h2 id="五-为自定义的类型拓展方法"><a href="#五-为自定义的类型拓展方法" class="headerlink" title="五.为自定义的类型拓展方法"></a>五.为自定义的类型拓展方法</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Tools</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fun3</span>(<span class="hljs-params"><span class="hljs-keyword">this</span> Test t</span>)</span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;为Test拓展的方法&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> i=<span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fun1</span>()</span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fun2</span>()</span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;456&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//主函数中</span><br>Test t= <span class="hljs-keyword">new</span> Test();<br>t.Fun3();<br><span class="hljs-comment">//如果重名了怎么办？——拓展方法和成员方法重名，会使用成员方法，拓展方法作废。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象之封装八</title>
    <link href="/2023/12/22/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E5%85%AB/"/>
    <url>/2023/12/22/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E5%85%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="静态类和静态构造函数"><a href="#静态类和静态构造函数" class="headerlink" title="静态类和静态构造函数"></a>静态类和静态构造函数</h1><h2 id="一-静态类"><a href="#一-静态类" class="headerlink" title="一.静态类"></a>一.静态类</h2><p><strong>概念</strong>：用static修饰的类</p><p><strong>特点</strong>：只能包含静态成员，并且不能被实例化</p><p><strong>作用：</strong></p><p>1.将常用的静态成员写在静态类中，方便使用</p><p>2.静态类不能被实例化，（不能被new出来），更能体现工具类的唯一性</p><p>3.比如：Console就是一个静态类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestStatic</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> testIndex=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//静态成员变量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>()</span>&#123;<br>        <br>&#125;<br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Index&#123;<br>        <span class="hljs-keyword">get</span>;<br>        <span class="hljs-keyword">set</span>;<br>    &#125;<br>    <span class="hljs-comment">//静态自动属性</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-静态构造函数"><a href="#二-静态构造函数" class="headerlink" title="二.静态构造函数"></a>二.静态构造函数</h2><p><strong>概念</strong>：在构造函数加上static修饰</p><p><strong>特点：</strong></p><p>1.静态类和普通类都可以有</p><p>2.不能使用访问修饰符</p><p>3.不能有参数</p><p>4.只会自动调用一次</p><p><strong>作用：</strong>在静态构造函数中初始化静态变量</p><p><strong>使用：</strong></p><h3 id="1-静态类中的静态构造函数"><a href="#1-静态类中的静态构造函数" class="headerlink" title="1.静态类中的静态构造函数"></a>1.静态类中的静态构造函数</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StaticClass</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> testInt=<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> testInt2=<span class="hljs-number">100</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-title">StaticClass</span>()</span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;静态构造函数&quot;</span>)；<br>            testInt=<span class="hljs-number">200</span>;<br>        testInt2=<span class="hljs-number">300</span>;<br>        <span class="hljs-comment">//静态构造函数其实就是给你初始化使用的</span><br>&#125;<br>&#125;<br><span class="hljs-comment">//主函数模块</span><br>Console.WriteLine(StaticClass.testInt);<br>Console.WriteLine(StaticClass.testInt2);<br><span class="hljs-comment">//结果会输出</span><br><span class="hljs-comment">/* 静态构造函数</span><br><span class="hljs-comment">100</span><br><span class="hljs-comment">100</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//也就是说，第一次使用时，会自动调用一次。</span><br></code></pre></td></tr></table></figure><h3 id="2-普通类中的静态构造函数"><a href="#2-普通类中的静态构造函数" class="headerlink" title="2.普通类中的静态构造函数"></a>2.普通类中的静态构造函数</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> testInt=<span class="hljs-number">200</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-title">Test</span>()</span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;静态构造&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test</span>()</span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;普通构造&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//静态构造和普通构造算是两码事，故不能够算是重载。</span><br>&#125;<br><span class="hljs-comment">//主函数模块</span><br>Test t=<span class="hljs-keyword">new</span> Test();<br>Test t2=<span class="hljs-keyword">new</span> Test();<br><span class="hljs-comment">//因为构造函数是直接初始化的，所以会打印出结果</span><br><span class="hljs-comment">//打印结果如下：</span><br><span class="hljs-comment">/* 静态构造</span><br><span class="hljs-comment">   普通构造</span><br><span class="hljs-comment">   普通构造</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//仍然是第一次使用自动调用。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>静态变量之单例模式</title>
    <link href="/2023/12/21/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/12/21/%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>我们从一个例题入手</p><p><strong>请用静态成员相关知识实现</strong></p><p><strong>一个类对象，在整个应用程序的生命周期中，有且仅有一个该对象的存在，不能在外部实例化，直接通过该类类名就能够得到唯一的对象</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Test t=<span class="hljs-keyword">new</span> Test();<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> testInt =<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Test T<br>        &#123;<br>            <span class="hljs-keyword">get</span>&#123;<br>                <span class="hljs-keyword">return</span> t;<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Test</span>()</span>;<br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span>&#123;<br>            Console.WriteLine(Test.T.testInt);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个程序非常有意思，这个就是单例模式的一个比较简单的形式了。</p><p>我们先定义一个私有的构造无参函数，让它能够做到不能在外部实例化；接着，我们在类里面定义一个静态成员t，这个静态成员就是一个Test类了，并且是唯一的。</p><p>注意！！此时虽然t不能在外部被赋值了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#">Test.t=<span class="hljs-keyword">new</span> Test();<br><span class="hljs-comment">//报错，私有不能实例化</span><br></code></pre></td></tr></table></figure><p>但是，还是可以被赋值为空的！！！！</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#">Test.t=<span class="hljs-literal">null</span>;<br><span class="hljs-comment">//不会报错，并且这个时候t就丢失了</span><br></code></pre></td></tr></table></figure><p>因此，我们还需要做到能够得到却不能被改变，因此可以想到成员属性的用法（get）</p><p>我们通过成员属性，对t实现了保护，之后，只要通过属性，就可以实现Test.T呼出一个唯一的静态成员类t了。此时Test.T.testInt&#x3D;10.</p><p>这个可以好好看看，真的很有意思！</p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象之封装七</title>
    <link href="/2023/12/21/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E4%B8%83/"/>
    <url>/2023/12/21/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E4%B8%83/</url>
    
    <content type="html"><![CDATA[<h1 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h1><h2 id="一-静态成员基本概念"><a href="#一-静态成员基本概念" class="headerlink" title="一.静态成员基本概念"></a>一.静态成员基本概念</h2><p>静态关键字 static</p><p>用static修饰的成员变量，方法，属性等称为静态成员</p><p>静态成员的特点是：直接用类名点出使用</p><h2 id="二-自定义静态成员"><a href="#二-自定义静态成员" class="headerlink" title="二.自定义静态成员"></a>二.自定义静态成员</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">float</span> PI=<span class="hljs-number">3.1415926f</span>;<br>    <span class="hljs-comment">//静态成员变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> testInt=<span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//做对比</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">float</span> <span class="hljs-title">CalcCircle</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> r</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> PI*r*r;<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>()</span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//做对比</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-静态成员的使用"><a href="#三-静态成员的使用" class="headerlink" title="三.静态成员的使用"></a>三.静态成员的使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">float</span> PI=<span class="hljs-number">3.1415926f</span>;<br>    <span class="hljs-comment">//静态成员变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> testInt=<span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//做对比</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">float</span> <span class="hljs-title">CalcCircle</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> r</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> PI*r*r;<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>()</span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//做对比</span><br>&#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Console.WriteLine(Test.PI);<br>            Console.WriteLine(Test.CalcCircle(<span class="hljs-number">2</span>));<br>            <span class="hljs-comment">//这样就可以了，直接点出来使用。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-为什么可以直接点出来使用"><a href="#四-为什么可以直接点出来使用" class="headerlink" title="四.为什么可以直接点出来使用"></a>四.为什么可以直接点出来使用</h2><p><strong>记住！！！！！！！！</strong></p><p>程序中是不能无中生有的</p><p>我们要使用的对象，变量，函数都是要在内存中分配内存空间的</p><p>之所以要实例化对象，目的就是分配内存空间，在程序中产生一个抽象的对象</p><p><strong>静态成员的特点</strong></p><p>程序开始运行时，就会分配一个内存空间，所以我们就可以直接使用</p><p><strong>静态成员和程序“同生共死”</strong></p><p>只要使用了它，直到程序结束时内存空间才会被释放</p><p>所以应该静态成员就会有直接唯一的应该“内存小空间”</p><p><strong>这让静态成员有了唯一性</strong></p><p>在任何地方使用都是用的小房间里的内容，改变了它也是改变小房间里的内容。</p><h2 id="五-静态函数中不能使用非静态成员"><a href="#五-静态函数中不能使用非静态成员" class="headerlink" title="五.静态函数中不能使用非静态成员"></a>五.静态函数中不能使用非静态成员</h2><p>成员变量只能将对象实例化出来后，才能点出来使用，不能无中生有。</p><p>不能直接使用非静态成员，否则会报错。</p><p>（非静态成员一定需要实例化对象之后，（new一个对象），才能使用）</p><h2 id="六-非静态函数可以使用静态成员"><a href="#六-非静态函数可以使用静态成员" class="headerlink" title="六.非静态函数可以使用静态成员"></a>六.非静态函数可以使用静态成员</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#"> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">float</span> PI=<span class="hljs-number">3.1415926f</span>;<br>    <span class="hljs-comment">//静态成员变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> testInt=<span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//做对比</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">float</span> <span class="hljs-title">CalcCircle</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> r</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> PI*r*r;<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TestFun</span>()</span>&#123;<br>        Console.WriteLine(<span class="hljs-string">&quot;123&quot;</span>);<br>            Console.WriteLine(PI);<br>            <span class="hljs-comment">//静态成员一定义，在程序运行时就存在。因此可以在非静态函数中使用静态成员。</span><br>    &#125;<br>    <span class="hljs-comment">//做对比</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="七-静态成员对我们的作用"><a href="#七-静态成员对我们的作用" class="headerlink" title="七.静态成员对我们的作用"></a>七.静态成员对我们的作用</h2><p>静态变量：</p><p>1.常用唯一变量的申明</p><p>2.方便别人获取的对象的申明</p><p>静态方法：</p><p>常用的唯一方法的申明，比如相同规则的数学计算相关函数</p><h2 id="八-常量和静态变量"><a href="#八-常量和静态变量" class="headerlink" title="八.常量和静态变量"></a>八.常量和静态变量</h2><p>const(常量)可以理解为特殊的static（静态）</p><p>相同点：他们都可以通过类名点出来使用</p><p>不同点：</p><p>1.const必须初始化，(static可以在之后赋值)不能修改，而static没有这个规则</p><p>2.const只能修饰变量，而static可以修饰很多</p><p>3.const一定是写在访问修饰符后面的,而static没有这个要求</p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象之封装六</title>
    <link href="/2023/12/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E5%85%AD/"/>
    <url>/2023/12/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E5%85%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="索引器"><a href="#索引器" class="headerlink" title="索引器"></a>索引器</h1><h2 id="一-索引器基本概念"><a href="#一-索引器基本概念" class="headerlink" title="一.索引器基本概念"></a>一.索引器基本概念</h2><p><strong>基本概念</strong>：</p><p>让对象可以像数组一样通过索引访问其中的元素，使程序看起来更直观，更容易编写。</p><h2 id="二-索引器语法"><a href="#二-索引器语法" class="headerlink" title="二.索引器语法"></a>二.索引器语法</h2><p>访问修饰符 返回值 this[参数类型 参数名，参数类型 参数名…..]</p><p>{</p><p>​内部的写法和规则和索引器相同</p><p>​get{}</p><p>​set{}</p><p>}</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-keyword">private</span> Person[] friends;<br>    <span class="hljs-keyword">public</span> Person <span class="hljs-keyword">this</span>[<span class="hljs-built_in">int</span> index]&#123;<br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">return</span> friends[index];<br>        &#125;<br>        <span class="hljs-keyword">set</span>&#123;<br>            <span class="hljs-comment">//value代表传入的值</span><br>            friends[index]=<span class="hljs-keyword">value</span>;<br>        &#125;<br>    &#125;<span class="hljs-comment">//index代表下标索引,表示要找第几个朋友</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-索引器的使用"><a href="#三-索引器的使用" class="headerlink" title="三.索引器的使用"></a>三.索引器的使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-keyword">private</span> Person[] friends;<br>    <span class="hljs-keyword">public</span> Person <span class="hljs-keyword">this</span>[<span class="hljs-built_in">int</span> index]&#123;<br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">return</span> friends[index];<br>        &#125;<br>        <span class="hljs-keyword">set</span>&#123;<br>            <span class="hljs-comment">//value代表传入的值</span><br>            friends[index]=<span class="hljs-keyword">value</span>;<br>        &#125;<br>    &#125;<span class="hljs-comment">//index代表下标索引,表示要找第几个朋友</span><br>&#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Person p=<span class="hljs-keyword">new</span> Person();<br>            p[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> Person();<br>            <span class="hljs-comment">//有索引器了，可以像访问数组一样进行访问。</span><br>            <span class="hljs-comment">//此时会执行索引器中set（访问）模块。</span><br>            Console.WriteLine(p[<span class="hljs-number">0</span>]);<br>            <span class="hljs-comment">//相当于访问get方法。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-索引器中可以写逻辑"><a href="#四-索引器中可以写逻辑" class="headerlink" title="四.索引器中可以写逻辑"></a>四.索引器中可以写逻辑</h2><p>get，set里面可以写逻辑，根据需求来处理内容。</p><p>因为在上面的索引器中，friends数组如果没有进行初始化，默认为空（即指针为null），此时如果进行索引，肯定会报错。外面可以在get与set中加一些逻辑判断避免报错。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-keyword">private</span> Person[] friends;<br>    <span class="hljs-keyword">public</span> Person <span class="hljs-keyword">this</span>[<span class="hljs-built_in">int</span> index]&#123;<br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">if</span>(friends==<span class="hljs-literal">null</span>||friends.Length<span class="hljs-number">-1</span>&lt;index)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> friends[index];<br>        &#125;<br>        <span class="hljs-keyword">set</span>&#123;<br>            <span class="hljs-comment">//value代表传入的值</span><br>            <span class="hljs-keyword">if</span>(friends==<span class="hljs-literal">null</span><span class="hljs-comment">/*数组刚开始为空的情况*/</span>)&#123;<br>                friends=<span class="hljs-keyword">new</span> Person[]&#123;<span class="hljs-keyword">value</span>&#125;;<br>                <span class="hljs-comment">/*新建一个数组去存储这个“朋友类”*/</span><br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index&gt;friends.Length<span class="hljs-number">-1</span>)&#123;<br>                <span class="hljs-comment">//自己定了一个规则，如果索引越界，就默认把最后一个朋友顶掉。</span><br>                friends[friends.Length<span class="hljs-number">-1</span>]=<span class="hljs-keyword">value</span>;<br>            &#125;<br>            friends[index]=<span class="hljs-keyword">value</span>;<br>        &#125;<br>    &#125;<span class="hljs-comment">//index代表下标索引,表示要找第几个朋友</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五-索引器可以重载"><a href="#五-索引器可以重载" class="headerlink" title="五.索引器可以重载"></a>五.索引器可以重载</h2><p>重载的概念是——函数名相同，参数类型、数量、顺序不同</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-keyword">private</span> Person[] friends;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> str1;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> [,] array;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">this</span>[<span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> j];<br>    <span class="hljs-comment">//重载了索引器.</span><br>    &#123;<br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">return</span> array[i,j];<br>        &#125;<span class="hljs-keyword">set</span>&#123;<br>            array[i,j]=<span class="hljs-keyword">value</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-keyword">this</span>[<span class="hljs-built_in">string</span> str]&#123;<br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">switch</span>(str)&#123;<br>                    <span class="hljs-keyword">case</span><span class="hljs-string">&quot;name&quot;</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;age&quot;</span>:<br>                    <span class="hljs-keyword">return</span> age.ToString();<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-comment">//这一步是因为不是所有字符串都会进到switch中，如果没有这一步，那么那些没进去的字符串就没有返回值，违背get必须有返回值的原则。</span><br>        &#125;<span class="hljs-keyword">set</span>&#123;<br>            str=<span class="hljs-keyword">value</span>;<br>        &#125;<br>&#125;<br><span class="hljs-comment">//在主函数中</span><br>Person p =<span class="hljs-keyword">new</span> Person();<br>p[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]=<span class="hljs-number">10</span>;<br>p[str]=<span class="hljs-string">&quot;age&quot;</span>;<br><span class="hljs-comment">//因为重载中，二维数组没有初始化，所以可能会报错（毕竟数组都没有），可以自己写逻辑进行完善，这里不过多赘述。</span><br></code></pre></td></tr></table></figure><p><em>在string 的这个索引器中，我们可以实现外面传入字符串来查找相关变量名的数据的功能，相当有意思。</em></p><p><em><strong>索引器一定要配合数组使用！！！！！！！！！！</strong></em></p><p><strong>附：</strong></p><p><strong>索引器对我们来说的主要作用：可以让我们以中括号的形式自定义类中的元素，规则自己定，访问时和数组一样。</strong></p><p><strong>比较适用于在类中有数组变量时使用，可以方便的访问和进行逻辑处理。</strong></p><p><strong>结构体里面也是支持索引器的！！！</strong></p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象之封装五</title>
    <link href="/2023/12/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E4%BA%94/"/>
    <url>/2023/12/19/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E4%BA%94/</url>
    
    <content type="html"><![CDATA[<h1 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a>成员属性</h1><h2 id="一-成员属性的基本概念"><a href="#一-成员属性的基本概念" class="headerlink" title="一.成员属性的基本概念"></a>一.成员属性的基本概念</h2><p><strong>基本概念：</strong></p><p><strong>1.用于保护成员变量</strong></p><p>2.为成员属性的获取和赋值添加逻辑处理</p><p>3.解决3P的局限性</p><p>​public ——内外访问</p><p>​private ——内部访问</p><p>​protected ——内部和子类访问</p><p><em>（访问：修改或者获取它）</em></p><p>属性可以让成员变量在外部实现只能获取不能修改，或者只能修改不能获取</p><h2 id="二-成员属性的基本语法"><a href="#二-成员属性的基本语法" class="headerlink" title="二.成员属性的基本语法"></a>二.成员属性的基本语法</h2><p>访问修饰符 属性类型 属性名</p><p>{</p><p>​get{}</p><p>​set{}</p><p>}</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//在namespace声明，不多写了</span><br><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> money;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> sex;<br>    <span class="hljs-comment">//属性的命名一般使用帕斯卡命名法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name&#123;<br>        <span class="hljs-comment">//get要有返回值</span><br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-comment">//get意味着这个属性可以获取的内容</span><br>            <span class="hljs-comment">//可以在返回之前添加一些逻辑规则</span><br>            <span class="hljs-keyword">return</span> name;<br>            <span class="hljs-comment">//通过Name的属性，你可以访问到name这个变量.</span><br>        &#125;<br>        <span class="hljs-keyword">set</span>&#123;<br>            <span class="hljs-comment">//可以在设置之前添加一些逻辑规则</span><br>            <span class="hljs-comment">//value 关键字，用于表示外部传入的值,只在set里面有用</span><br>            name =<span class="hljs-keyword">value</span>;<br>            <span class="hljs-comment">//只要外面赋值给Name属性了，就会将值传给value,之后再把值传给name。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-成员属性的使用"><a href="#三-成员属性的使用" class="headerlink" title="三.成员属性的使用"></a>三.成员属性的使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> money;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> sex;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name&#123;<br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">return</span> name;<br>        &#125;<br>        <span class="hljs-keyword">set</span>&#123;<br>            name =<span class="hljs-keyword">value</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Money&#123;<br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">return</span> money<span class="hljs-number">-5</span>;<br>            <span class="hljs-comment">//解密处理</span><br>        &#125;<br>        <span class="hljs-keyword">set</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">value</span>&lt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">value</span>=<span class="hljs-number">0</span>;<br>                Console.WriteLine(<span class="hljs-string">&quot;钱不能少于0，强制设置为0&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//保护处理</span><br>            money=<span class="hljs-keyword">value</span><span class="hljs-number">-5</span>;<br>            <span class="hljs-comment">//加密处理</span><br>        &#125;<br>&#125;<br>        <span class="hljs-comment">//通过属性可以实现一些简单的加密解密处理，例如可以在set设置的时候将值加上5，在get获取得到输出的时候将值减去5.这就是最简单的加密解密过程了。</span><br>&#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Person p =<span class="hljs-keyword">new</span> Person();<br>            p.Name=<span class="hljs-string">&quot;大帅哥&quot;</span>;<br>            <span class="hljs-comment">//执行的是set语句块</span><br>            Console.WriteLine(p.Name);<br>            <span class="hljs-comment">//执行的是get语句块。</span><br>            p.Money=<span class="hljs-number">1000</span>;<br>            Console.WriteLine(p.Money);<br>        &#125;<br>    &#125;<br>&#125;<br>```<br></code></pre></td></tr></table></figure><h2 id="四-成员属性中，get和set前面可以加访问修饰符"><a href="#四-成员属性中，get和set前面可以加访问修饰符" class="headerlink" title="四.成员属性中，get和set前面可以加访问修饰符"></a>四.成员属性中，get和set前面可以加访问修饰符</h2><p>注意：</p><p>1.默认不加，会使用属性申明时的访问权限</p><p>2.加的访问修饰符要<strong>低于</strong>属性的访问权限</p><p>3.不能让get和set的访问权限都低于属性的权限</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#">  <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> money;<br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Money&#123;<br>       <span class="hljs-comment">//get默认不加访问修饰符时，默认是外面的访问修饰符，在这里是public。</span><br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">get</span>&#123;<br>           <span class="hljs-keyword">return</span> money<span class="hljs-number">-5</span>;<br>       &#125;<br>       <span class="hljs-comment">//加了private之后，表明，在之后想要调用类的属性时，只能是实现set操作（设置）而不能实现get（获取）操作了。</span><br>       <span class="hljs-comment">//此时Console.WriteLine(p.Money);将会保错，因为get访问器不可访问。</span><br>       <span class="hljs-comment">//set同理,此时p.Money=1000将报错，因为不能实现设置功能了。</span><br>       <span class="hljs-keyword">set</span>&#123;<br>           <span class="hljs-keyword">if</span>(<span class="hljs-keyword">value</span>&lt;<span class="hljs-number">0</span>)&#123;<br>               <span class="hljs-keyword">value</span>=<span class="hljs-number">0</span>;<br>               Console.WriteLine(<span class="hljs-string">&quot;钱不能少于0，强制设置为0&quot;</span>);<br>           &#125;<br>           <span class="hljs-comment">//保护处理</span><br>           money=<span class="hljs-keyword">value</span><span class="hljs-number">-5</span>;<br>           <span class="hljs-comment">//加密处理</span><br>       &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五-get和set可以只有一个"><a href="#五-get和set可以只有一个" class="headerlink" title="五.get和set可以只有一个"></a>五.get和set可以只有一个</h2><p>注意：</p><p>只有一个时，没有必要在前面加上访问修饰符</p><p>一般情况下，只会出现只有get的情况，基本不会出现只有set的情况。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> sex;<br>    &#123;<br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">return</span> sex;<br>        &#125;<br>        <span class="hljs-comment">//一般我们可能只希望别人得到数据，并不希望别人改写数据，所以可以只有一个get。</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//在主函数内</span><br>Person p=<span class="hljs-keyword">new</span> Person();<br>Console.WriteLine(p.Sex);<br>P.Sex=<span class="hljs-literal">false</span>;<br><span class="hljs-comment">//会报错</span><br></code></pre></td></tr></table></figure><h2 id="六-自动属性"><a href="#六-自动属性" class="headerlink" title="六.自动属性"></a>六.自动属性</h2><p>作用：外部能得不能改的特征。</p><p>如果类中有一个特质是只希望外部能得不能改，<strong>又没什么特殊处理</strong>（没有在get和set中写逻辑的需求和想法），那么可以直接使用自动属性。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> Height&#123;<br>        <span class="hljs-keyword">get</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span>;<br>        <span class="hljs-comment">//自动属性</span><br>        <span class="hljs-comment">//可以理解为一个自动的成员变量，在类中我们其实并没有一个成员变量来表示身高，所以，在成员属性中声明之后，会自动生成一个成员变量进行存储，虽然我们并不知道这个变量的名字是什么。</span><br>        <span class="hljs-comment">//这个Height的成员属性只能从外面得到，不能在外面进行修改。</span><br>        <span class="hljs-comment">//在内部改这个属性就可以了。</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象之封装四</title>
    <link href="/2023/12/03/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E5%9B%9B/"/>
    <url>/2023/12/03/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E5%9B%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="构造函数和析构函数"><a href="#构造函数和析构函数" class="headerlink" title="构造函数和析构函数"></a>构造函数和析构函数</h1><h2 id="一-构造函数"><a href="#一-构造函数" class="headerlink" title="一.构造函数"></a>一.构造函数</h2><p><strong>基本概念：</strong></p><p>在实例化对象时，会调用的用于初始化的函数。</p><p><strong>如果不写，默认存在一个无参构造函数。</strong></p><p><strong>构造函数的写法：</strong></p><p>1.没有返回值</p><p>2.函数名和类名必须相同</p><p>3.没有特殊需求时，一般都是public</p><p>4.构造函数可以重载</p><p>5.this代表当前调用该函数的对象自己。</p><p><strong>注意：</strong></p><p><em><strong>如果不自己实现无参构造函数而实现了有参构造函数，会失去默认的无参构造。</strong></em>(默认的无参构造函数会丢失)</p><p>（感觉和结构体好像哦）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>        <span class="hljs-comment">//类中是允许自己申明无参构造函数的</span><br>        <span class="hljs-comment">//但是结构体是不允许的</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>()</span>&#123;<br>        name=<span class="hljs-string">&quot;大帅哥&quot;</span>;<br>        age=<span class="hljs-number">18</span>;<br>        <span class="hljs-comment">//开始构造函数嘞。</span><br>&#125;<br>        <span class="hljs-comment">//允许有重载，可以再写一个。</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age,<span class="hljs-built_in">string</span> name</span>)</span>&#123;<br>         <span class="hljs-comment">//this 代表当前该调用函数的对象自己。</span><br>         <span class="hljs-keyword">this</span>.age=age;<br>         <span class="hljs-comment">//this代表类里面的age，另一个代表外面传进来的age（即形式参数）</span><br>         <span class="hljs-keyword">this</span>.name=name;<br>     &#125;<br>&#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span>&#123;<br>            Person p=<span class="hljs-keyword">new</span> Person();<br>            <span class="hljs-comment">//这个时候其实调用的就是一个无参的构造函数了。</span><br>            <span class="hljs-comment">//在调用那个new Person时，其实就会执行上面那个无参构造函数。在执行时就会把我们的成员变量进行初始化了。</span><br>            <span class="hljs-comment">//和结构体高度相似了。</span><br>            Console.WriteLine(p.age);<br>            <span class="hljs-comment">//这个时候age就是我们在构造函数时赋的值，age会打印出18.</span><br>            Person p2=<span class="hljs-keyword">new</span> Person(<span class="hljs-number">18</span>,<span class="hljs-string">&quot;大帅哥&quot;</span>);<br>            <span class="hljs-comment">//默认调用另一个重载函数。</span><br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-构造函数的特殊写法"><a href="#二-构造函数的特殊写法" class="headerlink" title="二.构造函数的特殊写法"></a>二.构造函数的特殊写法</h2><p>可以通过this重用构造函数代码</p><p>访问修饰符   构造函数名（参数列表）：this（参数1，参数2…….）</p><h3 id="有参重构无参函数"><a href="#有参重构无参函数" class="headerlink" title="有参重构无参函数"></a>有参重构无参函数</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>        <span class="hljs-comment">//类中是允许自己申明无参构造函数的</span><br>        <span class="hljs-comment">//但是结构体是不允许的</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>()</span>&#123;<br>        name=<span class="hljs-string">&quot;大帅哥&quot;</span>;<br>        age=<span class="hljs-number">18</span>;<br>        <span class="hljs-comment">//开始构造函数嘞。</span><br>&#125;<br>        <span class="hljs-comment">//允许有重载，可以再写一个。</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age,<span class="hljs-built_in">string</span> name</span>):<span class="hljs-title">this</span>()</span>&#123;<br>         <span class="hljs-comment">//注意，在这个构造函数中，参数列表就没有意义了。会首先调用this（）（this（）就代表那个无参的构造函数）所指的函数，之后再调用当前的这个函数的逻辑。</span><br>         Console.WriteLine(<span class="hljs-string">&quot;两个&quot;</span>);<br>     &#125;<br>&#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span>&#123;<br>            Person p=<span class="hljs-keyword">new</span> Person(<span class="hljs-number">18</span>,<span class="hljs-string">&quot;哈哈&quot;</span>);<br>            Console.WriteLine(p.age);<br>        &#125;<br>        <span class="hljs-comment">//最后会先输出“两个”，再输出18.因为先执行了this函数指向的无参函数，让age等于18，之后再执行有参函数，输出“两个”这一字符串，之后再进到主函数中打印出18.</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有参重构有参函数"><a href="#有参重构有参函数" class="headerlink" title="有参重构有参函数"></a>有参重构有参函数</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>        <span class="hljs-comment">//类中是允许自己申明无参构造函数的</span><br>        <span class="hljs-comment">//但是结构体是不允许的</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>()</span>&#123;<br>        name=<span class="hljs-string">&quot;大帅哥&quot;</span>;<br>        age=<span class="hljs-number">18</span>;<br>        <span class="hljs-comment">//开始构造函数嘞。</span><br>&#125;<br>        <span class="hljs-comment">//允许有重载，可以再写一个。</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age,<span class="hljs-built_in">string</span> name</span>):<span class="hljs-title">this</span>(<span class="hljs-params">name</span>)</span>&#123;<br>         Console.WriteLine(<span class="hljs-string">&quot;两个&quot;</span>);<br>     &#125;<br>        <span class="hljs-comment">//传参传谁的？传你的那个构造函数，（就是this前面的函数），意思为：当执行到this前面那个函数时，它会把那个有两个参数的函数里面的name参数先传进去this所指的构造函数中，再进到this函数中进行逻辑执行。</span><br>        <span class="hljs-comment">//总结：你传的参数类型是什么，它this调用的构造函数就是什么。</span><br>        <span class="hljs-comment">//再构造一个有一个参数的有参函数</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span>&#123;<br>         <span class="hljs-keyword">this</span>.name=name;<br>&#125;<br>&#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span>&#123;<br>            Person p=<span class="hljs-keyword">new</span> Person(<span class="hljs-number">18</span>,<span class="hljs-string">&quot;哈哈&quot;</span>);<br>            Console.WriteLine(p.age);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="无参重构有参函数"><a href="#无参重构有参函数" class="headerlink" title="无参重构有参函数"></a>无参重构有参函数</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>()<span class="hljs-title">this</span>(<span class="hljs-params"><span class="hljs-number">18</span></span>)</span>&#123;<br>        name=<span class="hljs-string">&quot;大帅哥&quot;</span>;<br>        age=<span class="hljs-number">18</span>;<br>&#125;<br>     <span class="hljs-comment">//在这种情况下，this前面的函数括号里面没有参数形式了，也没有东西可以传进this所指的构造函数了，但是还是可以调用this函数的。可以在this里面写常量，会自动判别常量的类型，从而调用相应的this函数。</span><br>     <span class="hljs-comment">//可以看出，只要this（）内的结果是参数类型，不一定要this前面函数的参数名，你也可以自己写一个变量。</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age,<span class="hljs-built_in">string</span> name</span>):</span>&#123;<br>         Console.WriteLine(<span class="hljs-string">&quot;两个&quot;</span>);<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age</span>)</span>&#123;<br>         <span class="hljs-keyword">this</span>.age=age;<br>&#125;<br>&#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span>&#123;<br>            Person p=<span class="hljs-keyword">new</span> Person(<span class="hljs-number">18</span>,<span class="hljs-string">&quot;哈哈&quot;</span>);<br>            Console.WriteLine(p.age);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三-析构函数（了解即可）"><a href="#三-析构函数（了解即可）" class="headerlink" title="三.析构函数（了解即可）"></a>三.析构函数（了解即可）</h2><p><strong>基本概念</strong></p><p>当引用类型的堆内存被回收时，会调用该函数</p><p>对于需要手动管理内存的语言（比如C++)，需要在析构函数中做一些内存回收处理。</p><p>但是C#中存在自动垃圾回收机制GC</p><p>所以我们几乎不会怎么使用析构函数，除非你想在某一个对象被垃圾回收时，做一些特殊处理。</p><p><strong>注意：</strong>在Unity开发中，析构函数几乎不会使用，所以该知识点只做了解即可。</p><p><strong>基本语法</strong>：</p><p>~类名（）</p><p>{</p><p>}</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>()<span class="hljs-title">this</span>(<span class="hljs-params"><span class="hljs-number">18</span></span>)</span>&#123;<br>        name=<span class="hljs-string">&quot;大帅哥&quot;</span>;<br>        age=<span class="hljs-number">18</span>;<br>&#125;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age,<span class="hljs-built_in">string</span> name</span>):</span>&#123;<br>         Console.WriteLine(<span class="hljs-string">&quot;两个&quot;</span>);<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age</span>)</span>&#123;<br>         <span class="hljs-keyword">this</span>.age=age;<br>&#125;<br>        <span class="hljs-comment">//当引用类型的堆内存被回收时，会调用该函数</span><br>        <span class="hljs-comment">//但是，在C#中这一般不用我们去处理，C#有自动回收的机制，所以我们一般不用写这个函数，写一下只是为了方便看清楚罢了。</span><br>        <span class="hljs-comment">//析构函数是当你的的内存垃圾真正被回收时，才会调用的函数。</span><br>        ~Person()&#123;<br>            <br>        &#125;<br>&#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span>&#123;<br>            Person p=<span class="hljs-keyword">new</span> Person(<span class="hljs-number">18</span>,<span class="hljs-string">&quot;哈哈&quot;</span>);<br>            Console.WriteLine(p.age);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-垃圾回收机制"><a href="#四-垃圾回收机制" class="headerlink" title="四.垃圾回收机制"></a>四.垃圾回收机制</h2><p>垃圾回收，英文简写GC（Garbage Collector)</p><p>垃圾回收的过程是在<strong>遍历堆（Heap）上动态分配的所有对象</strong></p><p>通过<strong>识别</strong>它们是否被引用来确定哪些对象是垃圾，哪些对象仍要被使用。</p><p>所谓垃圾就是<strong>没有被任何变量，对象引用的内容</strong></p><p>垃圾就需要被回收释放</p><p>垃圾回收有很多种算法，比如：</p><p><strong>引用计数（Reference Counting）</strong></p><p><strong>标记清理（Mark Sweep）</strong></p><p><strong>标记整理（Mark Compact）</strong></p><p><strong>复制集合（Copy Collection）</strong></p><p>注意：</p><p><strong>GC只负责堆（Heap）内存的垃圾回收</strong></p><p><strong>引用类型都是存在堆（Heap）中的，所以它的分配和释放都通过垃圾回收机制来管理</strong></p><p>栈（Stack）上的内存是由系统自动管理的</p><p>值类型在栈（Stack）中分配内存的，他们有自己的生命周期，不用对他们进行管理，会自动分配和释放。</p><p><strong>C#中内存回收机制的大概原理</strong></p><p>0代内存         1代内存        2代内存</p><p>代的概念：</p><p><strong>代是垃圾回收机制使用的一种算法（分代算法）</strong></p><p>新分配的对象都会被配置在第0代内存中</p><p>每次分配都可能会进行垃圾回收以释放内存（0代内存满时）</p><p>在一次内存回收过程开始时，垃圾回收器会认为堆中全是垃圾，会进行以下两步：</p><p><strong>1.标记对象从根（静态字段、方法参数）开始检查引用对象，标记后为可达对象，未标记为不可达对象，不可达对象就认为是垃圾。</strong></p><p><strong>2.搬迁对象压缩堆   （挂起执行托管代码线程） 释放未标记的对象，搬迁可达对象，修改引用地址。</strong></p><p>大对象总被认为是第二代内存，目的是减少性能损耗，提高性能</p><p>不会对大对象进行搬迁压缩     <em><strong>（85000字节（83kb）以上的对象为大对象）</strong></em></p><p><strong>我们也可以手动进行GC</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>()<span class="hljs-title">this</span>(<span class="hljs-params"><span class="hljs-number">18</span></span>)</span>&#123;<br>        name=<span class="hljs-string">&quot;大帅哥&quot;</span>;<br>        age=<span class="hljs-number">18</span>;<br>&#125;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age,<span class="hljs-built_in">string</span> name</span>):</span>&#123;<br>         Console.WriteLine(<span class="hljs-string">&quot;两个&quot;</span>);<br>     &#125;<br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age</span>)</span>&#123;<br>         <span class="hljs-keyword">this</span>.age=age;<br>&#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span>&#123;<br>            Person p=<span class="hljs-keyword">new</span> Person(<span class="hljs-number">18</span>,<span class="hljs-string">&quot;哈哈&quot;</span>);<br>            Console.WriteLine(p.age);<br>            GC.Collect();<br>            <span class="hljs-comment">//手动触发垃圾回收的方法</span><br>            <span class="hljs-comment">//一般情况下我们不会频繁调用，都是在Loading过场景时才调用。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象之封装三</title>
    <link href="/2023/11/30/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E4%B8%89/"/>
    <url>/2023/11/30/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h1 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h1><h2 id="一-成员方法申明"><a href="#一-成员方法申明" class="headerlink" title="一.成员方法申明"></a>一.成员方法申明</h2><p><strong>基本概念</strong>：</p><p>成员方法（函数）用来表现对象行为。</p><p>1.申明在类语句块中</p><p>2.是用来描述对象的行为的</p><p>3.规则和函数申明规则相同</p><p>4.受到访问修饰符规则影响</p><p>5.返回值参数不做限制</p><p>6.方法数量不做限制</p><p><strong>注意</strong>：</p><p>1.成员方法不要加static关键字</p><p><strong>2.成员方法必须实例化出对象，再通过对象来使用，相当于该对象执行了某个行为</strong>（详情见知识点二）</p><p>3.成员方法受到访问修饰符的影响</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>        <span class="hljs-comment">//成员方法和成员变量顺序随意。</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span><br>        &#123;<br>            <span class="hljs-built_in">int</span> a=IsAdult();<br>            <span class="hljs-comment">//这一步表明，类语句块中的成员方法是可以内部用的。</span><br>            Console.WriteLine(<span class="hljs-string">&quot;&#123;0&#125;说&#123;1&#125;&quot;</span>,name,str);<br>        &#125;<br>        <span class="hljs-comment">//如上，写了一个关于说话的方法。</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsAdult</span>()</span>&#123;<br>            <span class="hljs-keyword">return</span> age&gt;=<span class="hljs-number">18</span>;<br>&#125;<br>        <span class="hljs-comment">//再如上，写了一个判断是否成年的方法。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="二-成员方法的使用"><a href="#二-成员方法的使用" class="headerlink" title="二.成员方法的使用"></a>二.成员方法的使用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>        <span class="hljs-comment">//成员方法和成员变量顺序随意。</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span><br>        &#123;<br>            IsAdult();<br>            <span class="hljs-comment">//这一步表明，类语句块中的成员方法是可以内部用的。</span><br>            Console.WriteLine(<span class="hljs-string">&quot;&#123;0&#125;说&#123;1&#125;&quot;</span>,name,str);<br>        &#125;<br>        <span class="hljs-comment">//如上，写了一个关于说话的方法。</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsAdult</span>()</span>&#123;<br>            <span class="hljs-keyword">return</span> age&gt;=<span class="hljs-number">18</span>;<br>&#125;<br>        <span class="hljs-comment">//再如上，写了一个判断是否成年的方法。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>        <span class="hljs-keyword">public</span> Person[] friends;<br>        <span class="hljs-comment">//朋友们,是类的数组（和结构体的数组类似）</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddFriend</span>(<span class="hljs-params">Person p</span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(friends==<span class="hljs-literal">null</span>)&#123;<br>                friends=<span class="hljs-keyword">new</span> Person[]&#123;p&#125;;<br>                <span class="hljs-comment">//没有朋友的话，（即朋友这个类数组的指针为空的话，）加进来一个朋友。</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//有朋友的话，要对数组进行扩容。</span><br>                Person[] newFriends=<span class="hljs-keyword">new</span> Person[friends.Length+<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;friends.Length;i++)&#123;<br>                    newFriends[i]=friends[i];<br>&#125;<br>                newFriends[newFriends.Length<span class="hljs-number">-1</span>]=p;<br>      &#125;<br>            friends=newFriends;<br>            <span class="hljs-comment">//地址重定向.</span><br>&#125;<br>        <span class="hljs-comment">//如上图，写了一个添加朋友的方法.</span><br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Person p=<span class="hljs-keyword">new</span> Person();<br>            p.name=<span class="hljs-string">&quot;大帅哥&quot;</span>;<br>            p.age=<span class="hljs-number">18</span>;<br>            p.Speak(<span class="hljs-string">&quot;我爱你&quot;</span>);<br>            <span class="hljs-keyword">if</span>(p.IsAdult())<br>            &#123;<br>                p.Speak(<span class="hljs-string">&quot;我要耍朋友&quot;</span>);<br>            &#125;<br>            Person p2= <span class="hljs-keyword">new</span> Person();<br>            p2.name=<span class="hljs-string">&quot;火山哥&quot;</span>;<br>            p2.age=<span class="hljs-number">16</span>;<br>            p.AddFriend(p2);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;p.friends.Length;i++)&#123;<br>                Console.WriteLine(p.friends[i].name);<br>            &#125;<br>            <span class="hljs-comment">//结果会输出火山哥的名字</span><br>            <span class="hljs-comment">//成员方法必须实例化出对象，再通过对象来使用，相当于该对象执行了某个行为</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="三-总结"><a href="#三-总结" class="headerlink" title="三.总结"></a>三.总结</h2><p>成员方法；描述行为；类中申明；任意数量；返回值和参数根据需求决定</p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象之封装二</title>
    <link href="/2023/11/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E4%BA%8C/"/>
    <url>/2023/11/29/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="成员变量和访问修饰符"><a href="#成员变量和访问修饰符" class="headerlink" title="成员变量和访问修饰符"></a>成员变量和访问修饰符</h1><h2 id="一-成员变量"><a href="#一-成员变量" class="headerlink" title="一.成员变量"></a>一.成员变量</h2><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><p>1.申明在类语句块中</p><p>2.用来描述对象的特征</p><p>3.可以是任意变量类型</p><p>4.数量不做限制</p><p>5.是否赋值根据需求来定</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>    <span class="hljs-comment">//命名空间——像是工具包。（在学习面向对象相关知识点时会涉及）</span><br>&#123;<br>    <span class="hljs-comment">//这个类是用来形容人类的</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>        <span class="hljs-comment">//特征——成员变量</span><br>        <span class="hljs-built_in">string</span> name=<span class="hljs-string">&quot;大帅哥&quot;</span>;<br>        <span class="hljs-comment">//姓名</span><br>        <span class="hljs-comment">//也可以不初始化</span><br>        <span class="hljs-built_in">int</span> age;<br>        <span class="hljs-comment">//年龄</span><br>        E_SexType sex;<br>        <span class="hljs-comment">//性别</span><br>        <span class="hljs-comment">//枚举类型也是变量，自己定义完就可以了.</span><br>        Person Friend1;<br>        <span class="hljs-comment">//朋友</span><br>        <span class="hljs-comment">//这边就有和结构体不一样的地方了，可以申明同名变量。</span><br>        <span class="hljs-comment">//如果要在类中申明一个和自己相同类型的成员变量时，不能对它进行初始化。</span><br>        <span class="hljs-comment">//因为类是引用类型，在类里面申明同名变量类型的时候，没赋值时，变量默认为空（堆里面是没有东西的，栈里面只有一个空的指针），因此不会进行无限循环。</span><br>        Person[] Friend2;<br>        <span class="hljs-comment">//好多朋友</span><br>        <span class="hljs-comment">//同样的，可以申明任意类型的变量，只要你之前有申明过进行了。</span><br>        Position sex;<br>        <span class="hljs-comment">//位置</span><br>        Pet pets;<br>        <span class="hljs-comment">//宠物</span><br>    &#125;<br>    <span class="hljs-built_in">enum</span> E_SexType&#123;<br>        Man,<br>        Wonman,<br>    &#125;<br>    <span class="hljs-comment">//表示性别的枚举，在类里面也可以使用。</span><br>    <span class="hljs-keyword">struct</span> Position&#123;<br>        <br>&#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span>&#123;<br>&#125;<br>    <span class="hljs-comment">//表示宠物的类，也可以用在Person类里面</span><br>    <span class="hljs-comment">//表示位置的结构体，在类里面也可以用</span><br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Person p= <span class="hljs-keyword">new</span> Person();<br>            p.<br>            <span class="hljs-comment">//还没加访问修饰符之前,你是点不出来东西的。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-访问修饰符"><a href="#二-访问修饰符" class="headerlink" title="二.访问修饰符"></a>二.访问修饰符</h2><p>pubilc——公共的，自己（内部）和别人（外部）都能访问和使用</p><p>private——私有的，自己（内部）才能访问和使用，不写默认为private</p><p>protected——保护的，自己（内部）和子类才能访问和使用（讲继承会用到）</p><p>目前决定类内部成员的访问权限</p><h2 id="三-成员变量的使用和初始值"><a href="#三-成员变量的使用和初始值" class="headerlink" title="三.成员变量的使用和初始值"></a>三.成员变量的使用和初始值</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>    <span class="hljs-comment">//命名空间——像是工具包。（在学习面向对象相关知识点时会涉及）</span><br>&#123;<br>    <span class="hljs-comment">//这个类是用来形容人类的</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>        <span class="hljs-comment">//特征——成员变量</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name=<span class="hljs-string">&quot;大帅哥&quot;</span>;<br>        <span class="hljs-comment">//姓名</span><br>        <span class="hljs-comment">//也可以不初始化</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>        <span class="hljs-comment">//年龄</span><br>        <span class="hljs-keyword">public</span> E_SexType sex;<br>        <span class="hljs-comment">//性别</span><br>        <span class="hljs-comment">//枚举类型也是变量，自己定义完就可以了.</span><br>        <span class="hljs-keyword">public</span> Person Friend1;<br>        <span class="hljs-comment">//朋友</span><br>        <span class="hljs-comment">//这边就有和结构体不一样的地方了，可以申明同名变量。</span><br>        <span class="hljs-comment">//如果要在类中申明一个和自己相同类型的成员变量时，不能对它进行初始化。</span><br>        <span class="hljs-comment">//因为类是引用类型，在类里面申明同名变量类型的时候，没赋值时，变量默认为空（堆里面是没有东西的，栈里面只有一个空的指针），因此不会进行无限循环。</span><br>        <span class="hljs-keyword">public</span> Person[] Friend2;<br>        <span class="hljs-comment">//好多朋友</span><br>        <span class="hljs-comment">//同样的，可以申明任意类型的变量，只要你之前有申明过进行了。</span><br>        <span class="hljs-keyword">public</span> Position sex;<br>        <span class="hljs-comment">//位置</span><br>        <span class="hljs-keyword">public</span> Pet pets;<br>        <span class="hljs-comment">//宠物</span><br>    &#125;<br>    <span class="hljs-built_in">enum</span> E_SexType&#123;<br>        Man,<br>        Wonman,<br>    &#125;<br>    <span class="hljs-comment">//表示性别的枚举，在类里面也可以使用。</span><br>    <span class="hljs-keyword">struct</span> Position&#123;<br>        <br>&#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Pet</span>&#123;<br>&#125;<br>    <span class="hljs-comment">//表示宠物的类，也可以用在Person类里面</span><br>    <span class="hljs-comment">//表示位置的结构体，在类里面也可以用</span><br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Person p= <span class="hljs-keyword">new</span> Person();<br>            p.age=<span class="hljs-number">10</span>;<br>            <span class="hljs-comment">//加了pubilc访问修饰符之后，可以进行访问了。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于值类型，数字类型来说，只要在类里面定义了，默认值都是0</p><p>bool类型 false </p><p>char类型 空字符串</p><p>引用类型 null（空类型）</p><p>（查看默认值小技巧如下）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#">Console.WriteLine(<span class="hljs-literal">default</span>(<span class="hljs-built_in">int</span>));<br><span class="hljs-comment">//查看int类型默认值</span><br></code></pre></td></tr></table></figure><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>关键词：</p><p>成员变量；描述特征；类中申明；赋值随意；不同类型默认值不同；任意类型；任意数量；</p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象之封装一</title>
    <link href="/2023/11/28/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E4%B8%80/"/>
    <url>/2023/11/28/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%B0%81%E8%A3%85%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="一-面向对象概念回顾"><a href="#一-面向对象概念回顾" class="headerlink" title="一.面向对象概念回顾"></a>一.面向对象概念回顾</h2><p>万物皆对象</p><p>用程序来抽象（形容）对象</p><p>用面向对象的思想来编程。</p><h2 id="二-什么是类"><a href="#二-什么是类" class="headerlink" title="二.什么是类"></a>二.什么是类</h2><p><strong>基本概念</strong>：具有相同特征；</p><p>具有相同行为；</p><p>一类事物的抽象；</p><p>类是对象的模板；</p><p>可以通过类创建出对象</p><p>类是一个特殊的语句块</p><p><strong>类的关键词：class</strong></p><h2 id="三-类申明在哪里"><a href="#三-类申明在哪里" class="headerlink" title="三.类申明在哪里"></a>三.类申明在哪里</h2><p>类一般申明在namespace语句块中。</p><h2 id="四-类申明的语法"><a href="#四-类申明的语法" class="headerlink" title="四.类申明的语法"></a>四.类申明的语法</h2><p>（访问修饰符）class 类名{</p><p>​&#x2F;&#x2F;特征——成员变量</p><p>​&#x2F;&#x2F;行为——成员方法</p><p>​&#x2F;&#x2F;保护特征——成员属性</p><p>​&#x2F;&#x2F;构造函数和析构函数</p><p>​&#x2F;&#x2F;索引器</p><p>​&#x2F;&#x2F;运算符重载</p><p>​&#x2F;&#x2F;静态成员</p><p>}</p><h2 id="五-类申明的实例"><a href="#五-类申明的实例" class="headerlink" title="五.类申明的实例"></a>五.类申明的实例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>    <span class="hljs-comment">//命名空间——像是工具包。（在学习面向对象相关知识点时会涉及）</span><br>&#123;<br>    <span class="hljs-comment">//这个类是用来形容人类的</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>        <span class="hljs-comment">//特征——成员变量</span><br><span class="hljs-comment">//行为——成员方法</span><br><span class="hljs-comment">//保护特征——成员属性</span><br><span class="hljs-comment">//构造函数和析构函数</span><br><span class="hljs-comment">//索引器</span><br><span class="hljs-comment">//运算符重载</span><br><span class="hljs-comment">//静态成员</span><br>    &#125;<br>    <span class="hljs-comment">//这个类是用来形容机器的</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Machine</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>命名：帕斯卡命名法</p><p>注意：同一个语句块中的不同类，不能重名</p><p>class即为封装的第一步</p><h2 id="六-什么是（类）对象"><a href="#六-什么是（类）对象" class="headerlink" title="六.什么是（类）对象"></a>六.什么是（类）对象</h2><p><strong>基本概念</strong></p><p>类的申明和类对象（变量）申明是两个概念</p><p>类的申明类似枚举和结构体的申明 类的申明相当于申明了一个自定义变量类型。</p><p><strong>而对象是类创建出来的</strong></p><p>相当于申明了一个指定类的变量</p><p>类创建对象的过程，我们一般称为实例化对象</p><p><strong>类对象都是引用类型</strong>（重要！！！)</p><h2 id="七-实例化对象基本语法"><a href="#七-实例化对象基本语法" class="headerlink" title="七.实例化对象基本语法"></a>七.实例化对象基本语法</h2><p>类名 变量名；</p><p>或者</p><p>类名 变量名 &#x3D;<strong>null</strong>；（null代表空，不分配堆内存空间）</p><p>或者</p><p><strong>类名 变量名 &#x3D;new 类名（）;</strong></p><p>(上面两种都是默认为空，即没有进行赋值（初始化），下面一种是有进行初始化)</p><h2 id="八-实例化对象"><a href="#八-实例化对象" class="headerlink" title="八.实例化对象"></a>八.实例化对象</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>    <span class="hljs-comment">//命名空间——像是工具包。（在学习面向对象相关知识点时会涉及）</span><br>&#123;<br>    <span class="hljs-comment">//这个类是用来形容人类的</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>        <span class="hljs-comment">//特征——成员变量</span><br><span class="hljs-comment">//行为——成员方法</span><br><span class="hljs-comment">//保护特征——成员属性</span><br><span class="hljs-comment">//构造函数和析构函数</span><br><span class="hljs-comment">//索引器</span><br><span class="hljs-comment">//运算符重载</span><br><span class="hljs-comment">//静态成员</span><br>    &#125;<br>    <span class="hljs-comment">//这个类是用来形容机器的</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title">Machine</span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Person p;<br>            Person p2=<span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">//因为类是引用类型，因此上面两种都是现在栈上开辟一个空间储存地址，与下面不同的是，它刚开始储存的是一个空地址（即null地址），这个时候，相应的堆空间里面也没有分配内存，毕竟你是空地址，堆的分配又是动态分配，自然不会先开辟空间了</span><br>            Person p3=<span class="hljs-keyword">new</span> Person();<br>            <span class="hljs-comment">//相当于在栈上分配了一片空间存储了一个new地址，这个时候，堆当中也分配了相应的空间准备存储相应的引用类型了。</span><br>           <span class="hljs-comment">//相当于一个人对象</span><br>            Person p4=<span class="hljs-keyword">new</span> Person();<br>            <span class="hljs-comment">//相当于又是一个人对象</span><br>            Machine m=<span class="hljs-keyword">new</span> Machine();<br>            Machine m1=<span class="hljs-keyword">new</span> Machine();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>注意：p3，p4中，虽然他们是来自一个类的实例化对象，但是他们的特征行为等等信息都是他们独有的，千万千万不要觉得他们是共享了数据，两个人，你是你，我是我，彼此没有关系。</strong></em></p><p><em>面向对象编程就是开启了“女娲模式”，你想要什么对象，你就new什么对象，一切的对象都是由我们来控制。</em></p><p><em>我们相当于整个程序世界的总导演</em></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>类的申明和类对象的申明是两个概念</p><p>类的申明是申明对象的<strong>模板</strong>，用来抽象（形容）显示<strong>事物</strong>的</p><p>而类对象的申明是用来表示现实中的对象<strong>个体</strong>的</p><p>（个性与共性，抽象与具体的关系）</p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>面向对象编程概念</title>
    <link href="/2023/11/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/11/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象编程概念"><a href="#面向对象编程概念" class="headerlink" title="面向对象编程概念"></a>面向对象编程概念</h1><p>编程的思想一共就两个，面向对象和面向过程。</p><h2 id="关于面向过程（基本了解一下）"><a href="#关于面向过程（基本了解一下）" class="headerlink" title="关于面向过程（基本了解一下）"></a>关于面向过程（基本了解一下）</h2><p>面向过程编程，是一种以过程为中心的编程思想，通过分析出解决问题的步骤，然后用函数把步骤一步步实现，使用的时候一个一个依次调用。</p><h2 id="关于面向对象（重点内容，之后都会围绕这个展开）"><a href="#关于面向对象（重点内容，之后都会围绕这个展开）" class="headerlink" title="关于面向对象（重点内容，之后都会围绕这个展开）"></a>关于面向对象（重点内容，之后都会围绕这个展开）</h2><p>  <strong>基本概念</strong>：面向对象是一种对<strong>现实世界理解和抽象</strong>的编程方法，把相关的数据和方法组织为一个整体来看待，从更高的层次来进行程序开发，更贴近事物的自然运行模式。</p><p> <strong>万物皆对象，用程序来抽象（形容）对象，用面向对象的思想来编程。</strong></p><p><strong>套路</strong>：用中文去形容一列对象，把一类对象的共同点提取出来，然后用程序语言把它翻译过来，带着对象的概念在程序中使用它们。</p><h2 id="为什么要学习面向对象？"><a href="#为什么要学习面向对象？" class="headerlink" title="为什么要学习面向对象？"></a>为什么要学习面向对象？</h2><p>提高代码的复用率</p><p>提高开发效率</p><p>提高程序可拓展性</p><p>清晰的逻辑关系</p><h2 id="如何学习面向对象？"><a href="#如何学习面向对象？" class="headerlink" title="如何学习面向对象？"></a>如何学习面向对象？</h2><p><strong>面向对象关键知识：类（class）</strong></p><p>面向对象三大特性：<strong>封装+继承+多态</strong></p><p>面向对象七大原则：开闭原则，依赖倒转原则，<strong>里氏替换原则</strong>，单一职责原则，接口隔离原则，合成复用原则，迪米特法则。</p><p><strong>封装：用程序语言来形容对象</strong></p><p><strong>继承：复用封装对象的代码；儿子继承父亲，复用现成代码。</strong></p><p><strong>多态：同样行为的不同表现，儿子继承父亲的基因，但是有不同的行为表现。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>复杂数据类型之结构体</title>
    <link href="/2023/11/25/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <url>/2023/11/25/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h1 id="关于结构体"><a href="#关于结构体" class="headerlink" title="关于结构体"></a>关于结构体</h1><h2 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一.基本概念"></a>一.基本概念</h2><p>  结构体是一种自定义变量类型，类似枚举需要自己定义，<strong>它是数据和函数的集合。</strong> </p><p>  在结构体中，可以申明各种变量和方法。</p><p>作用：用来表现存在关系的数据集合，比如用结构体表现学生，动物，人类等等。</p><h2 id="二-基本语法"><a href="#二-基本语法" class="headerlink" title="二.基本语法"></a>二.基本语法</h2><p>结构体一般写在<strong>namespace</strong>语句块中，结构体关键字struct。</p><p>（和枚举enum一样）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Lesson1</span><br>&#123;<br>    <span class="hljs-comment">//在这里声明结构体</span><br>    <span class="hljs-keyword">struct</span> 自定义结构体名<br>    &#123;<br>        <span class="hljs-comment">//第一部分 变量</span><br>        <span class="hljs-comment">//第二部分 构造函数</span><br>        <span class="hljs-comment">//第三部分 函数方法</span><br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>注意：结构体名字我们的规范是帕斯卡命名法。（所有单词首字母大写）</em></p><h2 id="三-实例"><a href="#三-实例" class="headerlink" title="三.实例"></a>三.实例</h2><p>表现学生数据的结构体</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Lesson1</span><br>&#123;<br>    <span class="hljs-comment">//在这里声明结构体</span><br>    <span class="hljs-keyword">struct</span> Student<br>    &#123;<br>        <span class="hljs-comment">//在结构体中申明的变量，不能直接初始化！！！</span><br>        <span class="hljs-comment">//在结构体里面的变量类型，可以写任意类型，包括结构体，但是不能是自己的结构体（会导致死循环）</span><br>        <span class="hljs-comment">//第一步变量</span><br>        <span class="hljs-built_in">int</span> age;<br>        <span class="hljs-built_in">bool</span> sex;<br>        <span class="hljs-built_in">int</span> number<br>        <span class="hljs-built_in">string</span> name;<br>        <span class="hljs-comment">//先略过第二步</span><br>        <span class="hljs-comment">//第三步函数方法</span><br>        <span class="hljs-comment">//表现这个数据结构的行为</span><br>        <span class="hljs-comment">//注意：在结构体中的方法，目前不需要加static关键字</span><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>()</span>&#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;我的名字是&#123;0&#125;,我今年&#123;1&#125;岁,&quot;</span>,name,age);<br>        &#125;<br>        <span class="hljs-comment">//函数是可以根据需求写无数个函数的</span><br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四-结构体的使用"><a href="#四-结构体的使用" class="headerlink" title="四.结构体的使用"></a>四.结构体的使用</h2><p>使用要在函数里面使用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Lesson1</span><br>&#123;<br>    <span class="hljs-comment">//在这里声明结构体</span><br>    <span class="hljs-keyword">struct</span> Student<br>    &#123;<br>        <span class="hljs-comment">//在结构体中申明的变量，不能直接初始化！！！</span><br>        <span class="hljs-comment">//在结构体里面的变量类型，可以写任意类型，包括结构体，但是不能是自己的结构体（会导致死循环）</span><br>        <span class="hljs-comment">//第一步变量</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> sex;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> number<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>        <span class="hljs-comment">//先略过第二步</span><br>        <span class="hljs-comment">//第三步函数方法</span><br>        <span class="hljs-comment">//表现这个数据结构的行为</span><br>        <span class="hljs-comment">//注意：在结构体中的方法，目前不需要加static关键字</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>()</span>&#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;我的名字是&#123;0&#125;,我今年&#123;1&#125;岁,&quot;</span>,name,age);<br>        &#125;<br>        <span class="hljs-comment">//函数是可以根据需求写无数个函数的</span><br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//因为声明变量的过程为变量类型+变量名</span><br>            <span class="hljs-comment">//而我们的结构体是自定义的变量类型</span><br>            Student s1;<br>            <span class="hljs-comment">//声明一个为Student结构体类型的变量s1.</span><br>            s1.age=<span class="hljs-number">10</span>;<br>            <span class="hljs-comment">//之后要用到访问修饰符，如果是私有类型，在主函数中对s1是无法进行调用的。</span><br>            <span class="hljs-comment">//age是public类型，可以被外部访问，因此可以在外部（即主函数处）进行初始化。</span><br>            <span class="hljs-comment">//除了构造函数外，这也是一种赋值方法。</span><br>            s1.sex=<span class="hljs-literal">false</span>;<span class="hljs-comment">//(代表男的)</span><br>            s1.number =<span class="hljs-number">1</span>;<br>            s1.name=<span class="hljs-string">&quot;大帅哥&quot;</span>;<br>            s1.Speak();<br>            <span class="hljs-comment">//调用之后，会正常输出了。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="五-访问修饰符"><a href="#五-访问修饰符" class="headerlink" title="五.访问修饰符"></a>五.访问修饰符</h2><p>修饰结构体中的变量和方法，是否能够被外部使用</p><p>public 公共的，可以被外部访问</p><p>private 私有的，只能在内容中使用</p><p>默认不写，则为private</p><h2 id="六-结构体的构造函数"><a href="#六-结构体的构造函数" class="headerlink" title="六.结构体的构造函数"></a>六.结构体的构造函数</h2><p><strong>基本概念</strong></p><p>1.没有返回值</p><p>2.函数名必须和结构体名相同</p><p><strong>3.必须有参数</strong>（和类不同之处）</p><p>4.如果申明了构造函数，那么必须在其中对<strong>所有变量</strong>数据初始化。（结构体中的所有）</p><p><strong>5.构造函数，一般是用于在外部方便初始化的,帮助我们快速初始化结构体对象的。</strong></p><p>6.构造函数也是可以重载的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Lesson1</span><br>&#123;<br>    <span class="hljs-keyword">struct</span> Student<br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> age;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> sex;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> number<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> akt;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>()</span>&#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;我的名字是&#123;0&#125;,我今年&#123;1&#125;岁,&quot;</span>,name,age)<br>         <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age,<span class="hljs-built_in">bool</span> sex,<span class="hljs-built_in">int</span> number,<span class="hljs-built_in">string</span> name,<span class="hljs-built_in">int</span> id</span>)</span>&#123; <span class="hljs-comment">//必须要有参数</span><br>             <span class="hljs-comment">//新的关键字 this 代表结构体中的变量 如果变量名字有冲突，用来区分外部和内部的同一变量名字</span><br>             <span class="hljs-keyword">this</span>.age=age;<br>             <span class="hljs-keyword">this</span>.sex=sex;<br>             <span class="hljs-keyword">this</span>.number=number;<br>             <span class="hljs-keyword">this</span>.name=name;<br>              akt=<span class="hljs-number">10</span>;<br>             <span class="hljs-comment">//不一定要把所有结构体的变量都要通过接受主函数来赋值，它也可以直接赋值。</span><br>                <span class="hljs-comment">//但是一定要所有变量都赋值完毕，构造函数才可以使用</span><br>            &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>()</span>&#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;。。。。。&quot;</span>);<br>&#125;<br>            <span class="hljs-comment">//构造函数方法进行打印，省时省力。</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            Student s2=<span class="hljs-keyword">new</span> Student(<span class="hljs-number">18</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;小红&quot;</span>);<br>                <span class="hljs-comment">//通过调用构造函数的方法来初始化对象</span><br>            s2.Speak();<br>            <span class="hljs-comment">//调用函数，进行打印。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>Ps:之后在学习面向对象和类时，还会对构造函数进行深入讲解。</em></p><p><em><strong>注意：1.在结构体申明的变量，不能初始化，只能在外部或者构造函数中进行赋值（初始化）。</strong></em></p><p><em><strong>2.在结构体中申明的函数，不用加static</strong></em></p><p><em><strong>3.感觉自己还不是很清楚三.函数方法和二.构造函数的区别，上知乎看了看，一言以蔽之，构造函数用于初始化对象，而方法则用于执行特定的功能，因此，当你要给一个对象赋值时，要构造函数，而当你要让它做什么事情时，就要用到函数方法了。</strong></em></p><p><em><strong>4.关于在主函数中的调用，（默认使用上面的Student结构体）</strong></em></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//主函数框架</span><br>Student.s1=<span class="hljs-keyword">new</span> Student();<br><span class="hljs-comment">//如果这么做，当你使用 New 操作符创建一个结构对象时，会调用适当的构造函数来创建结构。</span><br>s1.Student(<span class="hljs-number">12</span>,<span class="hljs-literal">true</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&quot;xiaohuang&quot;</span>,<span class="hljs-number">3</span>);<br><span class="hljs-comment">//使用构造函数进行初始化。</span><br><span class="hljs-comment">//如果不使用 New 操作符，只有在所有的字段都被初始化之后，字段才被赋值，对象才被使用。（见上面）</span><br></code></pre></td></tr></table></figure><p><em><strong>5.结构体是值类型，想要在函数内部改变值类型信息，外部受影响，一定记住用ref或者out。</strong></em></p><p><em>（例如：将一个结构体的信息传到另一个结构体之中，对结构体内部的信息进行修改）</em></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//举一个粗糙的例子</span><br><span class="hljs-keyword">struct</span> OutMan&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Atk</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> Boss monster</span>)</span>&#123;<br>        <span class="hljs-comment">//在这个位置，属于另一个结构体Boss结构体,变量名字为monster的信息就被传进来了，用ref才能实现从内部到外部的修改。</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">struct</span> Boss&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> name;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Atk</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> OutMan Man </span>)</span>;<br>    <span class="hljs-comment">//道理同上</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>函数二</title>
    <link href="/2023/11/23/%E5%87%BD%E6%95%B0%E4%BA%8C/"/>
    <url>/2023/11/23/%E5%87%BD%E6%95%B0%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="关于函数（二）"><a href="#关于函数（二）" class="headerlink" title="关于函数（二）"></a>关于函数（二）</h1><h2 id="三-变长参数和参数默认值"><a href="#三-变长参数和参数默认值" class="headerlink" title="三.变长参数和参数默认值"></a>三.变长参数和参数默认值</h2><h3 id="变长参数关键词"><a href="#变长参数关键词" class="headerlink" title="变长参数关键词"></a>变长参数关键词</h3><p>举例： 函数要计算n个整数的和。</p><p>按照常规思路 static int Sum(int a,int b,……………)</p><p><strong>这里，我们引入变长参数关键字params</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Sum</span>(<span class="hljs-params"><span class="hljs-keyword">params</span> <span class="hljs-built_in">int</span>[] arr</span>)</span>&#123;<br>    <span class="hljs-built_in">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.Length;i++)&#123;<br>        sum+=arr[i];<br>&#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><span class="hljs-comment">//调用过程如下</span><br>Sum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5.</span>...........);<br><span class="hljs-comment">//想存几个存几个。</span><br></code></pre></td></tr></table></figure><p>params int[] 意味着可以传入n个int参数，n可以等于0；传入的参数会存在arr数组中。</p><p><strong>注意：</strong>1.params关键字后面必须为数组</p><p>​    2.数组的类型可以是任意的类型。</p><p>​    3.函数参数可以有别的参数和params关键字修饰的参数。</p><p>​    4.函数参数中只能最多出现一个params关键字，并且一定是在最后一组参数，前面可以有n个其他参数。</p><p><strong>对于4的解释</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Eat</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name,<span class="hljs-keyword">params</span> <span class="hljs-built_in">string</span>[],things,<span class="hljs-built_in">int</span> a</span>)</span>;<br><span class="hljs-comment">//这样会直接报错。因为我们在使用变长参数的时候，是可以输入n个参数的，这个时候如果后面还有其他参数，程序就会分不清楚即将输进去的值是给params还是给后面的参数。</span><br><span class="hljs-comment">//应改变为</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Eat</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name,<span class="hljs-built_in">int</span> a,<span class="hljs-keyword">params</span> <span class="hljs-built_in">string</span>[],things</span>)</span>;<br></code></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>有参数默认值的参数，一般称为可选参数。</p><p>作用是当调用函数时可以不传入参数，不传入就会使用默认值作为参数的值。</p><p><strong>注意：</strong>1.支持多参数默认值，每个参数都可以有默认值。</p><p>​   2.如果要混用，可选参数必须写在普通参数的后面。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str=<span class="hljs-string">&quot;我没什么话可以说&quot;</span></span>)</span>&#123;<br>    Console.WriteLine(str);<br>&#125;<br><span class="hljs-comment">//下面是调用过程</span><br>Speak();<br><span class="hljs-comment">//可以不用传入参数，结果会输出默认值。</span><br>Speak(<span class="hljs-number">123123</span>);<br><span class="hljs-comment">//如果传入参数，则使用传入的参数。</span><br></code></pre></td></tr></table></figure><h2 id="四-函数重载"><a href="#四-函数重载" class="headerlink" title="四.函数重载"></a>四.函数重载</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>重载概念</strong>：在同一语句块（class或者struct）中，<strong>函数名</strong>相同但是<strong>函数参数的数量</strong>不同，或者<strong>函数参数的数量</strong>相同但是<strong>参数的类型</strong>或者<strong>顺序</strong>不同。</p><p><strong>作用：</strong>命名一组功能相似的函数，减少函数名的数量，避免命名空间的污染，并提升程序的可读性。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>注意</strong>：重载和返回值无关，只会和参数类型，个数，顺序有关</p><p>调用时，程序会自己根据传入的参数类型判断使用哪一个重载。</p><h4 id="参数数量不同"><a href="#参数数量不同" class="headerlink" title="参数数量不同"></a>参数数量不同</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">CalcSum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a,<span class="hljs-built_in">int</span> b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-comment">//先定义一个原本的函数。</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">CalcSum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a,<span class="hljs-built_in">int</span> b,<span class="hljs-built_in">int</span> c</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br><span class="hljs-comment">//这就是对函数的重载了，这是不会报错的。</span><br><span class="hljs-comment">//在C#中，使用时系统会要求你选择一个重载进行调用（如果有重载的话）</span><br></code></pre></td></tr></table></figure><h4 id="数量相同，类型不同"><a href="#数量相同，类型不同" class="headerlink" title="数量相同，类型不同"></a>数量相同，类型不同</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//原函数还是上面的第一个函数</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">float</span> <span class="hljs-title">CalSum</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> a,<span class="hljs-built_in">float</span> b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-comment">//调用时</span><br>CalSum(<span class="hljs-number">1</span>,<span class="hljs-number">1f</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2f</span>);<br><span class="hljs-comment">//调用float类型的</span><br>CalSum(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-comment">//调用int类型。</span><br></code></pre></td></tr></table></figure><p><em>顺序不同同理，不做赘述</em></p><p><em>加了ref或者out的函数，也可以看作一个不一样的重载函数</em></p><p><em>可变参数同理</em></p><p><em><strong>可选参数不能算重载</strong></em></p><p>PS：我们常用的WriteLine其实也是重载函数，重载如下。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span>(<span class="hljs-params"><span class="hljs-built_in">char</span>[] buffer, <span class="hljs-built_in">int</span> index, <span class="hljs-built_in">int</span> count</span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Write</span>(<span class="hljs-params"><span class="hljs-built_in">double</span> <span class="hljs-keyword">value</span></span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">uint</span> <span class="hljs-keyword">value</span></span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> format, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>?[]? arg</span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>()</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> <span class="hljs-keyword">value</span></span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">char</span>[]? buffer</span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">char</span>[] buffer, <span class="hljs-built_in">int</span> index, <span class="hljs-built_in">int</span> count</span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">decimal</span> <span class="hljs-keyword">value</span></span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">ulong</span> <span class="hljs-keyword">value</span></span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span></span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> <span class="hljs-keyword">value</span></span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>? <span class="hljs-keyword">value</span></span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> format, <span class="hljs-built_in">object</span>? arg0, <span class="hljs-built_in">object</span>? arg1</span>)</span>;<br><span class="hljs-comment">//     The second object to write using </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> format, <span class="hljs-built_in">object</span>? arg0, <span class="hljs-built_in">object</span>? arg1, <span class="hljs-built_in">object</span>? arg2</span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">long</span> <span class="hljs-keyword">value</span></span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteLine</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> <span class="hljs-keyword">value</span></span>)</span>;<br></code></pre></td></tr></table></figure><p>(以上是WriteLine的部分重载函数)</p><h2 id="五-递归函数"><a href="#五-递归函数" class="headerlink" title="五.递归函数"></a>五.递归函数</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>递归函数就是让函数自己调用自己。</p><p>eg：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fun</span>()</span>&#123;<br>    Fun();<br>&#125;<br><span class="hljs-comment">//这就是一个递归函数，但是它会陷入死循环。</span><br></code></pre></td></tr></table></figure><p>一个正确的递归函数：1.必须有结束调用的条件。2.用于条件判断的条件，这个条件必须改变，能够达到停止的 目的。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>用递归函数打印出0到10</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Fun</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">10</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Console.WriteLine(<span class="hljs-built_in">int</span> a);<br>    ++a;<br>    Fun(a);<br>&#125;<br><span class="hljs-comment">//下面是调用的主函数模块。</span><br>Fun(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>函数一</title>
    <link href="/2023/11/22/%E5%87%BD%E6%95%B0%E4%B8%80/"/>
    <url>/2023/11/22/%E5%87%BD%E6%95%B0%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="关于函数（一）"><a href="#关于函数（一）" class="headerlink" title="关于函数（一）"></a>关于函数（一）</h1><h2 id="一-函数基础"><a href="#一-函数基础" class="headerlink" title="一.函数基础"></a>一.函数基础</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>函数（方法function），本质是一块具有名称的代码块，函数是封装代码进行重复使用的一种机制。</p><p><strong>函数的主要作用</strong>：封装代码；提升代码复用率（少写一点代码）；抽象行为</p><h3 id="函数写在哪里"><a href="#函数写在哪里" class="headerlink" title="函数写在哪里"></a>函数写在哪里</h3><p><strong>1.class语句块中</strong></p><p><strong>2.struct（复杂数据类型结构体）语句块中</strong></p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p><strong>static 返回类型 函数名 （参数类型 参数名，参数类型 参数名，……)</strong></p><p>{</p><p>函数代码逻辑；</p><p>函数代码逻辑；</p><p>………….</p><p><strong>return 返回值;(如果有返回类型才返回)</strong></p><p>}</p><p>Ps:1.关于<strong>static</strong>，不是必须的，但是在没有学习类和结构体之前，都是必须写的。</p><p>2.关于返回类型，引出一个新的关键字 <strong>void</strong>（表示没有返回值）</p><p>3.返回类型可以写任意的变量类型 14中变量类型+复杂数据类型（数组，枚举，结构体，类class）</p><p>4.关于函数名，要使用帕斯卡命名法（每一个单词首字母大写）</p><p>5.参数表示必须的，可以有0~n个参数，参数类型也可以是任意类型的，多个参数的时候，需要逗号隔开。</p><p>6.参数名 驼峰命名法</p><p>7.当返回类型不为void时，必须通过新的关键词return返回对应类型的内容。（注意：即使是void也可以选择性使用return）</p><h3 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h3><h4 id="无参无返回值函数"><a href="#无参无返回值函数" class="headerlink" title="无参无返回值函数"></a>无参无返回值函数</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>     <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SayHellow</span>()</span>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;你好世界&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">//return可以省略，因为返回类型是void。</span><br>&#125;<br>      <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)。</span><br>        &#123;<br>          <span class="hljs-comment">//使用函数直接写函数名（参数）即可。</span><br>          sayHeollow();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="有参无返回值函数"><a href="#有参无返回值函数" class="headerlink" title="有参无返回值函数"></a>有参无返回值函数</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>     <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SayYourName</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span>&#123;<br>         Console.WriteLine(<span class="hljs-string">&quot;你的名字是:&#123;0&#125;&quot;</span>,name);<br>         <span class="hljs-comment">//return同样省略。</span><br>&#125;<br>      <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)。</span><br>        &#123;<br>          <span class="hljs-comment">//参数可以是常量，变量，函数都可以。</span><br>          <span class="hljs-comment">//参数一定是传一个能够得到对应类型的表达式。</span><br>          <span class="hljs-built_in">string</span> str=<span class="hljs-string">&quot;我的名字&quot;</span>;<br>          SayYouName(str);<br>          SayYouName(<span class="hljs-string">&quot;我的名字&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="无参有返回值函数"><a href="#无参有返回值函数" class="headerlink" title="无参有返回值函数"></a>无参有返回值函数</h4><p>之后的内容就不放在主函数中运用了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> <span class="hljs-title">WhatYourName</span>()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我的名字&quot;</span>;<br>&#125;<br><span class="hljs-comment">//这个函数可以与上面的一个函数嵌套运用。</span><br>SayYourName(WhatYourName());<br><span class="hljs-comment">//最后输出“你的名字是：我的名字”。</span><br><span class="hljs-comment">//有返回值的函数，要不直接拿返回值来用，要不就是拿变量接受它的结果。</span><br><span class="hljs-comment">//也可以直接调用，但是返回值对我们来说就没用了。</span><br></code></pre></td></tr></table></figure><h4 id="有参有返回函数"><a href="#有参有返回函数" class="headerlink" title="有参有返回函数"></a>有参有返回函数</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-title">Sum</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a,<span class="hljs-built_in">int</span> b</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> c=a+b;<br>    <span class="hljs-keyword">return</span> c;<br>    <span class="hljs-comment">//或者return a+b;</span><br>&#125;<br>调用：<br>    Console.WriteLine(Sum(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><h4 id="有参有多返回值函数（这个和C很不一样！！）"><a href="#有参有多返回值函数（这个和C很不一样！！）" class="headerlink" title="有参有多返回值函数（这个和C很不一样！！）"></a>有参有多返回值函数（这个和C很不一样！！）</h4><p> 传入两个数，然后计算两个数的和，以及他们俩的平均数，得出结果返回出来。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span>[] <span class="hljs-title">Calc</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> a,<span class="hljs-built_in">int</span> b</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> sum=a+b;<br>    <span class="hljs-built_in">int</span> avg =sum/<span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">int</span> arr=&#123;sum,avg&#125;;<br>    <span class="hljs-keyword">return</span> arr;<br>    <span class="hljs-comment">//或者 return new int[]&#123;sum,avg&#125;;</span><br>    <span class="hljs-comment">//如果数组作为返回值出去，那么前提是使用者知道这个数组的规则。</span><br>&#125;<br><span class="hljs-built_in">int</span> [] arr =Calc(<span class="hljs-number">5</span>,<span class="hljs-number">7</span>);<br>Console.WriteLine(arr[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot; &quot;</span>+arr[<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><h3 id="关于return"><a href="#关于return" class="headerlink" title="关于return"></a>关于return</h3><p>即使函数没有返回值，我们也可以使用return。</p><p>return可以直接不执行之后的代码，直接返回到函数外部。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Speak</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(str==<span class="hljs-string">&quot;混蛋&quot;</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>&#125;<br>    Console.WriteLine(str);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-关于ref和out"><a href="#二-关于ref和out" class="headerlink" title="二.关于ref和out"></a>二.关于ref和out</h2><h3 id="学习ref和out的原因"><a href="#学习ref和out的原因" class="headerlink" title="学习ref和out的原因"></a>学习ref和out的原因</h3><p>它们可以解决在函数内部改变外部传入的内容，里面变了，外面也要变。</p><p>eg：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>     <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ChangeArrayValue</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>[] arr</span>)</span>&#123;<br>         arr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br>         <span class="hljs-comment">//重新申明了一个数组。</span><br>&#125;<br>      <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)。</span><br>        &#123;<br>          <span class="hljs-built_in">int</span> a=<span class="hljs-number">1</span>;<br>          <span class="hljs-built_in">int</span> [] arr2=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>          ChangeArrayValue(arr2);<br>          Console.WriteLine(arr2[<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//打印的是1，并不会改变，即使int[]数组是引用类型。但是在函数中，arr被改变了地址，导致arr和arr2没有关系，之后的改变也就没有关系了。</span><br></code></pre></td></tr></table></figure><p><em>ref和out是为了解决这个问题的（也能解决值类型在函数里面无法修改的状况。）</em></p><h3 id="ref和out的使用"><a href="#ref和out的使用" class="headerlink" title="ref和out的使用"></a>ref和out的使用</h3><p>函数参数的修饰符，当传入得到值类型参数在内部修改时，或者引用类型参数在内部重新申明时，外部的值会发生变化。</p><h4 id="ref的使用"><a href="#ref的使用" class="headerlink" title="ref的使用"></a>ref的使用</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>     <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ChangeValueRef</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span></span>)</span>&#123;<br>         <span class="hljs-keyword">value</span>=<span class="hljs-number">3</span>;<br>&#125;<br>      <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)。</span><br>        &#123;<br>          <span class="hljs-built_in">int</span> a=<span class="hljs-number">1</span>;<br>          ChangeValueRef(<span class="hljs-keyword">ref</span> a);<br>          Console.WriteLine(a);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//可以发现，a在函数块里面被成功修改了，变成3了。</span><br><span class="hljs-comment">//数组同理，如果是函数里面新数组的状况，也是在括号变量前面加上ref。</span><br></code></pre></td></tr></table></figure><h4 id="out的使用"><a href="#out的使用" class="headerlink" title="out的使用"></a>out的使用</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>     <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ChangeValueRef</span>(<span class="hljs-params"><span class="hljs-keyword">out</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span></span>)</span>&#123;<br>         <span class="hljs-keyword">value</span>=<span class="hljs-number">3</span>;<br>&#125;<br>      <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)。</span><br>        &#123;<br>          <span class="hljs-built_in">int</span> a=<span class="hljs-number">1</span>;<br>          ChangeValueRef(<span class="hljs-keyword">out</span> a);<br>          Console.WriteLine(a);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//值也被改变了。</span><br></code></pre></td></tr></table></figure><p><em>二者的使用和声明几乎是一样的，那么二者有什么区别呢？</em></p><h3 id="ref和out的区别"><a href="#ref和out的区别" class="headerlink" title="ref和out的区别"></a>ref和out的区别</h3><p>1.ref传入的变量必须初始化，而out不用。</p><p>2.out传入的变量必须在内部进行赋值，ref不用。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> a;<br>ChangeValueRef(<span class="hljs-keyword">ref</span> a);<br><span class="hljs-comment">//报错。</span><br>ChangeValueRef(<span class="hljs-keyword">out</span> a);<br><span class="hljs-comment">//不报错</span><br><span class="hljs-comment">//第二点同理，二者其实是相互配对的，out在外部不用初始化，但与之相对的，必须在函数块内赋值（相当于初始化操作）</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>值类型和引用类型</title>
    <link href="/2023/11/21/%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/11/21/%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h1><h2 id="一-使用和存储上的区别"><a href="#一-使用和存储上的区别" class="headerlink" title="一.使用和存储上的区别"></a>一.使用和存储上的区别</h2><h3 id="变量类型的复习"><a href="#变量类型的复习" class="headerlink" title="变量类型的复习"></a>变量类型的复习</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//无符号整形</span><br><span class="hljs-built_in">byte</span> b=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">ushort</span> us=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">uint</span> ui=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">ulong</span> ul=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//有符号整形</span><br><span class="hljs-built_in">sbyte</span> sb=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">short</span> s=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">long</span> l=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//浮点数</span><br><span class="hljs-built_in">float</span> f=<span class="hljs-number">1f</span>;<br><span class="hljs-built_in">double</span> d=<span class="hljs-number">1.1</span>;<br><span class="hljs-built_in">decimal</span> de=<span class="hljs-number">1.1</span>m;<br><span class="hljs-comment">//特殊类型</span><br><span class="hljs-built_in">bool</span> bo=<span class="hljs-literal">true</span>;<br><span class="hljs-built_in">char</span> c=<span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-built_in">string</span> str =<span class="hljs-string">&quot;strs&quot;</span>;<br><span class="hljs-comment">//复杂数据类型</span><br><span class="hljs-built_in">enum</span> 枚举<br>数组（一维，二维，交错）<br></code></pre></td></tr></table></figure><p>我们可以把以上学过的变量类型分成<strong>值类型</strong>和<strong>引用类型</strong></p><p><strong>引用类型</strong>：string，数组，类</p><p><strong>值类型</strong>：其他，结构体</p><h3 id="值类型和引用类型的区别"><a href="#值类型和引用类型的区别" class="headerlink" title="值类型和引用类型的区别"></a>值类型和引用类型的区别</h3><h4 id="1-使用上的区别"><a href="#1-使用上的区别" class="headerlink" title="1.使用上的区别"></a>1.使用上的区别</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> a=<span class="hljs-number">10</span>;<br><span class="hljs-built_in">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-built_in">int</span> b=a;<br><span class="hljs-comment">//申明了一个b让其等于之前的a。</span><br><span class="hljs-built_in">int</span>[] arr2=arr;<br><span class="hljs-comment">//申明了一个arr2让其等于之前的arr。</span><br>Console.WriteLine(<span class="hljs-string">&quot;a=&#123;0&#125;,b=&#123;1&#125;,&quot;</span>,a,b);<br>Console.WriteLine(<span class="hljs-string">&quot;arr[0]=&#123;0&#125;,arr2[0]=&#123;1&#125;,&quot;</span>,arr[<span class="hljs-number">0</span>],arr2[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">//输出结果，a=10，b=10。arr[0]=1,arr2[0]=1.</span><br>b=<span class="hljs-number">20</span>;<br>arr2[<span class="hljs-number">0</span>]=<span class="hljs-number">5</span>;<br><span class="hljs-comment">//对数据进行修改</span><br>Console.WriteLine(<span class="hljs-string">&quot;a=&#123;0&#125;,b=&#123;1&#125;,&quot;</span>,a,b);<br>Console.WriteLine(<span class="hljs-string">&quot;arr[0]=&#123;0&#125;,arr2[0]=&#123;1&#125;,&quot;</span>,arr[<span class="hljs-number">0</span>],arr2[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">//输出结果 a=10,b=20.arr[0]=5,arr2[0]=5.</span><br><span class="hljs-comment">//区别出来了。</span><br></code></pre></td></tr></table></figure><p>由上述可见：<strong>值类型在相互赋值时，把内容拷贝给了对方，“它变我不变”。</strong></p><p><strong>而引用类型的相互赋值是让两者指向同一个位置，“它变我也变”。</strong></p><h4 id="2-为什么有以上区别？"><a href="#2-为什么有以上区别？" class="headerlink" title="2.为什么有以上区别？"></a>2.为什么有以上区别？</h4><p>值类型和引用类型存储的内存区域是不同的，存储方式是不同的，所以就造成了他们在使用上的区别。</p><p>值类型存储在栈空间 ——系统分配，自动回收，小而快。</p><p>引用类型存储在堆空间 ——需要手动申请和释放，大而慢。</p><img src="D:\HONOR Share\Screenshot\capture_20231121195451927.bmp" style="zoom:60%;" /><p><em>（Ps：引用类型只是将引用类型的地址存放到栈里面，我们在调用时，会先调用引用类型的地址，用地址指向引用类型的值，引用类型的值放在堆空间中。）</em></p><p>下图为值类型赋值关系图</p><img src="D:\HONOR Share\Screenshot\capture_20231121195818828.bmp" style="zoom:45%;" /><p><em>（b&#x3D;a只是将a的值“拷贝”一份给b，a的值本身不影响。）</em></p><p>下图为引用类型赋值关系图</p><img src="D:\HONOR Share\Screenshot\capture_20231121200004444.bmp" style="zoom:45%;" /><p><em>(我们arr2&#x3D;arr是将arr的地址“拷贝”给arr2，使二者的地址相同，指向了堆中同一片区域，对arr2[0]的修改，其实是对堆内数据的修改，又因为arr和arr2地址相同，因此二者会进行同步的堆内数据修改。)</em></p><p><strong>插入一种新的引用类型情况</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#">arr2=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">99</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>&#125; <br>Console.WriteLine(<span class="hljs-string">&quot;arr[0]=&#123;0&#125;,arr2[0]=&#123;1&#125;,&quot;</span>,arr[<span class="hljs-number">0</span>],arr2[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">//在这种情况下，arr[0]=5,而arr2[0]=99;</span><br></code></pre></td></tr></table></figure><p><strong>这是为什么呢？</strong></p><img src="D:\HONOR Share\Screenshot\capture_20231121200841986.bmp" style="zoom:45%;" /><p>（由上图可知，如果arr2&#x3D;new int[]，相当于在堆空间中开辟了一片新的区域，arr2则存储了这一片新区域的新地址，因此，之后的修改自然和原来的arr没有关系了。</p><p><em>学了ref和out之后可以对这种情况进行解析了</em></p><h2 id="二-特殊的引用类型string（！！！重要）"><a href="#二-特殊的引用类型string（！！！重要）" class="headerlink" title="二.特殊的引用类型string（！！！重要）"></a>二.特殊的引用类型string（！！！重要）</h2><h3 id="string的“它变我不变”"><a href="#string的“它变我不变”" class="headerlink" title="string的“它变我不变”"></a>string的“它变我不变”</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> str1=<span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-built_in">string</span> str2=str1;<br>str2=<span class="hljs-string">&quot;321&quot;</span>;<br><span class="hljs-comment">//因为string是引用类型，按理说，应该是它变我也变。</span><br>Console.WriteLine(str1);<br>Console.WrtieLine(str2);<br><span class="hljs-comment">//最后却会输出123，321.变成它变我不变了。</span><br></code></pre></td></tr></table></figure><p><strong>为什么和普通的引用类型不一样？？？</strong></p><p>string非常的特殊，它具备值类型的特征，它变我不变。</p><p>下图是string类型的存储过程。</p><img src="D:\HONOR Share\Screenshot\capture_20231121203315826.bmp" style="zoom:45%;" /><p><em>（C#对string类型进行了特殊处理，str2重新赋值时，可以参考上面int数组的特殊情况（new情况），对str2的内容在堆空间重新分配了一片区域，自然的，受str2的地址也会发生新的变化了。）</em></p><p><em>Ps:string虽然方便，但是有一个小缺点，就是频繁的改变string，重新赋值时，会产生内存垃圾。（关于优化替代方案，我们会在面向对象之后进行讲解）</em></p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>复杂数据类型(二)</title>
    <link href="/2023/11/16/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/11/16/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="复杂数据类型（二）"><a href="#复杂数据类型（二）" class="headerlink" title="复杂数据类型（二）"></a>复杂数据类型（二）</h1><h2 id="一-二维数组"><a href="#一-二维数组" class="headerlink" title="一.二维数组"></a>一.二维数组</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>二维数组是使用两个下标（索引）来确定元素的数组，两个下标可以理解成行标和列标。</p><p><em>eg： 1 2 3</em></p><p>​         <em>4 5 6</em></p><p>可以用二维数组int[2,3]表示，好比两行三列的数据集合。</p><p>在内存里面依据行优先存储原则，一行行横向存放。</p><h3 id="二维数组的申明"><a href="#二维数组的申明" class="headerlink" title="二维数组的申明"></a>二维数组的申明</h3><h4 id="变量类型-二维数组变量名"><a href="#变量类型-二维数组变量名" class="headerlink" title="变量类型[,]二维数组变量名;"></a>变量类型[,]二维数组变量名;</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> [,] arr;<span class="hljs-comment">//申明过后要在后面进行初始化</span><br></code></pre></td></tr></table></figure><h4 id="变量类型-二维数组变量名-new-变量类型-行-列"><a href="#变量类型-二维数组变量名-new-变量类型-行-列" class="headerlink" title="变量类型[,]二维数组变量名 &#x3D;new 变量类型[行,列];"></a>变量类型[,]二维数组变量名 &#x3D;new 变量类型[行,列];</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> [,] arr2=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><h4 id="变量类型-二维数组变量名-new-变量类型-行-列-1"><a href="#变量类型-二维数组变量名-new-变量类型-行-列-1" class="headerlink" title="变量类型[,]二维数组变量名 &#x3D;new 变量类型[行,列]"></a>变量类型[,]二维数组变量名 &#x3D;new 变量类型[行,列]</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> [,] arr3=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><h4 id="变量类型-二维数组变量名-new-变量类型"><a href="#变量类型-二维数组变量名-new-变量类型" class="headerlink" title="变量类型[,]二维数组变量名 &#x3D;new 变量类型[,]"></a>变量类型[,]二维数组变量名 &#x3D;new 变量类型[,]</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> [,] arr4=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[,]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><h4 id="变量类型-二维数组变量名-1"><a href="#变量类型-二维数组变量名-1" class="headerlink" title="变量类型[,]二维数组变量名 &#x3D;;"></a>变量类型[,]二维数组变量名 &#x3D;;</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> [,] arr5=&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><h3 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h3><h4 id="二维数组的长度"><a href="#二维数组的长度" class="headerlink" title="二维数组的长度"></a>二维数组的长度</h4><p>我们要获取行和列分别是多长.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[,] array =<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[,]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;<br>Console.WriteLine(array.GetLength(<span class="hljs-number">0</span>));<br><span class="hljs-comment">//得到多少行;</span><br>Console.WriteLine(array.GetLength(<span class="hljs-number">1</span>));<br><span class="hljs-comment">//得到多少列;</span><br></code></pre></td></tr></table></figure><h4 id="获取二维数组中的元素"><a href="#获取二维数组中的元素" class="headerlink" title="获取二维数组中的元素"></a>获取二维数组中的元素</h4><p>依据下标进行索引.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#">Console.WriteLine(array[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><h4 id="修改二维数组中的元素"><a href="#修改二维数组中的元素" class="headerlink" title="修改二维数组中的元素"></a>修改二维数组中的元素</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#">array[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]=<span class="hljs-number">99</span>;<br>Console.WriteLine(array[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><h4 id="遍历二维数组"><a href="#遍历二维数组" class="headerlink" title="遍历二维数组"></a>遍历二维数组</h4><p>嵌套循环(不想写啦啦啦啦啦啦)</p><h4 id="增加数组的元素"><a href="#增加数组的元素" class="headerlink" title="增加数组的元素"></a>增加数组的元素</h4><p>和一维函数一样,还是通过”搬家”的思想,数组声明初始化后,就不能在原有的基础上进行添加或删除了.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[,]array=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<span class="hljs-comment">//原有数组</span><br><span class="hljs-built_in">int</span>[,]array2=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>];<span class="hljs-comment">//新数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;array.GetLength(<span class="hljs-number">0</span>);i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;array.GetLength(<span class="hljs-number">1</span>);j++)&#123;<br>        array2[i,j]=array[i,j];<br>    &#125;<br>&#125;<br>array=array2;<br><span class="hljs-comment">//更换地址.</span><br></code></pre></td></tr></table></figure><h4 id="删除数组的元素"><a href="#删除数组的元素" class="headerlink" title="删除数组的元素"></a>删除数组的元素</h4><p>和增加异曲同工,也不想写啦!!!!!!</p><h4 id="查找数组中的元素"><a href="#查找数组中的元素" class="headerlink" title="查找数组中的元素"></a>查找数组中的元素</h4><p>进行遍历查找,必要可以使用算法.</p><h2 id="二-交错数组"><a href="#二-交错数组" class="headerlink" title="二.交错数组"></a>二.交错数组</h2><p>（咱们了解一下即可，实际应用较少）</p><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p>交错数组是数组的数组，每个维度的数量可以不同。</p><p>注意：二维数组的每行的列数相同，交错数组每行的列数可能不同。</p><h3 id="数组的申明"><a href="#数组的申明" class="headerlink" title="数组的申明"></a>数组的申明</h3><h4 id="变量类型-交错数组名"><a href="#变量类型-交错数组名" class="headerlink" title="变量类型[ ]&#x2F;&#x2F;[ ] 交错数组名;"></a>变量类型[ ]&#x2F;&#x2F;[ ] 交错数组名;</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[][]=arr1;<br><span class="hljs-comment">//与二维数组不同的是方框里面没有逗号。</span><br></code></pre></td></tr></table></figure><p>之后的申明和一维二维差不多，直接写了，不起标题了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[][] arr2=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">3</span>][];<br><span class="hljs-comment">//有三行，但是具体多少列，不确定.</span><br><span class="hljs-built_in">int</span>[][] arr3=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">3</span>][]&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>      <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,<br>                          <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>&#125;;<br>&#125;<br><span class="hljs-comment">//行数固定，列数不固定，数组类型仍然一致，是“数组的数组”。</span><br><span class="hljs-built_in">int</span>[][] arr4=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[][]&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>      <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,<br>                          <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>&#125;&#125;;<br><span class="hljs-built_in">int</span>[][] arr5=&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>       <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,<br>               <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><h4 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> [][] array=&#123;<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;&#125;;<br>Console.WriteLine(array.GetLength(<span class="hljs-number">0</span>));<br><span class="hljs-comment">//得到行数.</span><br>Console.WriteLine(array[<span class="hljs-number">0</span>].Length);<br><span class="hljs-comment">//得到某一行的列数.</span><br></code></pre></td></tr></table></figure><h4 id="获取交错数组中的元素"><a href="#获取交错数组中的元素" class="headerlink" title="获取交错数组中的元素"></a>获取交错数组中的元素</h4><p>直接获取，不解释。</p><h4 id="修改交错数组中的元素"><a href="#修改交错数组中的元素" class="headerlink" title="修改交错数组中的元素"></a>修改交错数组中的元素</h4><p>同上，直接赋值。</p><h3 id="遍历交错数组"><a href="#遍历交错数组" class="headerlink" title="遍历交错数组"></a>遍历交错数组</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;array.GerLength(<span class="hljs-number">0</span>);i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;array[i].Length;j++)&#123;<br>        Console.WriteLine(array[i][j]);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//列的获取要先得到行.</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>复杂数据类型（一）</title>
    <link href="/2023/11/11/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%80%EF%BC%89/"/>
    <url>/2023/11/11/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="复杂数据类型（一）"><a href="#复杂数据类型（一）" class="headerlink" title="复杂数据类型（一）"></a>复杂数据类型（一）</h1><p><strong>类型特点：</strong></p><p>1.数据集合：一般是多个数据（变量）集合在一起构成的数据</p><p>2.自定义：一般可以自己取名字，可以自定义的数据（变量）</p><p><strong>具体特点</strong></p><p>枚举:整形常量的集合，可以自定义</p><p>数组：任意变量类型顺序存储的数据</p><p>结构体：任意变量的数据集合，可以自定义</p><h2 id="一-枚举"><a href="#一-枚举" class="headerlink" title="一.枚举"></a>一.枚举</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><h4 id="枚举是什么"><a href="#枚举是什么" class="headerlink" title="枚举是什么"></a>枚举是什么</h4><p>枚举是一个比较特别的存在，它是一个被命名的整形常量的集合(不会被改变），一般用它来表示状态类型等等</p><h4 id="申明枚举和申明枚举变量"><a href="#申明枚举和申明枚举变量" class="headerlink" title="申明枚举和申明枚举变量"></a>申明枚举和申明枚举变量</h4><p>申明枚举：相当于是创建一个自定义的枚举类型</p><p>申明枚举变量：使用申明的自定义枚举类型创建一个枚举变量</p><h4 id="申明枚举语法"><a href="#申明枚举语法" class="headerlink" title="申明枚举语法"></a>申明枚举语法</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">enum</span> E_自定义枚举名;<br><span class="hljs-comment">//枚举名以E或者E_开头，作为我们的命名规范.</span><br>&#123;<br>    自定义枚举项名字,<span class="hljs-comment">//枚举中包裹的整形常量，名字是我们自己取的，第一个默认值是0，下面会依次累加。</span><br>    自定义枚举项名字<span class="hljs-number">1</span>,<span class="hljs-comment">//默认累加，为1</span><br>    自定义枚举项名字<span class="hljs-number">2</span>,<span class="hljs-comment">//默认累加，2</span><br>&#125;<br><span class="hljs-built_in">enum</span> E_自定义枚举名;<br><span class="hljs-comment">//枚举名以E或者E_开头，作为我们的命名规范.</span><br>&#123;<br>    自定义枚举项名字 =<span class="hljs-number">5</span>,<span class="hljs-comment">//第一个枚举项的默认值变成5了；</span><br>    自定义枚举项名字<span class="hljs-number">1</span>,<span class="hljs-comment">//默认累加，为6；</span><br>    自定义枚举项名字<span class="hljs-number">2</span>,<span class="hljs-comment">//默认累加，为7；</span><br>    自定义枚举项名字<span class="hljs-number">3</span> =<span class="hljs-number">100</span>，<span class="hljs-comment">//允许在中途改变枚举项的值；</span><br>    自定义枚举项名字<span class="hljs-number">4</span><span class="hljs-comment">//改完之后仍然遵循累加，为101；</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-在哪里申明枚举"><a href="#2-在哪里申明枚举" class="headerlink" title="2.在哪里申明枚举"></a>2.在哪里申明枚举</h3><p>在namespace语句块中(常用)</p><p>class语句块中，struct语句块中（不常用）</p><p><strong>注意：枚举不能在函数语句块中申明！！！！</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Lesson1</span><br>&#123;<br>    <span class="hljs-comment">//在这里申明枚举；</span><br>    <span class="hljs-built_in">enum</span> E_MonsterType<br>    &#123;<br>        Normal,<br>        Boss,<br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-comment">//函数语句块中申明会报错！</span><br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-枚举的使用-关于申明枚举与枚举变量"><a href="#3-枚举的使用-关于申明枚举与枚举变量" class="headerlink" title="3.枚举的使用(关于申明枚举与枚举变量)"></a>3.枚举的使用(关于申明枚举与枚举变量)</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Lesson1</span><br>&#123;<br>    <span class="hljs-built_in">enum</span>  E_MonsterType<br>    &#123;<br>        Normal,<br>        Boss,<br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            E_MonsterType play = E_MonsterType.Normal;<br>            <span class="hljs-comment">//申明枚举变量</span><br>            <span class="hljs-comment">//=右边为namespace里面的整形常量，通过枚举名识别。</span><br>            <span class="hljs-comment">//play为自定义的名字。</span><br>            <span class="hljs-comment">//作用：声明了一个枚举类型的变量，值等于normal。</span><br>            <span class="hljs-keyword">if</span>(play==E_MonsterType.Normal)<br>            &#123;<br>                相对应的逻辑；<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(play==E_MonsterType.Boss)<br>            &#123;<br>                其他对应逻辑;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：申明枚举变量</p><p>自定义的枚举类型 变量名&#x3D;默认值(自定义的枚举类型.枚举项)</p><p>用来配合条件分支语句来使用。</p><p><em>Ps:枚举和switch是“天生一对”</em></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//接上文的背景,在函数框框内</span><br>E_MonsterType monster =E_MonsterType.Boss;<br><span class="hljs-keyword">switch</span> (monsterType)<br>&#123;<br>        <span class="hljs-keyword">case</span> E_MonsterType.Normal;<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> E_MonsterType.Boss;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-literal">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">//这些会自动补齐，很方便的</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-枚举的类型转换"><a href="#4-枚举的类型转换" class="headerlink" title="4.枚举的类型转换"></a>4.枚举的类型转换</h3><p>只能转两个！！！</p><h4 id="枚举和int互转"><a href="#枚举和int互转" class="headerlink" title="枚举和int互转"></a>枚举和int互转</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//接上文的背景,在函数框框内</span><br>E_MonsterType monster =E_MonsterType.Boss;<br><span class="hljs-built_in">int</span> i=(<span class="hljs-built_in">int</span>)monster;<br><span class="hljs-comment">//枚举转int（monster代表枚举类型,赋值给int类型的i）</span><br>Console.WriteLine(i);<br><span class="hljs-comment">//输出1，代表Boss的数字</span><br><span class="hljs-built_in">int</span> t=<span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">Parse</span>(<span class="hljs-params">Console.ReadLine(</span>))</span>;<br>monster=(E_MonsterType)t;<br><span class="hljs-comment">//t是变量，因此要多一步括号强转。</span><br>monster=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//int转枚举(0代表int类型，直接赋给枚举类型)</span><br></code></pre></td></tr></table></figure><h4 id="枚举和string相互转换"><a href="#枚举和string相互转换" class="headerlink" title="枚举和string相互转换"></a>枚举和string相互转换</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//接上文的背景,在函数框框内</span><br>E_MonsterType monster =E_MonsterType.Boss;<br><span class="hljs-built_in">string</span> str=monster.Tostring();<br>Console.WriteLine(str);<br><span class="hljs-comment">//枚举转成string类型。</span><br><span class="hljs-comment">//会输出Boss这个字符串（把枚举项的名字转换成字符串，输出枚举项的名字）</span><br>monster = (E_MonsterType)Enum.parse(<span class="hljs-keyword">typeof</span>(E_MonsterType),<span class="hljs-string">&quot;Boss&quot;</span>);<br>Consloe.WriteLine(playerType);<br><span class="hljs-comment">//括号内第一个参数表示要转换成什么样的枚举类型（因为枚举是自定义的），第二个参数填用于转换的对应枚举项的字符串，</span><br><span class="hljs-comment">//Enmu表示一个类，类里面有一个parse的函数，可以把字符串转换成枚举。</span><br><span class="hljs-comment">//转换完毕后是一个通用的类型，还要记得括号强转，转化成你想要的目标枚举类型。</span><br><span class="hljs-comment">//最后输出BOSS。</span><br></code></pre></td></tr></table></figure><h3 id="5-枚举的作用"><a href="#5-枚举的作用" class="headerlink" title="5.枚举的作用"></a>5.枚举的作用</h3><p>在游戏开发中，对象很多时候会有许多状态，比如玩家有一个动作状态，我们需要用一个变量或者标识，来表示当前玩家是处于的是哪一种状态。</p><p>枚举可以帮助我们清晰的分清楚状态的含义。</p><p><em>备注：在写枚举时，你可以用到三杠注释，这样在你申明枚举类型时鼠标移到类型上会有提示，方便阅读。</em></p><p>（枚举的题目实例）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Lesson1</span><br>&#123;<br>    <span class="hljs-built_in">enum</span>  E_SexType<br>    &#123;<br>        Man,<br>        Woman,<br>    &#125;<br>    <span class="hljs-built_in">enum</span> E_zhiye<br>    &#123;<br>        zhanshi,<br>        fashi,<br>        lieren,<br>    &#125;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                <span class="hljs-built_in">string</span> sex = <span class="hljs-string">&quot; &quot;</span>;<br>                <span class="hljs-built_in">string</span> zhi = <span class="hljs-string">&quot; &quot;</span>;<br>                <span class="hljs-built_in">string</span> jineng = <span class="hljs-string">&quot; &quot;</span>;<br>                Console.WriteLine(<span class="hljs-string">&quot;请输入性别（男性0，女性1）：&quot;</span>);<br>                E_SexType sex1 = (E_SexType)<span class="hljs-built_in">int</span>.Parse(Console.ReadLine());<br>                <span class="hljs-comment">//输入转成枚举类型。</span><br>                <span class="hljs-built_in">int</span> akt = <span class="hljs-number">0</span>;<br>                <span class="hljs-built_in">int</span> def = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">switch</span> (sex1)<br>                &#123;<br>                    <span class="hljs-keyword">case</span> E_SexType.Man:<br>                        sex = <span class="hljs-string">&quot;男性&quot;</span>;<br>                        akt += <span class="hljs-number">50</span>;<br>                        def += <span class="hljs-number">100</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> E_SexType.Woman:<br>                        sex = <span class="hljs-string">&quot;女性&quot;</span>;<br>                        akt += <span class="hljs-number">150</span>;<br>                        def += <span class="hljs-number">20</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>                Console.WriteLine(<span class="hljs-string">&quot;请输入职业(战士0，法师1，猎人2):&quot;</span>);<br>                E_zhiye zhiye=(E_zhiye)<span class="hljs-built_in">int</span>.Parse(Console.ReadLine());<br>                <span class="hljs-keyword">switch</span> (zhiye)<br>                &#123;<br>                    <span class="hljs-keyword">case</span> E_zhiye.zhanshi:<br>                        zhi = <span class="hljs-string">&quot;战士&quot;</span>;<br>                        akt += <span class="hljs-number">20</span>;<br>                        def+= <span class="hljs-number">100</span>;<br>                        jineng = <span class="hljs-string">&quot;冲锋&quot;</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> E_zhiye.fashi:<br>                        zhi = <span class="hljs-string">&quot;法师&quot;</span>;<br>                        akt += <span class="hljs-number">200</span>;<br>                        def += <span class="hljs-number">10</span>;<br>                        jineng = <span class="hljs-string">&quot;奥术冲击&quot;</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> E_zhiye.lieren:<br>                        zhi = <span class="hljs-string">&quot;猎人&quot;</span>;<br>                        akt += <span class="hljs-number">120</span>;<br>                        def += <span class="hljs-number">30</span>;<br>                        jineng = <span class="hljs-string">&quot;假死&quot;</span>;<br>                        <span class="hljs-keyword">break</span>; <br>                &#125;<br>                Console.WriteLine(<span class="hljs-string">&quot;你选择了\&quot;&#123;0&#125;&#123;1&#125;\&quot;,攻击力：&#123;2&#125;,防御力:&#123;3&#125;,职业技能:&#123;4&#125;。&quot;</span>,sex,zhi,akt,def,jineng);<br>            &#125;<span class="hljs-keyword">catch</span><br>            &#123;<br>                Console.WriteLine(<span class="hljs-string">&quot;请输入数字：&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-数组"><a href="#二-数组" class="headerlink" title="二.数组"></a>二.数组</h2><h3 id="1-一维数据"><a href="#1-一维数据" class="headerlink" title="1.一维数据"></a>1.一维数据</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>数组是存储一组相同类型数据的集合</p><p>数组分为一维，多维，交错数组</p><p>一般情况下，一维数组就简称数组。</p><h4 id="数组的申明"><a href="#数组的申明" class="headerlink" title="数组的申明"></a>数组的申明</h4><h5 id="第一种申明写法："><a href="#第一种申明写法：" class="headerlink" title="第一种申明写法："></a>第一种申明写法：</h5><p>变量类型[] 数组名；（该申明的特点：只是申明了一个数组，但是并没有对这个数组进行分配内存，也没有初始化。</p><p>变量类型可以是我们学过的或者没学过的所有变量类型（包括枚举）。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[] arr1;<br><span class="hljs-built_in">bool</span>[] arr6;<br></code></pre></td></tr></table></figure><h5 id="第二种申明写法："><a href="#第二种申明写法：" class="headerlink" title="第二种申明写法："></a>第二种申明写法：</h5><p>变量类型[] 数组名 &#x3D; new 变量类型[数组的长度];</p><p>不同于第一种的是，在定义的时候它其实以及给数组分配内存了，也进行初始化了。相当于开了五个房间，但是房间里面的值默认为0.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[] arr3 =<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><h5 id="第三种申明写法："><a href="#第三种申明写法：" class="headerlink" title="第三种申明写法："></a>第三种申明写法：</h5><p>变量类型[] 数组名 &#x3D; new 变量类型[数组的长度]{内容1，内容2，。。。。。。}（数量要相对应}。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[] arr3 =<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">5</span>] &#123;<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span>，<span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><h5 id="第四种申明写法："><a href="#第四种申明写法：" class="headerlink" title="第四种申明写法："></a>第四种申明写法：</h5><p>变量类型[] 数组名 &#x3D; new 变量类型[]{内容1，内容2，。。。。。。}。</p><p>后面的内容决定了数组的长度。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[] arr3 =<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[] &#123;<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span>，<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br></code></pre></td></tr></table></figure><h5 id="第五种申明写法："><a href="#第五种申明写法：" class="headerlink" title="第五种申明写法："></a>第五种申明写法：</h5><p>变量类型[] 数组名 &#x3D; {内容1，内容2，。。。。。。}。(内容一定要和数组名对应)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[] arr3 =&#123;<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span>，<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br><span class="hljs-built_in">bool</span>[] arr4=&#123;<span class="hljs-literal">true</span>.<span class="hljs-literal">false</span>&#125;;<br></code></pre></td></tr></table></figure><h4 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h4><h5 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h5><p>如何获取数组的长度？</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[] array=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>Console.WriteLine(array.Length);<br></code></pre></td></tr></table></figure><h5 id="获取数组中的元素"><a href="#获取数组中的元素" class="headerlink" title="获取数组中的元素"></a>获取数组中的元素</h5><p>数组中的下标和索引从0开始，不能越界。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#">Console.WriteLine(array[<span class="hljs-number">0</span>]);<br>Console.WriteLine(array[<span class="hljs-number">2</span>]);<br></code></pre></td></tr></table></figure><h5 id="修改数组中的元素"><a href="#修改数组中的元素" class="headerlink" title="修改数组中的元素"></a>修改数组中的元素</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#">array[<span class="hljs-number">0</span>]=<span class="hljs-number">99</span>;<br><span class="hljs-comment">//重新赋值即可,类型要相同。</span><br></code></pre></td></tr></table></figure><h5 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h5><p>通过循环快速获取数组中的每一个元素。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;array.Length;i++)&#123;<br>    Console.WriteLine(array[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="增加数组的元素"><a href="#增加数组的元素" class="headerlink" title="增加数组的元素"></a>增加数组的元素</h5><p>注意：数组初始化之后，是不能够直接添加新的元素的，要增加，得做一个“新家”再“搬过去”。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span>[]array2=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">6</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;array.Length;i++)&#123;<br>    array2[i]=array[i];<br>&#125;<br>array=array2;<span class="hljs-comment">//很重要！！！！！！！！！！！！！！！！！</span><br><span class="hljs-comment">//将array指向一片新的内存空间了，原内存空间作废。</span><br>array[<span class="hljs-number">5</span>]=<span class="hljs-number">999</span>;<br><span class="hljs-comment">//就增加了一个新的元素.</span><br></code></pre></td></tr></table></figure><h5 id="删除数组的元素"><a href="#删除数组的元素" class="headerlink" title="删除数组的元素"></a>删除数组的元素</h5><p>与增加相似，数组初始化之后，也不能删减元素，还是要搬家。与上文类似，不多做代码块叙述。（数组遍历长度应为新数组的长度，因为比较小）（i&lt;array3.Length)</p><h5 id="查找数组中的元素"><a href="#查找数组中的元素" class="headerlink" title="查找数组中的元素"></a>查找数组中的元素</h5><p>只有通过遍历才可以，没得说。</p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql day08</title>
    <link href="/2023/11/04/mysql-day08/"/>
    <url>/2023/11/04/mysql-day08/</url>
    
    <content type="html"><![CDATA[<h1 id="关于分组查询（非常重要！！！）"><a href="#关于分组查询（非常重要！！！）" class="headerlink" title="关于分组查询（非常重要！！！）"></a>关于分组查询（非常重要！！！）</h1><h2 id="什么是分组查询？"><a href="#什么是分组查询？" class="headerlink" title="什么是分组查询？"></a>什么是分组查询？</h2><p>在实际的应用中，可能有这样的需求，需要先进行分组，然后对每一组的数据进行操作。这个时候我们需要使用分组查询。怎么进行分组查询呢？</p><p><strong>语法基础</strong>： </p><p>select … from … group by …</p><p>eg：计算每个部门的工资和？</p><p>计算每个工作岗位的平均薪资？</p><p>找出每个工作岗位的最高薪资？</p><h2 id="关于执行顺序"><a href="#关于执行顺序" class="headerlink" title="关于执行顺序"></a>关于执行顺序</h2><p>select…from …where…group by…order by….</p><p><strong>执行顺序是什么呢？</strong></p><p><strong>1.from</strong></p><p><strong>2.where</strong></p><p><strong>3.group by</strong></p><p><strong>4.select</strong></p><p><strong>5.order by</strong></p><h3 id="具体案例"><a href="#具体案例" class="headerlink" title="具体案例"></a>具体案例</h3><p>1.找出每个工作岗位的工资和？</p><p>实现思路：按照工作岗位分组，然后对工资求和。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select sum(sal),job from emp group by job;<br>+----------+-----------+<br>| sum(sal) | job       |<br>+----------+-----------+<br>|  6000.00 | ANALYST   |<br>|  4150.00 | CLERK     |<br>|  8275.00 | MANAGER   |<br>|  5000.00 | PRESIDENT |<br>|  5600.00 | SALESMAN  |<br>+----------+-----------+<br>5 rows in set (0.001 sec)<br>//以上语句的执行顺序？<br>先从emp表中查询数据，根据job字段进行分组，然后对每一组的数据进行sum（sal）<br>MariaDB [hello]&gt; select ename,job from emp group by job;<br>+-------+-----------+<br>| ename | job       |<br>+-------+-----------+<br>| SCOTT | ANALYST   |<br>| SMITH | CLERK     |<br>| JONES | MANAGER   |<br>| KING  | PRESIDENT |<br>| ALLEN | SALESMAN  |<br>+-------+-----------+<br>5 rows in set (0.001 sec)<br>//以上语句在mysql中可以执行，但是毫无意义<br>//以上语句在oracle中执行报错。<br>//oracle的语法比mysql的语法严格。（mysql的语法相对来说松散一些！）<br>//ename有14条记录，而job只有5条，不匹配。<br></code></pre></td></tr></table></figure><h4 id="重点结论："><a href="#重点结论：" class="headerlink" title="重点结论："></a><strong>重点结论</strong>：</h4><p>​<strong>在一条select语句当中，如果有group by 语句的话，select后面只能跟参加分组的字段以及分组函数，其他的一律不能跟。</strong></p><p>2.找出每个部门，不同工作岗位的最高薪资？</p><p>技巧：两个字段联合成1个字段来看。（两个字段联合分组）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt;  select deptno,job,max(sal)from emp group by deptno,job;<br>+--------+-----------+----------+<br>| deptno | job       | max(sal) |<br>+--------+-----------+----------+<br>|     10 | CLERK     |  1300.00 |<br>|     10 | MANAGER   |  2450.00 |<br>|     10 | PRESIDENT |  5000.00 |<br>|     20 | ANALYST   |  3000.00 |<br>|     20 | CLERK     |  1100.00 |<br>|     20 | MANAGER   |  2975.00 |<br>|     30 | CLERK     |   950.00 |<br>|     30 | MANAGER   |  2850.00 |<br>|     30 | SALESMAN  |  1600.00 |<br>+--------+-----------+----------+<br>9 rows in set (0.001 sec)<br>//逗号将deptno与job一起变成联合字段。<br></code></pre></td></tr></table></figure><p>3.找出每个部门最高薪资，要求显示最高薪资大于3000的？</p><p>​第一步：找出每个部门的最高薪资，按照部门编号进行分组，</p><p>​第二步：要求显示最高薪资大于3000</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select max(sal),deptno from emp group by deptno having max(sal)&gt;3000;<br>+----------+--------+<br>| max(sal) | deptno |<br>+----------+--------+<br>|  5000.00 |     10 |<br>+----------+--------+<br>1 row in set (0.001 sec)<br></code></pre></td></tr></table></figure><p><em><strong>Ps：关于having语句：</strong></em></p><p>使用having语句可以对分完组之后的数据进行进一步的过滤，having不能单独使用，having不能替代where，并且having必须和group by联合使用。</p><p>思考：以上的sql语句执行效率是不是低了？</p><p>实际上可以这样考虑：先将大于3000的都找出来，然后在进行分组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select max(sal),deptno from emp where sal&gt;3000 group by deptno;<br>+----------+--------+<br>| max(sal) | deptno |<br>+----------+--------+<br>|  5000.00 |     10 |<br>+----------+--------+<br>1 row in set (0.001 sec)<br>//记住！！！！分组函数不能用在where后面！！！！！！！<br></code></pre></td></tr></table></figure><p><strong>Ps：但是也有where完成不了的语句</strong></p><p>找出每个部门平均薪资，要求显示平均薪资高于2500的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select deptno,avg(sal) from emp group by deptno having avg(sal)&gt;2500;<br>+--------+-------------+<br>| deptno | avg(sal)    |<br>+--------+-------------+<br>|     10 | 2916.666667 |<br>+--------+-------------+<br>1 row in set (0.001 sec)<br>//where后面不能跟函数！！！！！！！只能用having。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql day07</title>
    <link href="/2023/11/02/mysql-day07/"/>
    <url>/2023/11/02/mysql-day07/</url>
    
    <content type="html"><![CDATA[<h1 id="关于分组函数-聚合函数-多行处理函数"><a href="#关于分组函数-聚合函数-多行处理函数" class="headerlink" title="关于分组函数&#x2F;聚合函数&#x2F;多行处理函数"></a>关于分组函数&#x2F;聚合函数&#x2F;多行处理函数</h1><table><thead><tr><th>count</th><th>取得记录数</th></tr></thead><tbody><tr><td>avg</td><td>取平均</td></tr><tr><td>sum</td><td>求和</td></tr><tr><td>max</td><td>取最大数</td></tr><tr><td>min</td><td>取最小数</td></tr></tbody></table><h2 id="具体运用"><a href="#具体运用" class="headerlink" title="具体运用"></a>具体运用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select max(sal) from emp;<br>+----------+<br>| max(sal) |<br>+----------+<br>|  5000.00 |<br>+----------+<br>1 row in set (0.001 sec)<br>//最大值应用<br>MariaDB [hello]&gt; select min(sal) from emp;<br>+----------+<br>| min(sal) |<br>+----------+<br>|   800.00 |<br>+----------+<br>1 row in set (0.000 sec)<br>//最小值应用<br>MariaDB [hello]&gt; select sum(sal) from emp;<br>+----------+<br>| sum(sal) |<br>+----------+<br>| 29025.00 |<br>+----------+<br>1 row in set (0.000 sec)<br>//总和应用<br>MariaDB [hello]&gt; select avg(sal) from emp;<br>+-------------+<br>| avg(sal)    |<br>+-------------+<br>| 2073.214286 |<br>+-------------+<br>1 row in set (0.001 sec)<br>//平均值应用<br>MariaDB [hello]&gt; select count(sal) from emp;<br>+------------+<br>| count(sal) |<br>+------------+<br>|         14 |<br>+------------+<br>1 row in set (0.001 sec)<br>//取得记录数应用<br></code></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h4 id="第一点：分组函数自动忽略NULL，不需要提前对NULL进行处理。"><a href="#第一点：分组函数自动忽略NULL，不需要提前对NULL进行处理。" class="headerlink" title="第一点：分组函数自动忽略NULL，不需要提前对NULL进行处理。"></a>第一点：分组函数自动忽略NULL，不需要提前对NULL进行处理。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select ename,comm from emp;<br>+--------+---------+<br>| ename  | comm    |<br>+--------+---------+<br>| SMITH  |    NULL |<br>| ALLEN  |  300.00 |<br>| WARD   |  500.00 |<br>| JONES  |    NULL |<br>| MARTIN | 1400.00 |<br>| BLAKE  |    NULL |<br>| CLARK  |    NULL |<br>| SCOTT  |    NULL |<br>| KING   |    NULL |<br>| TURNER |    0.00 |<br>| ADAMS  |    NULL |<br>| JAMES  |    NULL |<br>| FORD   |    NULL |<br>| MILLER |    NULL |<br>+--------+---------+<br>14 rows in set (0.001 sec)<br>MariaDB [hello]&gt; select sum(comm) from emp;<br>+-----------+<br>| sum(comm) |<br>+-----------+<br>|   2200.00 |<br>+-----------+<br>1 row in set (0.001 sec)<br>//可见对NULL自动忽略。<br></code></pre></td></tr></table></figure><h4 id="第二点：分组函数中count（-）和count（具体字段）有什么区别？"><a href="#第二点：分组函数中count（-）和count（具体字段）有什么区别？" class="headerlink" title="第二点：分组函数中count（*）和count（具体字段）有什么区别？"></a>第二点：分组函数中count（*）和count（具体字段）有什么区别？</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select count(*) from emp;<br>+----------+<br>| count(*) |<br>+----------+<br>|       14 |<br>+----------+<br>1 row in set (0.001 sec)<br><br>MariaDB [hello]&gt; select count(comm) from emp;<br>+-------------+<br>| count(comm) |<br>+-------------+<br>|           4 |<br>+-------------+<br>1 row in set (0.000 sec)<br></code></pre></td></tr></table></figure><p>count(具体字段):表示统计该字段下所有不为NULL的元素的总数</p><p>count(*):统计表当中的总行数（只要有一行数据，count++）。</p><h4 id="第三点：分组函数不能直接使用在where子句中。"><a href="#第三点：分组函数不能直接使用在where子句中。" class="headerlink" title="第三点：分组函数不能直接使用在where子句中。"></a><strong>第三点：分组函数不能直接使用在where子句中。</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select ename,sal from emp where sal &gt;min(sal);<br>ERROR 1111 (HY000): Invalid use of group function<br></code></pre></td></tr></table></figure><p><strong>为什么会报错呢？（讲完分组查询group by之后会讲）</strong></p><p>因为分组函数在使用的时候必须先分组才能使用，当where执行的时候还没有分组，因此where后面不能出现分组函数。</p><p><strong>疑问追加：</strong></p><p>select sum(sal) from emp;</p><p><strong>这个没有进行分组，为什么sum（）函数又可以使用啦？</strong></p><p>因为select在group by之后执行（详情见day08）。</p><h4 id="第四点：所有的分组函数可以组合起来一起用"><a href="#第四点：所有的分组函数可以组合起来一起用" class="headerlink" title="第四点：所有的分组函数可以组合起来一起用"></a>第四点：所有的分组函数可以组合起来一起用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select sum(sal),min(sal),max(sal),avg(sal),count(*) from emp;<br>+----------+----------+----------+-------------+----------+<br>| sum(sal) | min(sal) | max(sal) | avg(sal)    | count(*) |<br>+----------+----------+----------+-------------+----------+<br>| 29025.00 |   800.00 |  5000.00 | 2073.214286 |       14 |<br>+----------+----------+----------+-------------+----------+<br>1 row in set (0.001 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于控制台的其他知识</title>
    <link href="/2023/10/31/%E5%85%B3%E4%BA%8E%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9A%84%E5%85%B6%E4%BB%96%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/10/31/%E5%85%B3%E4%BA%8E%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9A%84%E5%85%B6%E4%BB%96%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="关于控制台其他方法"><a href="#关于控制台其他方法" class="headerlink" title="关于控制台其他方法"></a>关于控制台其他方法</h1><h3 id="一-清空"><a href="#一-清空" class="headerlink" title="一.清空"></a>一.清空</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#">Console.Clear();<br></code></pre></td></tr></table></figure><h3 id="二-设置控制台大小"><a href="#二-设置控制台大小" class="headerlink" title="二.设置控制台大小"></a>二.设置控制台大小</h3><p>注意：1.先设置窗口大小，再设置缓冲区大小</p><p>2.缓冲区的大小不能小于窗口的大小。</p><p><em>缓冲区相当于画布，窗口相当于画。</em></p><p>3.窗口的大小不能大于控制台的最大尺寸。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#">Console.SetWindowsSize(<span class="hljs-number">100</span>,<span class="hljs-number">50</span>);<br><span class="hljs-comment">//窗口大小，第一个是长，第二个是宽。</span><br>Console.SetBufferSize(<span class="hljs-number">100</span>,<span class="hljs-number">20</span>);<br><span class="hljs-comment">//缓冲区大小（可打印内容的宽高。）</span><br>Console.BufferHeight<br><span class="hljs-comment">//得到缓冲区的高</span><br>Console.BufferWidth<br><span class="hljs-comment">//得到缓冲区的宽</span><br>Console.SetCursorPosition(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br><span class="hljs-comment">//设置光标的位置。控制台左上角为原点（0，0），右侧是X轴正方向，下方是Y轴正方向。</span><br><span class="hljs-comment">//注意：1.边界问题2.横纵距离单位不同，1y=2x.</span><br>Console.ForegroundColor=ConsoleColor.Red;<br><span class="hljs-comment">//文章颜色设置</span><br>Console.BackgroundColor=ConsoleColor.White;<br><span class="hljs-comment">//背景颜色设置</span><br><span class="hljs-comment">//重置背景颜色过后，需要Clear一次，才能把整个背景颜色改变。</span><br>Console.CursorVisible=<span class="hljs-literal">false</span>（隐藏）/<span class="hljs-literal">true</span>（显示）;<br><span class="hljs-comment">//光标显隐</span><br>Environment.Exit(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//关闭控制台</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql day06</title>
    <link href="/2023/10/29/mysql-day06/"/>
    <url>/2023/10/29/mysql-day06/</url>
    
    <content type="html"><![CDATA[<h1 id="单行处理函数-数据处理函数"><a href="#单行处理函数-数据处理函数" class="headerlink" title="单行处理函数&#x2F;数据处理函数"></a>单行处理函数&#x2F;数据处理函数</h1><h3 id="常见的单行处理函数："><a href="#常见的单行处理函数：" class="headerlink" title="常见的单行处理函数："></a>常见的单行处理函数：</h3><table><thead><tr><th>Lower</th><th>转换小写</th></tr></thead><tbody><tr><td>upper</td><td>转换大写</td></tr><tr><td>substr</td><td>取子串（substr（被截取的字符串，起始下标，截取的长度））</td></tr><tr><td>length</td><td>取长度</td></tr><tr><td>trim</td><td>去空格</td></tr><tr><td>str_to_data</td><td>将字符串转换为日期</td></tr><tr><td>date_format</td><td>格式化日期</td></tr><tr><td>format</td><td>设置千分位</td></tr><tr><td>round</td><td>四舍五入</td></tr><tr><td>rand()</td><td>生成随机数</td></tr><tr><td>Ifnull</td><td>可以将null转换为成一个具体值</td></tr><tr><td>concat</td><td>函数进行字符串的拼接</td></tr><tr><td>case..when..then…when…then..else..end</td><td>当什么情况，怎么做，当什么情况，怎么做，其他情况怎么做，结束。</td></tr></tbody></table><p><em>单行处理函数的特点：一个输入对应一个输出。</em></p><p><em>和单行处理函数相对的是：多行处理函数。（多行处理函数特点：多个输入对应一个输出。）</em></p><h3 id="lower-转换小写-upper-转换大写"><a href="#lower-转换小写-upper-转换大写" class="headerlink" title="lower 转换小写 upper 转换大写"></a>lower 转换小写 upper 转换大写</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select lower(ename) from emp;<br>+--------------+<br>| lower(ename) |<br>+--------------+<br>| smith        |<br>| allen        |<br>| ward         |<br>| jones        |<br>| martin       |<br>| blake        |<br>| clark        |<br>| scott        |<br>| king         |<br>| turner       |<br>| adams        |<br>| james        |<br>| ford         |<br>| miller       |<br>+--------------+<br>14 rows in set (0.000 sec)<br>//14个输入，对应14个输出。<br></code></pre></td></tr></table></figure><h3 id="substr-取子串"><a href="#substr-取子串" class="headerlink" title="substr  取子串"></a>substr  取子串</h3><p><strong>用法：substr（被截取的字符串，起始下标，截取的长度）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select substr(ename,1,1) from emp;<br>+-------------------+<br>| substr(ename,1,1) |<br>+-------------------+<br>| S                 |<br>| A                 |<br>| W                 |<br>| J                 |<br>| M                 |<br>| B                 |<br>| C                 |<br>| S                 |<br>| K                 |<br>| T                 |<br>| A                 |<br>| J                 |<br>| F                 |<br>| M                 |<br>+-------------------+<br>14 rows in set (0.000 sec)<br>//括号内三个参数一一对应，截取的字符串为ename字符串，起始下标从1开始，截取长度为1.<br>MariaDB [hello]&gt;  select ename from emp where substr(ename,1,1) =&#x27;A&#x27;;<br>+-------+<br>| ename |<br>+-------+<br>| ALLEN |<br>| ADAMS |<br>+-------+<br>2 rows in set (0.000 sec)<br>//同样，也可以用来查找员工信息，像这一题，可以用来查找首字母是A的员工信息。（like模糊查询也行，法一法二）<br></code></pre></td></tr></table></figure><p>注意：起始下标从1开始，没有0.</p><h3 id="concat-函数进行字符串拼接"><a href="#concat-函数进行字符串拼接" class="headerlink" title="concat 函数进行字符串拼接"></a>concat 函数进行字符串拼接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select concat (empno,ename) from emp;<br>+----------------------+<br>| concat (empno,ename) |<br>+----------------------+<br>| 7369SMITH            |<br>| 7499ALLEN            |<br>| 7521WARD             |<br>| 7566JONES            |<br>| 7654MARTIN           |<br>| 7698BLAKE            |<br>| 7782CLARK            |<br>| 7788SCOTT            |<br>| 7839KING             |<br>| 7844TURNER           |<br>| 7876ADAMS            |<br>| 7900JAMES            |<br>| 7902FORD             |<br>| 7934MILLER           |<br>+----------------------+<br>14 rows in set (0.000 sec)<br>MariaDB [hello]&gt;  select concat (lower(substr(ename,1,1)),substr(ename,2,length(ename)-1)) as result from emp;<br>+--------+<br>| result |<br>+--------+<br>| sMITH  |<br>| aLLEN  |<br>| wARD   |<br>| jONES  |<br>| mARTIN |<br>| bLAKE  |<br>| cLARK  |<br>| sCOTT  |<br>| kING   |<br>| tURNER |<br>| aDAMS  |<br>| jAMES  |<br>| fORD   |<br>| mILLER |<br>+--------+<br>14 rows in set (0.001 sec)<br>//首字母小写法，当然你要改成首字母大写也可以。运用到字符串拼接原理，将第一个字母进行小写，之后与后面的字符串进行拼接，中间还运用了length函数对名字字符串进行测量，方面取第一位字母后面的长度。<br></code></pre></td></tr></table></figure><p><em><strong>上面还运用的多个函数嵌套，多多观察</strong></em></p><h3 id="length-取长度"><a href="#length-取长度" class="headerlink" title="length 取长度"></a>length 取长度</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select length(ename) as &quot;长度&quot; from emp;<br>+------+<br>| 长度 |<br>+------+<br>|    5 |<br>|    5 |<br>|    4 |<br>|    5 |<br>|    6 |<br>|    5 |<br>|    5 |<br>|    5 |<br>|    4 |<br>|    6 |<br>|    5 |<br>|    5 |<br>|    4 |<br>|    6 |<br>+------+<br>14 rows in set (0.001 sec)<br></code></pre></td></tr></table></figure><h3 id="trim-去空格"><a href="#trim-去空格" class="headerlink" title="trim 去空格"></a>trim 去空格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select * from emp where ename=&#x27; king&#x27;;<br>Empty set (0.001 sec)<br>//因为多了一个空格导致没有查找到。<br>MariaDB [hello]&gt; select * from emp where ename=trim(&#x27; king&#x27;);<br>+-------+-------+-----------+------+------------+---------+------+--------+<br>| EMPNO | ENAME | JOB       | MGR  | HIREDATE   | SAL     | COMM | DEPTNO |<br>+-------+-------+-----------+------+------------+---------+------+--------+<br>|  7839 | KING  | PRESIDENT | NULL | 1981-11-17 | 5000.00 | NULL |     10 |<br>+-------+-------+-----------+------+------------+---------+------+--------+<br>1 row in set (0.001 sec)<br>//合理的进行了去空格操作。<br></code></pre></td></tr></table></figure><table><thead><tr><th>str_to_data</th><th>将字符串转换为日期</th></tr></thead><tbody><tr><td>date_format</td><td>格式化日期</td></tr><tr><td>format</td><td>设置千分位</td></tr></tbody></table><p><em>上面三个则会放到后面再讲。</em></p><h3 id="round-四舍五入"><a href="#round-四舍五入" class="headerlink" title="round 四舍五入"></a>round 四舍五入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select &quot;haihai&quot; from emp;<br>+--------+<br>| haihai |<br>+--------+<br>| haihai |<br>| haihai |<br>| haihai |<br>| haihai |<br>| haihai |<br>| haihai |<br>| haihai |<br>| haihai |<br>| haihai |<br>| haihai |<br>| haihai |<br>| haihai |<br>| haihai |<br>| haihai |<br>+--------+<br>14 rows in set (0.001 sec)<br>//select后面跟着字面量的话，会自动生成与emp表列数一致，内容与字面量一致的表格。<br>MariaDB [hello]&gt; select 100 from emp;<br>+-----+<br>| 100 |<br>+-----+<br>| 100 |<br>| 100 |<br>| 100 |<br>| 100 |<br>| 100 |<br>| 100 |<br>| 100 |<br>| 100 |<br>| 100 |<br>| 100 |<br>| 100 |<br>| 100 |<br>| 100 |<br>| 100 |<br>+-----+<br>14 rows in set (0.001 sec)<br>//数字也会被当做字面量。<br>//结论：select后面可以跟某个表的字段名，（可以等同看作变量名），也可以跟字面量/字面值（数据）。<br>MariaDB [hello]&gt; select round(11.23,0) from emp;<br>+----------------+<br>| round(11.23,0) |<br>+----------------+<br>|             11 |<br>|             11 |<br>|             11 |<br>|             11 |<br>|             11 |<br>|             11 |<br>|             11 |<br>|             11 |<br>|             11 |<br>|             11 |<br>|             11 |<br>|             11 |<br>|             11 |<br>|             11 |<br>+----------------+<br>14 rows in set (0.001 sec)<br>//round函数（），第一个数字输入数字，第二个输入位数，0则保留到各位，1则保留到小数点后一位， -1则反向保留到十位。<br></code></pre></td></tr></table></figure><h3 id="rand（）-生成随机数"><a href="#rand（）-生成随机数" class="headerlink" title="rand（） 生成随机数"></a>rand（） 生成随机数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select rand() from emp;<br>+---------------------+<br>| rand()              |<br>+---------------------+<br>| 0.03390393409310275 |<br>|  0.5426893956425501 |<br>|  0.6117352066670873 |<br>| 0.43060787714143084 |<br>|  0.3178337964395376 |<br>|  0.2973453815070404 |<br>|   0.533225548950234 |<br>|  0.7740916309636939 |<br>| 0.27078153870141275 |<br>| 0.03163283134962696 |<br>|  0.3458195713775415 |<br>|  0.6341993935724715 |<br>| 0.13353828446337793 |<br>|  0.7650932723331203 |<br>+---------------------+<br>14 rows in set (0.001 sec)<br>MariaDB [hello]&gt; select round(rand()*100,0) from emp;<br>+---------------------+<br>| round(rand()*100,0) |<br>+---------------------+<br>|                  34 |<br>|                  20 |<br>|                 100 |<br>|                  38 |<br>|                  93 |<br>|                  47 |<br>|                  60 |<br>|                  57 |<br>|                   4 |<br>|                  50 |<br>|                  37 |<br>|                  36 |<br>|                  68 |<br>|                  33 |<br>+---------------------+<br>14 rows in set (0.011 sec)<br>//100以内的随机数字。<br></code></pre></td></tr></table></figure><h3 id="ifnull-可以将null转换成一个具体的值"><a href="#ifnull-可以将null转换成一个具体的值" class="headerlink" title="ifnull 可以将null转换成一个具体的值"></a>ifnull 可以将null转换成一个具体的值</h3><p>ifnull是空处理函数，专门处理空的。</p><p><strong>在所有数据库中，只要有NULL参与的数学运算，最终结果就是NULL。</strong></p><p><em>为了避免这一现象，就需要使用ifnull函数。</em></p><p>用法：ifnull（数据，被当作哪一个值）</p><p><em>如果“数据”为null时，把这个数据当作哪一个值。</em></p><p>eg：计算每个员工的年薪？</p><p>年薪&#x3D;（月薪+月补助）*12；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select ename,(sal+ifnull(comm,0))*12 as &quot;年薪&quot; from emp;<br>+--------+----------+<br>| ename  | 年薪     |<br>+--------+----------+<br>| SMITH  |  9600.00 |<br>| ALLEN  | 22800.00 |<br>| WARD   | 21000.00 |<br>| JONES  | 35700.00 |<br>| MARTIN | 31800.00 |<br>| BLAKE  | 34200.00 |<br>| CLARK  | 29400.00 |<br>| SCOTT  | 36000.00 |<br>| KING   | 60000.00 |<br>| TURNER | 18000.00 |<br>| ADAMS  | 13200.00 |<br>| JAMES  | 11400.00 |<br>| FORD   | 36000.00 |<br>| MILLER | 15600.00 |<br>+--------+----------+<br>14 rows in set (0.001 sec)<br><br></code></pre></td></tr></table></figure><h3 id="case…when…then…when-then-else…end…"><a href="#case…when…then…when-then-else…end…" class="headerlink" title="case…when…then…when..then..else…end…"></a>case…when…then…when..then..else…end…</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select ename,job,(case job when &quot;MANAGER&quot; then sal*1.1 else sal end) as new from emp;<br>+--------+-----------+---------+<br>| ename  | job       | new     |<br>+--------+-----------+---------+<br>| SMITH  | CLERK     |  800.00 |<br>| ALLEN  | SALESMAN  | 1600.00 |<br>| WARD   | SALESMAN  | 1250.00 |<br>| JONES  | MANAGER   | 3272.50 |<br>| MARTIN | SALESMAN  | 1250.00 |<br>| BLAKE  | MANAGER   | 3135.00 |<br>| CLARK  | MANAGER   | 2695.00 |<br>| SCOTT  | ANALYST   | 3000.00 |<br>| KING   | PRESIDENT | 5000.00 |<br>| TURNER | SALESMAN  | 1500.00 |<br>| ADAMS  | CLERK     | 1100.00 |<br>| JAMES  | CLERK     |  950.00 |<br>| FORD   | ANALYST   | 3000.00 |<br>| MILLER | CLERK     | 1300.00 |<br>+--------+-----------+---------+<br>14 rows in set (0.001 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql day05</title>
    <link href="/2023/10/29/mysql-day05/"/>
    <url>/2023/10/29/mysql-day05/</url>
    
    <content type="html"><![CDATA[<h1 id="关于排序"><a href="#关于排序" class="headerlink" title="关于排序"></a>关于排序</h1><h4 id="1-查询所有员工薪资，排序？"><a href="#1-查询所有员工薪资，排序？" class="headerlink" title="1.查询所有员工薪资，排序？"></a>1.查询所有员工薪资，排序？</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select ename,sal from emp order by sal;<br>+--------+---------+<br>| ename  | sal     |<br>+--------+---------+<br>| SMITH  |  800.00 |<br>| JAMES  |  950.00 |<br>| ADAMS  | 1100.00 |<br>| WARD   | 1250.00 |<br>| MARTIN | 1250.00 |<br>| MILLER | 1300.00 |<br>| TURNER | 1500.00 |<br>| ALLEN  | 1600.00 |<br>| CLARK  | 2450.00 |<br>| BLAKE  | 2850.00 |<br>| JONES  | 2975.00 |<br>| FORD   | 3000.00 |<br>| SCOTT  | 3000.00 |<br>| KING   | 5000.00 |<br>+--------+---------+<br>14 rows in set (0.000 sec)<br></code></pre></td></tr></table></figure><p><strong>默认是升序！！！</strong></p><p><strong>Ps：asc 指定升序！</strong></p><p><em><strong>（asc ：上升，升高，升序）</strong></em></p><h4 id="2-降序？"><a href="#2-降序？" class="headerlink" title="2.降序？"></a>2.降序？</h4><p><strong>指定降序：desc</strong></p><p><em><strong>（desc：descend 下降，下来，降序）</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select ename,sal from emp order by sal desc;<br>+--------+---------+<br>| ename  | sal     |<br>+--------+---------+<br>| KING   | 5000.00 |<br>| SCOTT  | 3000.00 |<br>| FORD   | 3000.00 |<br>| JONES  | 2975.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| ALLEN  | 1600.00 |<br>| TURNER | 1500.00 |<br>| MILLER | 1300.00 |<br>| MARTIN | 1250.00 |<br>| WARD   | 1250.00 |<br>| ADAMS  | 1100.00 |<br>| JAMES  |  950.00 |<br>| SMITH  |  800.00 |<br>+--------+---------+<br>14 rows in set (0.001 sec)<br></code></pre></td></tr></table></figure><h1 id="多个字段排序"><a href="#多个字段排序" class="headerlink" title="多个字段排序"></a>多个字段排序</h1><h4 id="1-可以两个字段，或者说按照多个字段排序吗？"><a href="#1-可以两个字段，或者说按照多个字段排序吗？" class="headerlink" title="1.可以两个字段，或者说按照多个字段排序吗？"></a>1.可以两个字段，或者说按照多个字段排序吗？</h4><p>查询员工名字和薪资，要求按照薪资升序，如果薪资一样的话，再按照名字升序排列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select ename,sal from emp order by sal asc,ename asc;<br>+--------+---------+<br>| ename  | sal     |<br>+--------+---------+<br>| SMITH  |  800.00 |<br>| JAMES  |  950.00 |<br>| ADAMS  | 1100.00 |<br>| MARTIN | 1250.00 |<br>| WARD   | 1250.00 |<br>| MILLER | 1300.00 |<br>| TURNER | 1500.00 |<br>| ALLEN  | 1600.00 |<br>| CLARK  | 2450.00 |<br>| BLAKE  | 2850.00 |<br>| JONES  | 2975.00 |<br>| FORD   | 3000.00 |<br>| SCOTT  | 3000.00 |<br>| KING   | 5000.00 |<br>+--------+---------+<br>14 rows in set (0.001 sec)<br>//起主导作用的是前面的字段，如果前面字段情况相同，则执行后面的字段。<br></code></pre></td></tr></table></figure><h4 id="根据字段位置排序"><a href="#根据字段位置排序" class="headerlink" title="根据字段位置排序"></a>根据字段位置排序</h4><p>了解：根据字段的位置也可以排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select ename,sal from emp order by 2;<br>+--------+---------+<br>| ename  | sal     |<br>+--------+---------+<br>| SMITH  |  800.00 |<br>| JAMES  |  950.00 |<br>| ADAMS  | 1100.00 |<br>| WARD   | 1250.00 |<br>| MARTIN | 1250.00 |<br>| MILLER | 1300.00 |<br>| TURNER | 1500.00 |<br>| ALLEN  | 1600.00 |<br>| CLARK  | 2450.00 |<br>| BLAKE  | 2850.00 |<br>| JONES  | 2975.00 |<br>| FORD   | 3000.00 |<br>| SCOTT  | 3000.00 |<br>| KING   | 5000.00 |<br>+--------+---------+<br>14 rows in set (0.001 sec)<br></code></pre></td></tr></table></figure><p>在上述代码块中，2表示第二列，第二列是sal。</p><p>按照查询结果的第二列sal进行排序。</p><p>（仅供了解，不建议在开发中这样写。因为列的顺序很容易发生改变）</p><h4 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h4><p>找出工资在1250到3000之间的员工信息，要求按照薪资降序排列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select ename,sal from emp where sal between 1250 and 3000 order by sal desc;<br>+--------+---------+<br>| ename  | sal     |<br>+--------+---------+<br>| FORD   | 3000.00 |<br>| SCOTT  | 3000.00 |<br>| JONES  | 2975.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| ALLEN  | 1600.00 |<br>| TURNER | 1500.00 |<br>| MILLER | 1300.00 |<br>| MARTIN | 1250.00 |<br>| WARD   | 1250.00 |<br>+--------+---------+<br>10 rows in set (0.001 sec)<br></code></pre></td></tr></table></figure><p>以上语句的执行顺序必须掌握：</p><p>​第一步：from</p><p>​第二步：where</p><p>​第三步：select</p><p>​第四步：order by（排序总是在最后执行！）</p>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于运算符</title>
    <link href="/2023/10/26/%E5%85%B3%E4%BA%8E%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/10/26/%E5%85%B3%E4%BA%8E%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="关于运算符"><a href="#关于运算符" class="headerlink" title="关于运算符"></a>关于运算符</h1><h2 id="一-算数运算符"><a href="#一-算数运算符" class="headerlink" title="一.算数运算符"></a>一.算数运算符</h2><h3 id="一-赋值符号"><a href="#一-赋值符号" class="headerlink" title="一.赋值符号"></a>一.赋值符号</h3><p>赋值符号：”&#x3D;“</p><p>关键知识点：先看右侧，再看左侧，把右侧的值赋值给左侧的变量。</p><h3 id="二-算数运算符"><a href="#二-算数运算符" class="headerlink" title="二.算数运算符"></a>二.算数运算符</h3><h4 id="1-基本定义"><a href="#1-基本定义" class="headerlink" title="1.基本定义"></a>1.基本定义</h4><p>包括加（+），减（-），乘（x），除（&#x2F;），取余（%）。</p><p><strong>用自己计算，先算右侧结果，再赋值给左侧变量。</strong></p><p><strong>连续运算，先算右侧的结果，再赋值给左侧变量。</strong></p><p><strong>初始化时就运算，先算右侧结果，再赋值给左侧变量。</strong></p><h4 id="2-优先级"><a href="#2-优先级" class="headerlink" title="2.优先级"></a>2.优先级</h4><p>优先级是指在混合运算时的运算顺序</p><p>乘除取余优先级高于加减</p><p>括号可以改变优先级，优先计算括号内的内容</p><p>多组括号先算最里面的括号，依次往外算。</p><h4 id="3-算数运算符的复合运算符"><a href="#3-算数运算符的复合运算符" class="headerlink" title="3.算数运算符的复合运算符"></a>3.算数运算符的复合运算符</h4><p>固定写法 运算符+&#x3D;</p><p>+&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;</p><p>复合运算符是用于自己&#x3D;自己运算的</p><h4 id="4-算数运算符的自增减"><a href="#4-算数运算符的自增减" class="headerlink" title="4.算数运算符的自增减"></a>4.算数运算符的自增减</h4><p>a++ 先用再加</p><p>++a 先加再用</p><h2 id="二-字符串拼接"><a href="#二-字符串拼接" class="headerlink" title="二.字符串拼接"></a>二.字符串拼接</h2><h3 id="一-字符串拼接方式1"><a href="#一-字符串拼接方式1" class="headerlink" title="一.字符串拼接方式1"></a>一.字符串拼接方式1</h3><p>在之前的算数运算符中，只是用数值类型变量进行数学运算的。</p><p>而string类型不存在算数运算符，因此无法计算，<strong>但是</strong>可以通过+号来进行字符串拼接。<em>（有且仅有加号）</em></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> str=<span class="hljs-string">&quot;123&quot;</span>;<br>str=str+<span class="hljs-string">&quot;456&quot;</span>+<span class="hljs-literal">true</span>;<br><span class="hljs-comment">//用加号进行字符串拼接。</span><br><span class="hljs-comment">//输出123456true。</span><br>str=str+<span class="hljs-number">1</span>;<br><span class="hljs-comment">//注意，此处也不是在进行计算，1会通过tostring函数自动进行转换。</span><br><span class="hljs-comment">//str也可以用+=。</span><br>str+=<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span>+<span class="hljs-number">4</span>;<br>str+=<span class="hljs-string">&quot;&quot;</span>(空字符串)+<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-number">3</span>+<span class="hljs-number">4</span>;<br><span class="hljs-comment">//两者有不同，第一个是先执行加法，算出来10的总和再进行str字符串拼接运算</span><br><span class="hljs-comment">//第二个由于先加了一个空字符串，因此后面的1，2，3，4就会按照str字符串拼接来进行运算，算出来1234.</span><br>str+=<span class="hljs-number">1</span>+<span class="hljs-number">2</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-number">3</span>+<span class="hljs-number">4</span>;<br><span class="hljs-comment">//和上面同样，从左到右，先1+2=3，之后再进行拼接，得出334.</span><br></code></pre></td></tr></table></figure><h3 id="二-字符串拼接方式2（很好用！！！！！）"><a href="#二-字符串拼接方式2（很好用！！！！！）" class="headerlink" title="二.字符串拼接方式2（很好用！！！！！）"></a>二.字符串拼接方式2（很好用！！！！！）</h3><h5 id="1-固定语法"><a href="#1-固定语法" class="headerlink" title="1.固定语法"></a>1.固定语法</h5><p>string.Format(“待拼接的内容”,内容1，内容2，。。。。。);</p><h5 id="2-拼接内容中的固定规则"><a href="#2-拼接内容中的固定规则" class="headerlink" title="2.拼接内容中的固定规则"></a>2.拼接内容中的固定规则</h5><p>想要被拼接的内容用占位符替代{数字} 数字：0~n，依次往后。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> str2;<br>str2 = <span class="hljs-built_in">string</span>.Format(<span class="hljs-string">&quot;我是&#123;0&#125;，我今年&#123;1&#125;岁，我想要&#123;2&#125;&quot;</span>,<span class="hljs-string">&quot;大帅哥&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;好好学习，天天向上&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="三-控制台打印"><a href="#三-控制台打印" class="headerlink" title="三.控制台打印"></a>三.控制台打印</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#">Console.WriteLine(<span class="hljs-string">&quot;我是&#123;0&#125;，我今年&#123;1&#125;岁，我想要&#123;2&#125;&quot;</span>,<span class="hljs-string">&quot;大帅哥&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;好好学习，天天向上&quot;</span>);<br><span class="hljs-comment">//WriteLine的功能和string.Format的功能类似。</span><br></code></pre></td></tr></table></figure><p><em>Ps:占位符没有从0开始写也会报错，内容比占位符少也会报错。</em></p><h2 id="三-条件运算符"><a href="#三-条件运算符" class="headerlink" title="三.条件运算符"></a>三.条件运算符</h2><h3 id="一-条件运算符的基本应用"><a href="#一-条件运算符的基本应用" class="headerlink" title="一.条件运算符的基本应用"></a>一.条件运算符的基本应用</h3><p>用于比较两个变量或者常量。像是&gt;,&lt;,&#x3D;&#x3D;,!&#x3D;,&gt;&#x3D;,&lt;&#x3D;之类。</p><p>条件运算符一定存在左右两边的内容，左边内容+条件运算符+右边内容。</p><p>注意：条件运算符不能直接使用，如果是纯比较不用结果的话，那么对于我们来说，没有任何的意义。 </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> a=<span class="hljs-number">5</span>;<br><span class="hljs-built_in">int</span> b=<span class="hljs-number">6</span>;<br>a&gt;b;<br><span class="hljs-comment">//单纯这样比较会报错的。</span><br><span class="hljs-built_in">bool</span> result=a&gt;b;<br><span class="hljs-comment">//这样不会报错。返回false。</span><br>result=a==b;<br>result=a&gt;=b;<br></code></pre></td></tr></table></figure><p>比较的结果是返回一个bool类型的值，true和false，如果满足条件，返回true，否则返回false。</p><h3 id="二-各种应用写法"><a href="#二-各种应用写法" class="headerlink" title="二.各种应用写法"></a>二.各种应用写法</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> a=<span class="hljs-number">5</span>;<br><span class="hljs-built_in">int</span> b=<span class="hljs-number">10</span>;<br><span class="hljs-built_in">bool</span> result =a&lt;b;<br><span class="hljs-comment">//变量与变量比较</span><br>result= a&lt;<span class="hljs-number">10</span>;<br><span class="hljs-comment">//变量与数值（常量）比较。</span><br>result =<span class="hljs-number">5</span>&gt;<span class="hljs-number">3</span>;<br><span class="hljs-comment">//数值和数值比较</span><br>result=a+<span class="hljs-number">3</span>&gt;a<span class="hljs-number">-3</span><br><span class="hljs-comment">//计算结果比较</span><br></code></pre></td></tr></table></figure><p><em><strong>由上式子可知，条件运算符的优先级低于算数运算符。</strong></em></p><p><em><strong>要判断一个变量是否在两个数之间，要结合逻辑运算符的知识点</strong></em></p><h3 id="三-不同类型的比较"><a href="#三-不同类型的比较" class="headerlink" title="三.不同类型的比较"></a>三.不同类型的比较</h3><p>不同数值类型之间可以随意进行条件运算符的比较。</p><p><strong>特殊类型char string bool</strong> 只能同类型进行&#x3D;&#x3D;和!&#x3D;比较。</p><p><em>（char可以和int类型等数值类型比较，此时char会转换成数值类型即ASCII码进行比较。）</em></p><h2 id="四-逻辑运算符"><a href="#四-逻辑运算符" class="headerlink" title="四.逻辑运算符"></a>四.逻辑运算符</h2><p>对bool类型进行逻辑运算。</p><h3 id="一-逻辑与"><a href="#一-逻辑与" class="headerlink" title="一.逻辑与"></a>一.逻辑与</h3><p>符号 &amp;&amp; 并且</p><p>规则：对两个bool值进行逻辑运算，有假则假，同真为真。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">bool</span> result=<span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-literal">false</span>;<br>result= <span class="hljs-number">3</span>&gt;<span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">1</span>&lt;<span class="hljs-number">2</span>;<br><span class="hljs-comment">//适用类型 bool类型以及条件运算符。</span><br><span class="hljs-comment">//逻辑运算符的优先级低于条件运算符，算数运算。</span><br></code></pre></td></tr></table></figure><h3 id="二-逻辑或"><a href="#二-逻辑或" class="headerlink" title="二.逻辑或"></a>二.逻辑或</h3><p>符号 || 或者</p><p>规则：对两个bool值进行逻辑运算，有真则真，同假为假。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">bool</span> result=<span class="hljs-literal">true</span> || <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">bool</span> a=<span class="hljs-number">3</span>&gt;<span class="hljs-number">2</span> || <span class="hljs-number">2</span>&gt;<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="三-逻辑非"><a href="#三-逻辑非" class="headerlink" title="三.逻辑非"></a>三.逻辑非</h3><p>符号 ! 不是</p><p>规则 对一个bool值进行取反,真变假,假变真.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">bool</span> result=!<span class="hljs-literal">true</span>;<br>result = !(<span class="hljs-number">3</span>&gt;<span class="hljs-number">1</span>);<br>result = !!<span class="hljs-literal">true</span>;<br><span class="hljs-comment">//逻辑非的优先级较高.</span><br></code></pre></td></tr></table></figure><h3 id="四-混合使用优先级问题"><a href="#四-混合使用优先级问题" class="headerlink" title="四.混合使用优先级问题"></a>四.混合使用优先级问题</h3><p>规则***:!(逻辑非)优先级最高,&amp;&amp;(逻辑与)优先级高于||(逻辑或).***</p><p>逻辑运算符优先级<strong>低于</strong>算数运算符和条件运算符.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">bool</span> gameOver =<span class="hljs-literal">false</span>;<br><span class="hljs-built_in">int</span> hp=<span class="hljs-number">100</span>;<br><span class="hljs-built_in">bool</span> isDead = <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">bool</span> isMustOver =<span class="hljs-literal">true</span>;<br><span class="hljs-built_in">bool</span> result =gameOver || hp&lt;<span class="hljs-number">0</span> &amp;&amp;  isDead ||isMustOver;<br>Console.WriteLine(result);<br></code></pre></td></tr></table></figure><h3 id="五-逻辑运算符短路规则（容易被忽视，多看看）"><a href="#五-逻辑运算符短路规则（容易被忽视，多看看）" class="headerlink" title="五.逻辑运算符短路规则（容易被忽视，多看看）"></a>五.逻辑运算符短路规则（容易被忽视，多看看）</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> i2=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">bool</span> result=i2&gt;<span class="hljs-number">0</span> || ++<span class="hljs-number">3</span>&gt;=<span class="hljs-number">1</span>;<br>Console.WriteLine(i2);<br><span class="hljs-comment">//i2仍然是1.</span><br><span class="hljs-comment">//只要逻辑与或者逻辑或左边满足了条件,右边就不计算了,被短路了.</span><br><span class="hljs-comment">//即++3&gt;=1不用算了. </span><br></code></pre></td></tr></table></figure><h2 id="五-位运算符"><a href="#五-位运算符" class="headerlink" title="五.位运算符"></a>五.位运算符</h2><p>位运算符 主要用数值类型进行计算.</p><p>将数值转换位2进制,再进行位运算.</p><h3 id="一-位与"><a href="#一-位与" class="headerlink" title="一.位与 &amp;"></a>一.位与 &amp;</h3><p>规则:连接两个数值进行位运算,将数值转换为2进制</p><p><strong>对位运算,有0则0.</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> a=<span class="hljs-number">1</span>;<span class="hljs-comment">//二进制001</span><br><span class="hljs-built_in">int</span> b=<span class="hljs-number">5</span>;<span class="hljs-comment">//二进制101</span><br>a &amp; b;<br><span class="hljs-comment">//会报错,结果必须要使用.</span><br><span class="hljs-built_in">int</span> c= a &amp; b;<br><span class="hljs-comment">//相当于 001</span><br><span class="hljs-comment">// &amp;    101</span><br><span class="hljs-comment">//      001</span><br><span class="hljs-comment">//第一位都是1,输出1,第二位都是0,输出0,第三位有一个0,输出0.</span><br><span class="hljs-comment">//因此c=1.</span><br></code></pre></td></tr></table></figure><p><em><strong>多个数值进行位运算时,没有括号时,从左到右,依次计算</strong></em></p><h3 id="二-位或"><a href="#二-位或" class="headerlink" title="二.位或 |"></a>二.位或 |</h3><p>规则:连接两个数值进行位运算,将数值转换为2进制</p><p><strong>对位运算,有1则1.</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> a=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">int</span> b=<span class="hljs-number">1</span>;<br>c=a|b;<br><span class="hljs-comment">//和位与差不多,不解释了.</span><br></code></pre></td></tr></table></figure><h3 id="三-异或"><a href="#三-异或" class="headerlink" title="三.异或 ^"></a>三.异或 ^</h3><p>规则:连接两个数值进行位运算,将数值转换为2进制</p><p><strong>对位运算,相同为0,不同为1.</strong></p><h3 id="四-位取反"><a href="#四-位取反" class="headerlink" title="四.位取反 ~"></a>四.位取反 ~</h3><p><strong>规则:写在数值前面,将数值转为二进制</strong></p><p><strong>对位运算,0变成1,1变成0.</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> a=<span class="hljs-number">5</span>;<br><span class="hljs-built_in">int</span> c=~a;<br><span class="hljs-comment">// 将完整的int0变成1,1变成0,要注意!!!</span><br></code></pre></td></tr></table></figure><h3 id="五-左移"><a href="#五-左移" class="headerlink" title="五.左移&lt;&lt;和右移&gt;&gt;"></a>五.左移&lt;&lt;和右移&gt;&gt;</h3><p><strong>规则:让一个数的2进制数进行左移和右移.</strong></p><p><strong>左移几位,右侧加几个0</strong></p><p><strong>右移几位,右侧去掉几个0.</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> a=<span class="hljs-number">5</span>;<span class="hljs-comment">//101</span><br>c=a &lt;&lt;<span class="hljs-number">5</span>;<span class="hljs-comment">//10100000</span><br><span class="hljs-comment">//c=160;</span><br><span class="hljs-comment">//左移几位,右侧加几个0.</span><br>a=<span class="hljs-number">5</span>;<span class="hljs-comment">//101</span><br>c=a &gt;&gt;<span class="hljs-number">2</span>;<br><span class="hljs-comment">//c=1;</span><br><span class="hljs-comment">//右移几位,右侧去掉几个数字.</span><br></code></pre></td></tr></table></figure><h2 id="六-三目运算符"><a href="#六-三目运算符" class="headerlink" title="六.三目运算符"></a>六.三目运算符</h2><p>套路：3个空位，2个符号</p><p>固定语法：空位 ？空位：空位；</p><p>关键信息：bool类型？bool类型为真返回内容：bool类型为假返回内容。</p><p>三目运算符会有返回值，这个返回值必须一致，<strong>并且必须使用！</strong></p><p><strong>具体使用</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> str =<span class="hljs-literal">true</span> ? <span class="hljs-string">&quot;条件为真&quot;</span>:<span class="hljs-string">&quot;条件为假&quot;</span>;<br>Console.WriteLine(str);<br><span class="hljs-comment">//输出条件为真。</span><br><span class="hljs-built_in">int</span> a=<span class="hljs-number">5</span>;<br>str= a&lt;<span class="hljs-number">1</span> ?<span class="hljs-string">&quot;a大于1&quot;</span>:<span class="hljs-string">&quot;a不满足条件&quot;</span>;<br>Console.WriteLine(str);<br><span class="hljs-comment">//输出a不满足条件。</span><br><span class="hljs-built_in">int</span> i=a&gt;<span class="hljs-number">1</span>?<span class="hljs-number">123</span>:<span class="hljs-number">234</span>;<br><span class="hljs-comment">//i=123;</span><br></code></pre></td></tr></table></figure><p>综上所述：第一个空位，始终是结果为bool类型的表达式&#x2F;bool变量&#x2F;条件表达式&#x2F;逻辑运算表达式。</p><p>第二三个空位：什么表达式都可以，只要保证它们的结果类型是一致的。</p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>异常捕获</title>
    <link href="/2023/10/26/%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/"/>
    <url>/2023/10/26/%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="关于异常捕获"><a href="#关于异常捕获" class="headerlink" title="关于异常捕获"></a>关于异常捕获</h1><h2 id="一-作用"><a href="#一-作用" class="headerlink" title="一.作用"></a>一.作用</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> str=Console.ReadLine();<br><span class="hljs-comment">//将玩家输入的内容存储string类型的变量（容器）中。</span><br><span class="hljs-built_in">int</span> i=<span class="hljs-built_in">int</span>.Parse(str);<br><span class="hljs-comment">//Parse转字符串为数值类型时，必须要合法合规。如果你字符串输入中文，可能就不合法了。（报错）</span><br></code></pre></td></tr></table></figure><p>通过对异常捕获的学习，可以避免当代码报错时，造成程序卡死的情况。</p><h2 id="二-基本语法"><a href="#二-基本语法" class="headerlink" title="二.基本语法"></a>二.基本语法</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">//try与catch为必备部分</span><br><span class="hljs-keyword">try</span><br>&#123;<br>    <span class="hljs-comment">//代码块内容：希望进行异常捕获的代码块(即你认为可能会报错的代码)放到try中</span><br>    <span class="hljs-comment">//如果try中的代码报错了，不会让程序卡死。而是会转到catch.</span><br>&#125;<span class="hljs-keyword">catch</span><br>&#123;<br>    <span class="hljs-comment">//如果出错了，会执行catch中的代码，来捕获异常。</span><br>    <span class="hljs-comment">//catch（Exception e)(当代码出错，会进行具体报错跟踪，通过e得到具体的错误信息。)</span><br>&#125;<br><span class="hljs-comment">//可选部分</span><br><span class="hljs-keyword">finally</span><br>&#123;<br>    <span class="hljs-comment">//最后执行的代码，不管有没有出错，都会执行其中的代码</span><br>    <span class="hljs-comment">//目前可以不用写，等到之后的模块再进一步补充。</span><br>&#125;<br><span class="hljs-comment">//注意：异常捕获代码基本结构中不需要加;在里面去写代码逻辑时，每一句代码才要加。</span><br></code></pre></td></tr></table></figure><h2 id="三-具体实践"><a href="#三-具体实践" class="headerlink" title="三.具体实践"></a>三.具体实践</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-built_in">string</span> str=Console.ReadLine();<br>    <span class="hljs-built_in">int</span> i=<span class="hljs-built_in">int</span>.Parse(str);<br>    Console.WriteLine(i);<br>&#125;<br><span class="hljs-keyword">catch</span>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;请输入合法数字:&quot;</span>);<br>&#125;<span class="hljs-keyword">finally</span><br>&#123;<br>    Console.WriteLine(<span class="hljs-string">&quot;执行完毕&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果输入合法数字（int类型能放的数字），就会直接输出i的数字。‘</p><p>输入不合法的数字（eg：中文等等），会执行catch块中的代码，打印出WriteLine（）的内容。</p><p>程序不会卡死了。</p><p><em>finally模块无论什么时候都会输出（目前的功能是这样的，后期会进一步学习）。</em></p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql day04</title>
    <link href="/2023/10/24/mysql-day04/"/>
    <url>/2023/10/24/mysql-day04/</url>
    
    <content type="html"><![CDATA[<h1 id="列起别名"><a href="#列起别名" class="headerlink" title="列起别名"></a>列起别名</h1><h3 id="给查询的列起别名？"><a href="#给查询的列起别名？" class="headerlink" title="给查询的列起别名？"></a>给查询的列起别名？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt;select deptno,dname as deptname from dept;（对deptno只查询，对dname才起别名）<br>+--------+------------+<br>| deptno | deptname   |<br>+--------+------------+<br>|     10 | ACCOUNTING |<br>|     20 | RESEARCH   |<br>|     30 | SALES      |<br>|     40 | OPERATIONS |<br>+--------+------------+<br>4 rows in set (0.001 sec)<br></code></pre></td></tr></table></figure><p>使用as关键字起别名，as为alias(别名)的缩写。<em>as可以用空格代替。</em></p><p><em>注意：只是将显示的查询结果列名显示为deptname，原表列名不变</em></p><p><em>记住：select语句永远都不会进行修改操作，因为它的功能只负责查询。</em></p><h3 id="假设起别名的时候，别名里面有空格怎么办？"><a href="#假设起别名的时候，别名里面有空格怎么办？" class="headerlink" title="假设起别名的时候，别名里面有空格怎么办？"></a>假设起别名的时候，别名里面有空格怎么办？</h3><p><strong>mysql &gt;select deptno,dname  dept name from dept;</strong></p><p>DBMS看到这样的语句，进行SQL语句的编译的时候，不符合语法，编译错误。</p><p>怎么解决？</p><p><strong>加引号</strong></p><p> <strong>mysql &gt;select deptno,dname  “dept name” from dept;</strong></p><p><em>注意：在所有的数据库中，字符串统一使用单引号括起来，单引号是标准，双引号在oracle数据库中用不了，但是在mysql中可以使用。</em></p><p><em>Ps：使用中文命名时要使用单引号括起来。</em></p><h1 id="列参与数学运算"><a href="#列参与数学运算" class="headerlink" title="列参与数学运算"></a>列参与数学运算</h1><h3 id="计算员工年薪？"><a href="#计算员工年薪？" class="headerlink" title="计算员工年薪？"></a>计算员工年薪？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt; select ename,sal from emp;<br>+--------+---------+<br>| ename  | sal     |<br>+--------+---------+<br>| SMITH  |  800.00 |<br>| ALLEN  | 1600.00 |<br>| WARD   | 1250.00 |<br>| JONES  | 2975.00 |<br>| MARTIN | 1250.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| SCOTT  | 3000.00 |<br>| KING   | 5000.00 |<br>| TURNER | 1500.00 |<br>| ADAMS  | 1100.00 |<br>| JAMES  |  950.00 |<br>| FORD   | 3000.00 |<br>| MILLER | 1300.00 |<br>+--------+---------+<br>14 rows in set (0.001 sec)<br>//先查看员工薪资。<br> mysql &gt;select ename,sal*12 from emp;<br>+--------+----------+<br>| ename  | sal*12   |<br>+--------+----------+<br>| SMITH  |  9600.00 |<br>| ALLEN  | 19200.00 |<br>| WARD   | 15000.00 |<br>| JONES  | 35700.00 |<br>| MARTIN | 15000.00 |<br>| BLAKE  | 34200.00 |<br>| CLARK  | 29400.00 |<br>| SCOTT  | 36000.00 |<br>| KING   | 60000.00 |<br>| TURNER | 18000.00 |<br>| ADAMS  | 13200.00 |<br>| JAMES  | 11400.00 |<br>| FORD   | 36000.00 |<br>| MILLER | 15600.00 |<br>+--------+----------+<br>14 rows in set (0.001 sec)<br></code></pre></td></tr></table></figure><p><strong>结论：字段可以使用数字表达式</strong></p><h1 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h1><h2 id="什么是条件查询？"><a href="#什么是条件查询？" class="headerlink" title="什么是条件查询？"></a>什么是条件查询？</h2><p>不是将表中的所有数据都查出来，是查询出来符合条件的。</p><p><strong>语法格式：</strong></p><p><strong>select</strong> ….字段1，字段2，字段3…<strong>from</strong> 表名 <strong>where</strong> 条件;</p><p>条件查询需要用到where语句，where必须放到from语句表的后面。</p><table><thead><tr><th>运算符</th><th align="left">说明</th></tr></thead><tbody><tr><td>&#x3D;</td><td align="left">等于</td></tr><tr><td>&lt;&gt;或者！&#x3D;</td><td align="left">不等于</td></tr><tr><td>&lt;</td><td align="left">小于</td></tr><tr><td>&lt;&#x3D;</td><td align="left">小于等于</td></tr><tr><td>&gt;</td><td align="left">大于</td></tr><tr><td>&gt;&#x3D;</td><td align="left">大于等于</td></tr><tr><td>between…and…</td><td align="left">两个值之间，等同于&gt;&#x3D; and &lt;&#x3D;<em>（左小右大）（闭区间）</em></td></tr><tr><td>is null</td><td align="left">为null<em>（is not null 不为空)</em></td></tr><tr><td>and</td><td align="left">并且</td></tr><tr><td>or</td><td align="left">或者</td></tr><tr><td>in</td><td align="left">包含，相当于多个or<em>（not in 不在这个范围中）</em></td></tr><tr><td>not</td><td align="left">not 可以取非，主要用在is或者in中</td></tr><tr><td>like</td><td align="left">like成为模糊查询，支持%或者下划线匹配，                          %匹配任意给字符，                                                                                      下划线，一个下划线只匹配一个字符。</td></tr></tbody></table><p>具体方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select EMPNO from emp where EMPNO&gt;7900;<br>+-------+<br>| EMPNO |<br>+-------+<br>|  7902 |<br>|  7934 |<br>+-------+<br>//查询编号大于7900的员工编号。<br>2 rows in set (0.001 sec)MariaDB [hello]&gt; select ename,empno from emp where sal&gt;790;<br>+--------+-------+<br>| ename  | empno |<br>+--------+-------+<br>| SMITH  |  7369 |<br>| ALLEN  |  7499 |<br>| WARD   |  7521 |<br>| JONES  |  7566 |<br>| MARTIN |  7654 |<br>| BLAKE  |  7698 |<br>| CLARK  |  7782 |<br>| SCOTT  |  7788 |<br>| KING   |  7839 |<br>| TURNER |  7844 |<br>| ADAMS  |  7876 |<br>| JAMES  |  7900 |<br>| FORD   |  7902 |<br>| MILLER |  7934 |<br>+--------+-------+<br>14 rows in set (0.001 sec)<br>//查询工资大于790的员工姓名和编号。<br>MariaDB [hello]&gt; select ename empno from emp where comm is null;<br>+--------+<br>| empno  |<br>+--------+<br>| SMITH  |<br>| JONES  |<br>| BLAKE  |<br>| CLARK  |<br>| SCOTT  |<br>| KING   |<br>| ADAMS  |<br>| JAMES  |<br>| FORD   |<br>| MILLER |<br>+--------+<br>//无补助员工名单<br></code></pre></td></tr></table></figure><p>注意：在数据库中null不能使用等号进行衡量。需要使用is null，因为数据库中的<strong>null代表什么也没有</strong>，它不是一个值，所以不能使用等号衡量。</p><p><strong>and和or同时出现的话，有优先级问题吗</strong>？</p><p>and优先级比or高！！！语句会先执行and之后执行or。</p><p><em>解决方案：加括号！</em></p><p><strong>in的用法：</strong></p><p>in（’a’，’b’）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select JOB,ename from emp where job in (&#x27;CLERK&#x27;,&#x27;ANALYST&#x27;);<br>+---------+--------+<br>| JOB     | ename  |<br>+---------+--------+<br>| CLERK   | SMITH  |<br>| ANALYST | SCOTT  |<br>| CLERK   | ADAMS  |<br>| CLERK   | JAMES  |<br>| ANALYST | FORD   |<br>| CLERK   | MILLER |<br>+---------+--------+<br>6 rows in set (0.001 sec)<br>//查询工作是分析师和文员的工作人员，用in语句。<br></code></pre></td></tr></table></figure><p><em><strong>注意：in不是一个区间，in后面跟的是一个具体的值。</strong></em></p><p><strong>关于like</strong></p><p>​称为模糊查询，支持%或下划线匹配。</p><p>​%匹配任意个字符</p><p>​下划线，一个下划线只匹配一个字符</p><p>（%是一个特殊符号，_也是一个特殊符号）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [hello]&gt; select ename from emp where ename like &#x27;%o%&#x27;;<br>+-------+<br>| ename |<br>+-------+<br>| JONES |<br>| SCOTT |<br>| FORD  |<br>+-------+<br>3 rows in set (0.000 sec)<br>//查询名字里面有o的人名。<br>MariaDB [hello]&gt; select ename from emp where ename like &#x27;%T&#x27;;<br>+-------+<br>| ename |<br>+-------+<br>| SCOTT |<br>+-------+<br>1 row in set (0.001 sec)<br>//查询名字后面以t结尾的人名。<br>MariaDB [hello]&gt;  select ename from emp where ename like &#x27;k%&#x27;;<br>+-------+<br>| ename |<br>+-------+<br>| KING  |<br>+-------+<br>1 row in set (0.000 sec)<br>//查询名字以k开头的人名。<br>MariaDB [hello]&gt;  select ename from emp where ename like &#x27;_A%&#x27;;<br>+--------+<br>| ename  |<br>+--------+<br>| WARD   |<br>| MARTIN |<br>| JAMES  |<br>+--------+<br>3 rows in set (0.001 sec)<br>//查询名字中第二个字母是A的人名。<br></code></pre></td></tr></table></figure><p><em>注意：找出名字中有下划线的</em></p><p><strong>select name from t_student where like ‘%\_%’;</strong></p><p><strong>使用转义字符让下划线保留。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql day03</title>
    <link href="/2023/10/22/mysql-day03/"/>
    <url>/2023/10/22/mysql-day03/</url>
    
    <content type="html"><![CDATA[<h1 id="数据导入演示"><a href="#数据导入演示" class="headerlink" title="数据导入演示"></a>数据导入演示</h1><h3 id="1-怎么将sql文件中的数据导入呢？"><a href="#1-怎么将sql文件中的数据导入呢？" class="headerlink" title="1.怎么将sql文件中的数据导入呢？"></a><strong>1.怎么将sql文件中的数据导入呢？</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt; source+文件路径；<br>mysql &gt; show tables;<br>+-----------------+<br>| Tables_in_hello |<br>+-----------------+<br>| dept            |<br>| emp             |<br>| salgrade        |<br>+-----------------+<br>3 rows in set (0.001 sec)<br>//导入成功。<br></code></pre></td></tr></table></figure><p><em>注意：路径中不要有中文！！！</em></p><p><em>关于导入的这几张表：</em></p><p><em>dept是部门表，emp是员工表，salgrade是工资等级表。</em></p><h3 id="2-怎么查看表中的数据呢？"><a href="#2-怎么查看表中的数据呢？" class="headerlink" title="2.怎么查看表中的数据呢？"></a><strong>2.怎么查看表中的数据呢？</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> select * from 表名;//*号不是摆设，一表示所有的意思，一定要加上去。<br> +-------+--------+-----------+------+------------+---------+---------+--------+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br>NULL为空的意思。<br></code></pre></td></tr></table></figure><h1 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt; desc 表名;\\(describe的缩写，表示”描述表的结构&quot;)<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| DEPTNO | int(2)      | NO   | PRI | NULL    |       |<br>| DNAME  | varchar(14) | YES  |     | NULL    |       |<br>| LOC    | varchar(13) | YES  |     | NULL    |       |<br>+--------+-------------+------+-----+---------+-------+<br>\\varchar就是java中的string。<br></code></pre></td></tr></table></figure><h1 id="常用命令继续"><a href="#常用命令继续" class="headerlink" title="常用命令继续"></a>常用命令继续</h1><h3 id="查看mysql数据库的版本号"><a href="#查看mysql数据库的版本号" class="headerlink" title="查看mysql数据库的版本号"></a><strong>查看mysql数据库的版本号</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt; select version();<br>+-----------------+<br>| version()       |<br>+-----------------+<br>| 10.4.28-MariaDB |<br>+-----------------+<br>1 row in set (0.001 sec)<br></code></pre></td></tr></table></figure><h3 id="查看当前使用的是哪一个数据库"><a href="#查看当前使用的是哪一个数据库" class="headerlink" title="查看当前使用的是哪一个数据库"></a><strong>查看当前使用的是哪一个数据库</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt;select database();<br>+------------+<br>| database() |<br>+------------+<br>| hello      |<br>+------------+<br>1 row in set (0.000 sec)<br></code></pre></td></tr></table></figure><p><em><strong>注：mysql不见分号不执行，因此一定要记得加分号</strong></em>，<em><strong>分号表示中止。</strong></em></p><p>如果想要终止一条正在编写的语句，也可以键入\c。</p><p>如果想要退出mysql，可以用\q,QUIT,EXIT执行。</p><h1 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h1><h3 id="1-查询一个字段？"><a href="#1-查询一个字段？" class="headerlink" title="1.查询一个字段？"></a>1.查询一个字段？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt;select 字段名 from 表名;<br>+------------+<br>| dname      |<br>+------------+<br>| ACCOUNTING |<br>| RESEARCH   |<br>| SALES      |<br>| OPERATIONS |<br>+------------+<br>4 rows in set (0.001 sec)<br></code></pre></td></tr></table></figure><p><em>其中要注意：select和from都是关键字，字段名和表名都是标识符。</em></p><h3 id="2-查询两个或者多个字段？"><a href="#2-查询两个或者多个字段？" class="headerlink" title="2.查询两个或者多个字段？"></a>2.查询两个或者多个字段？</h3><p>使用逗号隔开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt;select 字段名，字段名 from 表名;<br>+--------+------------+<br>| deptno | dname      |<br>+--------+------------+<br>|     10 | ACCOUNTING |<br>|     20 | RESEARCH   |<br>|     30 | SALES      |<br>|     40 | OPERATIONS |<br>+--------+------------+<br>4 rows in set (0.001 sec)<br></code></pre></td></tr></table></figure><h3 id="3-查询所有字段？"><a href="#3-查询所有字段？" class="headerlink" title="3.查询所有字段？"></a>3.查询所有字段？</h3><p>第一种方式：可以把每一个字段都写上</p><p>第二种方式：可以使用*（参加上面）</p><p>第二种方式缺点：效率低，可读性差（看不懂欸）。</p>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql day02</title>
    <link href="/2023/10/21/mysql-day02/"/>
    <url>/2023/10/21/mysql-day02/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql-常用命令系统学习"><a href="#mysql-常用命令系统学习" class="headerlink" title="mysql 常用命令系统学习"></a>mysql 常用命令系统学习</h1><h3 id="1-退出mysql-：exit"><a href="#1-退出mysql-：exit" class="headerlink" title="1.退出mysql ：exit"></a>1.退出mysql ：<strong>exit</strong></h3><h3 id="2-查看mysql中有哪一些数据库？"><a href="#2-查看mysql中有哪一些数据库？" class="headerlink" title="2.查看mysql中有哪一些数据库？"></a>2.查看mysql中有哪一些数据库？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| phpmyadmin         |<br>| test               |<br>+--------------------+<br>5 rows in set (0.023 sec)<br></code></pre></td></tr></table></figure><p><em>注意：以分号结尾。</em></p><p>  由上图可以看出，mysql默认自带了4个数据库。</p><h3 id="3-怎么选择使用某个数据库呢？"><a href="#3-怎么选择使用某个数据库呢？" class="headerlink" title="3.怎么选择使用某个数据库呢？"></a>3.怎么选择使用某个数据库呢？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt;use test;<br>Database changed<br></code></pre></td></tr></table></figure><p>表示正在使用一个叫做test的数据库。</p><h3 id="4-怎么创建数据库呢？"><a href="#4-怎么创建数据库呢？" class="headerlink" title="4.怎么创建数据库呢？"></a>4.怎么创建数据库呢？</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">&gt;</span><span class="hljs-keyword">create</span> database hello;<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.010</span> sec)<br></code></pre></td></tr></table></figure><h3 id="5-查看某个数据库中有哪一些表（table）？"><a href="#5-查看某个数据库中有哪一些表（table）？" class="headerlink" title="5.查看某个数据库中有哪一些表（table）？"></a>5.查看某个数据库中有哪一些表（table）？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt; show tables;<br>+---------------------------+<br>| Tables_in_mysql           |<br>+---------------------------+<br>| column_stats              |<br>| columns_priv              |<br>| db                        |<br>| event                     |<br>| func                      |<br>| general_log               |<br>| global_priv               |<br>| gtid_slave_pos            |<br>| help_category             |<br>| help_keyword              |<br>| help_relation             |<br>| help_topic                |<br>| index_stats               |<br>| innodb_index_stats        |<br>| innodb_table_stats        |<br>| plugin                    |<br>| proc                      |<br>| procs_priv                |<br>| proxies_priv              |<br>| roles_mapping             |<br>| servers                   |<br>| slow_log                  |<br>| table_stats               |<br>| tables_priv               |<br>| time_zone                 |<br>| time_zone_leap_second     |<br>| time_zone_name            |<br>| time_zone_transition      |<br>| time_zone_transition_type |<br>| transaction_registry      |<br>| user                      |<br>+---------------------------+<br>31 rows in set (0.001 sec)<br></code></pre></td></tr></table></figure><p>注：以上命令不区分大小写。</p><h1 id="表的理解"><a href="#表的理解" class="headerlink" title="表的理解"></a>表的理解</h1><p> 数据库当中最基本的单元：表（table）</p><p>为什么mysql中用表来存储数据？</p><p>数据库当中是以表格的形式表示数据的，因为表比较直观。</p><p><strong>任何一张表都有行和列：</strong></p><p>​行（row）：被称为数据&#x2F;记录。</p><p>​列（column）：被成为字段。</p><p><u><em>注：每一个字段都有：字段名，数据类型，约束等属性。</em></u></p><p><u><em>字段名：普通的名字，见名知意即可。</em></u></p><p><u><em>数据类型：字符串，数字，日期等等。</em></u></p><p><u><em>约束：约束有很多，其中一个叫做唯一性约束，这种约束添加之后，该字段的数据不能重复。</em></u></p><h1 id="关于SQL的分类"><a href="#关于SQL的分类" class="headerlink" title="关于SQL的分类"></a>关于SQL的分类</h1><p>可以把 SQL 分为五个部分：数据操作语言 (DML)<em>（Data Manipulation Language）</em> ，数据定义语言 (DDL)<em>（Data Definition Language）</em>，数据查询语言(DQL)<em>（Data Query Language)</em>,数据控制语言（DCL）（<em>Data Control Language)</em>,事务控制语言(TCL) <em>(Transaction Control Language)</em></p><p>SQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。</p><p><em>SQL语句很多，最好进行分门别类，这样更容易记忆</em></p><h3 id="DQL（Data-Query-Language-："><a href="#DQL（Data-Query-Language-：" class="headerlink" title="DQL（Data Query Language)："></a>DQL（Data Query Language)：</h3><p>​数据查询语言（凡是带有select关键字的都是查询语句）</p><p>​select. . .</p><h3 id="DML（Data-Manipulation-Language）："><a href="#DML（Data-Manipulation-Language）：" class="headerlink" title="DML（Data Manipulation Language）："></a>DML（Data Manipulation Language）：</h3><p>​数据操作语言（凡是对<strong>表</strong>当中数据进行增删改的都是DML）</p><p>​<strong>insert 增</strong>   <strong>delete 删</strong>     <strong>update 改</strong></p><h3 id="DDL（Data-Definition-Language）："><a href="#DDL（Data-Definition-Language）：" class="headerlink" title="DDL（Data Definition Language）："></a>DDL（Data Definition Language）：</h3><p>​数据定义语言（凡是带有create，drop，alter的都是DDL）</p><p>​<strong>DDL主要操作的是表的结构，不是表中的数据！！！</strong></p><p>​<strong>create：新建，等同于增。</strong></p><p>​<strong>drop：删除。</strong></p><p>​<strong>alter：修改。</strong></p><p>​这个增删改和DML不同，这个主要是对表结构进行操作。</p><h3 id="TCL-Transaction-Control-Language-："><a href="#TCL-Transaction-Control-Language-：" class="headerlink" title="TCL  (Transaction Control Language)："></a>TCL  (Transaction Control Language)：</h3><p>​事务控制语言</p><p>​事务提交：commit；</p><p>​事务回滚：rollback；</p><h3 id="DCL（Data-Control-Language-："><a href="#DCL（Data-Control-Language-：" class="headerlink" title="DCL（Data Control Language)："></a>DCL（Data Control Language)：</h3><p>​是数据控制语言</p><p>​授权： grant；</p><p>​撤销权限：revoke；</p>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql day01</title>
    <link href="/2023/10/21/mysql-day01/"/>
    <url>/2023/10/21/mysql-day01/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql-day-01"><a href="#mysql-day-01" class="headerlink" title="mysql day 01"></a>mysql day 01</h1><h2 id="什么是数据库？什么是数据库管理系统？什么是SQL？它们之间的关系是什么？"><a href="#什么是数据库？什么是数据库管理系统？什么是SQL？它们之间的关系是什么？" class="headerlink" title="什么是数据库？什么是数据库管理系统？什么是SQL？它们之间的关系是什么？"></a>什么是数据库？什么是数据库管理系统？什么是SQL？它们之间的关系是什么？</h2><h3 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h3><p>​英文单词DataBase，简称DB，按照一定格式存储数据的一些文件的组合。顾名思义：存储数据的仓库，实际上就是一堆文件。这些文件中存储了具有特定格式的数据。</p><h3 id="数据库管理系统："><a href="#数据库管理系统：" class="headerlink" title="数据库管理系统："></a>数据库管理系统：</h3><p>​DataBaseManagement，简称DBMS。</p><p>​数据库管理系统是专门用来管理数据库中数据的，数据库管理系统可以对数据库当中的数据进行增删改查。</p><p>​常见的数据库管理系统：</p><p>​MYSQL,Oracle,MS SqlServer,DB2,sybase等 ….</p><h3 id="SQL-结构化查询语言"><a href="#SQL-结构化查询语言" class="headerlink" title="SQL:结构化查询语言"></a>SQL:结构化查询语言</h3><p>​程序员需要学习SQL语句，程序员通过编写SQL语句，然后DBMS负责执行SQL语句，最终来完成数据库中数据的增删改查操作。</p><p>​SQL是一套标准，程序员主要学校的就是SQL语句，这个SQL在mysql中可以使用，同时在Oracle中也可以使用，在DB2中也可以使用。</p><h4 id="三者关系："><a href="#三者关系：" class="headerlink" title="三者关系："></a>三者关系：</h4><p>​   DBMS–执行→SQL–操作→DB</p><p>​</p><h2 id="关于数据库"><a href="#关于数据库" class="headerlink" title="关于数据库"></a>关于数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">MariaDB [(none)]&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| hello              |<br>| information_schema |<br>| mysql              |<br>| performance_schema |<br>| phpmyadmin         |<br>| test               |<br>+--------------------+<br>6 rows in set (0.037 sec)<br></code></pre></td></tr></table></figure><p><em><strong>除了第一个hello数据库是自己创建的，其他都是系统自带的！</strong></em></p><p>information_schema库：是信息数据库，其中保存着关于MySQL服务器所维护的所有其他数据库的信息，比如数据库名，数据库表，表字段的数据类型，访问权限等等，在Web领域渗透过程中用途很大。</p>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>类型转换</title>
    <link href="/2023/10/21/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2023/10/21/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="关于类型转换"><a href="#关于类型转换" class="headerlink" title="关于类型转换"></a>关于类型转换</h1><h2 id="一-隐式转换"><a href="#一-隐式转换" class="headerlink" title="一.隐式转换"></a>一.隐式转换</h2><p>什么是类型转换？<br>就是不同变量类型之间的相互转换</p><p><strong>隐式转换的基本规则→不同类型之间自动切换</strong></p><h4 id="（大范围装小范围）（核心）"><a href="#（大范围装小范围）（核心）" class="headerlink" title="（大范围装小范围）（核心）"></a><strong>（大范围装小范围）（核心）</strong></h4><h3 id="1-相同大类型之间的转换"><a href="#1-相同大类型之间的转换" class="headerlink" title="1.相同大类型之间的转换"></a>1.相同大类型之间的转换</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">long</span> l=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">short</span> s=<span class="hljs-number">1</span>;<br>l=i;<br><span class="hljs-comment">//隐士转换，int隐式转换成long</span><br>i=l;<br><span class="hljs-comment">//会报错，不能用小范围的类型去装在大范围的类型。</span><br></code></pre></td></tr></table></figure><h3 id="2-不同大类型之间的转换"><a href="#2-不同大类型之间的转换" class="headerlink" title="2.不同大类型之间的转换"></a>2.不同大类型之间的转换</h3><h4 id="无符号和有符号之间"><a href="#无符号和有符号之间" class="headerlink" title="无符号和有符号之间"></a>无符号和有符号之间</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">byte</span> b2=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">sbyte</span> b1=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">int</span> b3=<span class="hljs-number">1</span>;<br>b2=b1;<br><span class="hljs-comment">//无符号不能装有符号，有符号的变量是不能够隐式转换成无符号的。</span><br>b3=b2;<br><span class="hljs-comment">//有符号装无符号，前提：有符号的变量不管是多少，都能包裹无符号变量。</span><br></code></pre></td></tr></table></figure><h4 id="浮点数装整数"><a href="#浮点数装整数" class="headerlink" title="浮点数装整数"></a>浮点数装整数</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">float</span> f2=<span class="hljs-number">1.1f</span>;<br><span class="hljs-built_in">long</span> i1=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">ulong</span> i2=<span class="hljs-number">1</span>;<br>f2=i1;<br>f2=i2;<br><span class="hljs-comment">//浮点数是可以装载任何类型的整数。</span><br></code></pre></td></tr></table></figure><p>特殊情况</p><p>char类型可以隐式转换成整型和浮点型、</p><p>char类型隐式转换成数值类型，其对应的数字其实是一个ASCII码。</p><p>string类型无法和其他类型进行隐式转换</p><h4 id="总结！！！！"><a href="#总结！！！！" class="headerlink" title="总结！！！！"></a>总结！！！！</h4><p>有符号：long→int→short→sbyte</p><p>无符号：ulong→uint→ushort→byte</p><p>浮点数：double→float</p><p><em>decimal这个类型<strong>没有办法</strong>用隐式转换的形式去存储double和float</em></p><p>double→float→整数（无符号，有符号）→char</p><p>decimal→整数（无符号，有符号）→char</p><p>string和bool不参与隐式转换</p><h2 id="二-显示转换"><a href="#二-显示转换" class="headerlink" title="二.显示转换"></a>二.显示转换</h2><h3 id="1-括号强转"><a href="#1-括号强转" class="headerlink" title="1.括号强转"></a>1.括号强转</h3><p>作用：一般情况下，将高精度的类型强制转换为低精度。</p><p>语法：变量类型 变量名 &#x3D;（变量类型）变量；</p><p>注意： 精度问题 范围问题</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">sbyte</span> b1=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">short</span> b2=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">long</span> ;=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">char</span> c=<span class="hljs-string">&#x27;A&#x27;</span>;<br>s=i;<br><span class="hljs-comment">//会报错，因为小范围不能装大范围</span><br>s=(<span class="hljs-built_in">short</span>)i;<br><span class="hljs-comment">//不会报错，因为将i原本的int类型进行了括号强转，变成了short类型，再赋值给s。</span><br>c=i2;<br><span class="hljs-comment">//报错，字符可以隐式转换为整数（ASCII码），反之不成立。</span><br>c=(<span class="hljs-built_in">char</span>)i2;<br><span class="hljs-comment">//不报错，最终结果是将i2的ASCII码转换为字符输出，在赋值给c。</span><br></code></pre></td></tr></table></figure><p><em>Ps</em>：<em>括号强转可能会出现范围问题造成的异常</em></p><p><em>浮点数类型影响的就是精度问题</em></p><p><strong><u><em>bool,string 不能够通过括号强转</em></u></strong></p><h3 id="2-Parse法"><a href="#2-Parse法" class="headerlink" title="2.Parse法"></a>2.Parse法</h3><p>作用：把<strong>字符串</strong>转换为对应的类型<strong>（只限于字符串！！！）</strong></p><p>语法：<strong>变量类型.Parse(“字符串”)</strong></p><p>注意：字符串必须能够转换成对应类型，并且要考虑范围，否则报错。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> str2=<span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-built_in">int</span> i4=<span class="hljs-built_in">int</span>.Parse(str2);<br><span class="hljs-comment">//结果是123。之间把123当成数值赋值给i4.</span><br><span class="hljs-built_in">string</span> str3=<span class="hljs-string">&quot;123.45&quot;</span>;<br>i4=<span class="hljs-built_in">int</span>.Parse(str3);<br><span class="hljs-comment">//程序报错。表示字符串str3无法转换成int类型，之后报错.</span><br></code></pre></td></tr></table></figure><p><em>Ps：同样不能转换bool类型</em></p><h3 id="3-Convert法"><a href="#3-Convert法" class="headerlink" title="3.Convert法"></a>3.Convert法</h3><p>作用：更准确的将各个类型之间进行相互转换。(精度更高)</p><p>语法：Convert.To 目标类型（变量或者常量）</p><p>注意：填写的变量或者常量必须正确，否则出错。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> a=Conver.ToInt32(<span class="hljs-string">&quot;12&quot;</span>);<br><span class="hljs-comment">//将字符串转换成为int32为的形式，最后赋值给a，a显示12。</span><br><span class="hljs-built_in">int</span> a=Convert.ToInt32(<span class="hljs-number">1.66</span>);<br><span class="hljs-comment">//与括号强转不同的是，它会进行四舍五入。a显示2.（括号强转a会显示1）</span><br><span class="hljs-built_in">int</span> a=Convert.ToInt32(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//对bool类型也可以进行强转转换，输出1。</span><br><span class="hljs-built_in">short</span> a=Convert.ToInt16(<span class="hljs-number">1.66</span>);<br><span class="hljs-comment">//不存在short类型，改为了Int16，要注意。</span><br><span class="hljs-built_in">ushort</span> a=Convert.ToUInt16(<span class="hljs-number">1.66</span>);<br><span class="hljs-comment">//不存在ushort类型，改为了UInt16，要注意。</span><br><span class="hljs-built_in">long</span> a=Convert.ToInt64(<span class="hljs-number">1.66</span>);<br><span class="hljs-comment">//不存在long类型，改为了Int64，要注意。</span><br><span class="hljs-built_in">float</span> f=Convert.ToSingle(<span class="hljs-string">&quot;13.2&quot;</span>);<br><span class="hljs-comment">//不存在float类型，改为ToSingle。</span><br><span class="hljs-comment">//double 和 decimal 倒是没有改变。</span><br><span class="hljs-built_in">bool</span> bo=Convert.ToBoolean(<span class="hljs-string">&quot;true&quot;</span>);<br><span class="hljs-built_in">int</span> i=Convert.ToString(<span class="hljs-number">123</span>);<br><span class="hljs-comment">//这个的功能就和下面的tostring一样了，不过多赘述。</span><br></code></pre></td></tr></table></figure><h3 id="4-其他类型转string"><a href="#4-其他类型转string" class="headerlink" title="4.其他类型转string"></a>4.其他类型转string</h3><p>作用：拼接打印</p><p>语法：变量.toString（）；</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> str6=<span class="hljs-number">1.</span>Tostring();<br><span class="hljs-built_in">string</span> str5=<span class="hljs-number">1.2f</span>.Tostring();<br><span class="hljs-comment">//当我们进行字符串拼接时，就会自动调用tostring函数进行拼接。</span><br>Console.WriteLine(<span class="hljs-string">&quot;123123&quot;</span>+<span class="hljs-number">1</span>+<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//自动运用toString函数进行拼接，之后组合到一起，打印出1231231true。</span><br></code></pre></td></tr></table></figure><p><strong>Ps：当我们在 Console.readLine()时，系统其实会自动把你输入的变量转换成string字符串格式存储起来。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL语法相关</title>
    <link href="/2023/10/19/SQL%E8%AF%AD%E6%B3%95%E7%9B%B8%E5%85%B3/"/>
    <url>/2023/10/19/SQL%E8%AF%AD%E6%B3%95%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="关于SQL的基础语法"><a href="#关于SQL的基础语法" class="headerlink" title="关于SQL的基础语法"></a>关于SQL的基础语法</h1><h2 id="一-SQL-SELECT-语句"><a href="#一-SQL-SELECT-语句" class="headerlink" title="一.SQL SELECT 语句"></a>一.SQL SELECT 语句</h2><p>SELECT 语句用于从表中选取数据。</p><p>结果被存储在一个结果表中（称为结果集）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名称 <span class="hljs-keyword">FROM</span> 表名称<br></code></pre></td></tr></table></figure><p>以及</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名称<br></code></pre></td></tr></table></figure><p><em><strong>注释：</strong>SQL 语句对大小写不敏感。SELECT 等效于 select。</em></p><p>现在我们希望从 “Persons” 表中选取所有的列。</p><p>请使用符号 * 取代列的名称，就像这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons<br></code></pre></td></tr></table></figure><p>*<strong>提示：星号（*）是选取所有列的快捷方式。</strong></p><h2 id="二-SQL-SELECT-DISTINCT-语句"><a href="#二-SQL-SELECT-DISTINCT-语句" class="headerlink" title="二.SQL SELECT DISTINCT 语句"></a>二.SQL SELECT DISTINCT 语句</h2><p>在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同（distinct）的值。</p><p>关键词 DISTINCT 用于返回唯一不同的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 列名称 <span class="hljs-keyword">FROM</span> 表名称<br></code></pre></td></tr></table></figure><p><strong>使用 DISTINCT 关键词</strong></p><p>如果要从 “Company” 列中选取所有的值，我们需要使用 SELECT 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Company <span class="hljs-keyword">FROM</span> Orders<br></code></pre></td></tr></table></figure><h2 id="三-SQL-WHERE-子句"><a href="#三-SQL-WHERE-子句" class="headerlink" title="三.SQL WHERE 子句"></a>三.SQL WHERE 子句</h2><p>如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名称 <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">WHERE</span> 列 运算符 值<br></code></pre></td></tr></table></figure><p>下面的运算符可在 WHERE 子句中使用：</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">等于</td></tr><tr><td align="left">&lt;&gt;</td><td align="left">不等于</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于</td></tr><tr><td align="left">BETWEEN</td><td align="left">在某个范围内</td></tr><tr><td align="left">LIKE</td><td align="left">搜索某种模式</td></tr></tbody></table><p><strong>注释：</strong>在某些版本的 SQL 中，操作符 &lt;&gt; 可以写为 !&#x3D;。</p><p>如果只希望选取居住在城市 “Beijing” 中的人，我们需要向 SELECT 语句添加 WHERE 子句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons <span class="hljs-keyword">WHERE</span> City<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Beijing&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>引号的使用</strong></p><p><em>请注意，我们在例子中的条件值周围使用的是单引号。</em></p><p><em>SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。如果是数值，请不要使用引号。</em></p><h2 id="四-SQL-AND-OR-运算符"><a href="#四-SQL-AND-OR-运算符" class="headerlink" title="四.SQL AND &amp; OR 运算符"></a>四.SQL AND &amp; OR 运算符</h2><p>AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。</p><p>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。</p><p>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。</p><p><strong>AND 运算符实例</strong></p><p>使用 AND 来显示所有姓为 “Carter” 并且名为 “Thomas” 的人：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons <span class="hljs-keyword">WHERE</span> FirstName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Thomas&#x27;</span> <span class="hljs-keyword">AND</span> LastName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Carter&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>OR 运算符实例</strong></p><p>使用 OR 来显示所有姓为 “Carter” 或者名为 “Thomas” 的人：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons <span class="hljs-keyword">WHERE</span> firstname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Thomas&#x27;</span> <span class="hljs-keyword">OR</span> lastname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Carter&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="五-SQL-ORDER-BY-子句"><a href="#五-SQL-ORDER-BY-子句" class="headerlink" title="五.SQL ORDER BY 子句"></a>五.SQL ORDER BY 子句</h2><p><strong>ORDER BY 语句用于对结果集进行排序。</strong></p><p>ORDER BY 语句用于根据指定的列对结果集进行排序。</p><p>ORDER BY 语句默认按照<strong>升序</strong>对记录进行排序。</p><p>如果您希望按照<strong>降序</strong>对记录进行排序，<strong>可以使用 DESC 关键字</strong>。</p><p>以字母顺序显示公司名称：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Company, OrderNumber <span class="hljs-keyword">FROM</span> Orders <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Company<br></code></pre></td></tr></table></figure><p>以逆字母顺序显示公司名称：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Company, OrderNumber <span class="hljs-keyword">FROM</span> Orders <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Company <span class="hljs-keyword">DESC</span><br></code></pre></td></tr></table></figure><p><em><strong>注意：在以上的结果中有两个相等的公司名称 (W3School)。只有这一次，在第一列中有相同的值时，第二列是以升序排列的。如果第一列中有些值为 nulls 时，情况也是这样的。</strong></em></p><h2 id="六-SQL-INSERT-INTO-语句"><a href="#六-SQL-INSERT-INTO-语句" class="headerlink" title="六.SQL INSERT INTO 语句"></a>六.SQL INSERT INTO 语句</h2><p>INSERT INTO 语句用于向表格中插入新的行。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名称 <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>,....)<br></code></pre></td></tr></table></figure><p>我们也可以指定所要插入数据的列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name (列<span class="hljs-number">1</span>, 列<span class="hljs-number">2</span>,...) <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>,....)<br></code></pre></td></tr></table></figure><h4 id="插入新的行"><a href="#插入新的行" class="headerlink" title="插入新的行"></a>插入新的行</h4><h4 id="“Persons”-表："><a href="#“Persons”-表：" class="headerlink" title="“Persons” 表："></a>“Persons” 表：</h4><table><thead><tr><th align="left">LastName</th><th align="left">FirstName</th><th align="left">Address</th><th align="left">City</th></tr></thead><tbody><tr><td align="left">Carter</td><td align="left">Thomas</td><td align="left">Changan Street</td><td align="left">Beijing</td></tr></tbody></table><h4 id="SQL-语句："><a href="#SQL-语句：" class="headerlink" title="SQL 语句："></a>SQL 语句：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Persons <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;Gates&#x27;</span>, <span class="hljs-string">&#x27;Bill&#x27;</span>, <span class="hljs-string">&#x27;Xuanwumen 10&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><table><thead><tr><th align="left">LastName</th><th align="left">FirstName</th><th align="left">Address</th><th align="left">City</th></tr></thead><tbody><tr><td align="left">Carter</td><td align="left">Thomas</td><td align="left">Changan Street</td><td align="left">Beijing</td></tr><tr><td align="left">Gates</td><td align="left">Bill</td><td align="left">Xuanwumen 10</td><td align="left">Beijing</td></tr></tbody></table><h4 id="在指定的列中插入数据"><a href="#在指定的列中插入数据" class="headerlink" title="在指定的列中插入数据"></a>在指定的列中插入数据</h4><h4 id="“Persons”-表：-1"><a href="#“Persons”-表：-1" class="headerlink" title="“Persons” 表："></a>“Persons” 表：</h4><table><thead><tr><th align="left">LastName</th><th align="left">FirstName</th><th align="left">Address</th><th align="left">City</th></tr></thead><tbody><tr><td align="left">Carter</td><td align="left">Thomas</td><td align="left">Changan Street</td><td align="left">Beijing</td></tr><tr><td align="left">Gates</td><td align="left">Bill</td><td align="left">Xuanwumen 10</td><td align="left">Beijing</td></tr></tbody></table><h4 id="SQL-语句：-1"><a href="#SQL-语句：-1" class="headerlink" title="SQL 语句："></a>SQL 语句：</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Persons (LastName, Address) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;Wilson&#x27;</span>, <span class="hljs-string">&#x27;Champs-Elysees&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="结果：-1"><a href="#结果：-1" class="headerlink" title="结果："></a>结果：</h4><table><thead><tr><th align="left">LastName</th><th align="left">FirstName</th><th align="left">Address</th><th align="left">City</th></tr></thead><tbody><tr><td align="left">Carter</td><td align="left">Thomas</td><td align="left">Changan Street</td><td align="left">Beijing</td></tr><tr><td align="left">Gates</td><td align="left">Bill</td><td align="left">Xuanwumen 10</td><td align="left">Beijing</td></tr><tr><td align="left">Wilson</td><td align="left"></td><td align="left">Champs-Elysees</td><td align="left"></td></tr></tbody></table><h2 id="七-SQL-UPDATE-语句"><a href="#七-SQL-UPDATE-语句" class="headerlink" title="七.SQL UPDATE 语句"></a>七.SQL UPDATE 语句</h2><p>Update 语句用于修改表中的数据。</p><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 表名称 <span class="hljs-keyword">SET</span> 列名称 <span class="hljs-operator">=</span> 新值 <span class="hljs-keyword">WHERE</span> 列名称 <span class="hljs-operator">=</span> 某值<br></code></pre></td></tr></table></figure><p><strong>更新某一行中的一个列</strong></p><p>我们为 lastname 是 “Wilson” 的人添加 firstname：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> Person <span class="hljs-keyword">SET</span> FirstName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Fred&#x27;</span> <span class="hljs-keyword">WHERE</span> LastName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wilson&#x27;</span> <br></code></pre></td></tr></table></figure><p><strong>更新某一行中的若干列</strong></p><p>我们会修改地址（address），并添加城市名称（city）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> Person <span class="hljs-keyword">SET</span> Address <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Zhongshan 23&#x27;</span>, City <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Nanjing&#x27;</span> <span class="hljs-keyword">WHERE</span> LastName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wilson&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="八-SQL-DELETE-语句"><a href="#八-SQL-DELETE-语句" class="headerlink" title="八.SQL DELETE 语句"></a>八.SQL DELETE 语句</h2><p>DELETE 语句用于删除表中的行。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">WHERE</span> 列名称 <span class="hljs-operator">=</span> 值<br></code></pre></td></tr></table></figure><p><strong>删除某行</strong></p><p>“Fred Wilson” 会被删除：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Person <span class="hljs-keyword">WHERE</span> LastName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wilson&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>删除所有行</strong></p><p>可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> table_name<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table_name<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>转义字符</title>
    <link href="/2023/10/19/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
    <url>/2023/10/19/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="关于转义字符"><a href="#关于转义字符" class="headerlink" title="关于转义字符"></a>关于转义字符</h1><h2 id="一-转义字符的使用"><a href="#一-转义字符的使用" class="headerlink" title="一.转义字符的使用"></a>一.转义字符的使用</h2><p>什么是转义字符？</p><p>它是字符串的一部分，用来表示一些特殊含义的字符</p><p>比如：在字符串中单引号，引号，空行等等。</p><p><strong>固定写法</strong></p><p><strong>\字符</strong></p><p>不同的\和字符的组合表示不同的含义。</p><p><strong>常用转义字符</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> str =<span class="hljs-string">&quot;\&#x27;哈哈哈\&#x27;&quot;</span>;<br>    <span class="hljs-comment">//打印出来是&#x27;哈哈哈&#x27;</span><br><span class="hljs-comment">//单引号\&#x27; 双引号\&quot; 换行\n 斜杠\\ 制表符（空一个Tab键位）\t 光标退格\b(后退一步)</span><br><span class="hljs-comment">//空字符\0 警报音\a</span><br></code></pre></td></tr></table></figure><h2 id="二-取消转义字符"><a href="#二-取消转义字符" class="headerlink" title="二 取消转义字符"></a>二 取消转义字符</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> str=<span class="hljs-string">@&quot;哈哈/哈哈&quot;</span>;<br>Console.WriteLine(str);<br><span class="hljs-comment">//输出结果同样是哈哈/哈哈。</span><br><span class="hljs-comment">//@的作用是取消了转义字符在字符串里面的作用，让它变成了一个单纯的字符</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常量</title>
    <link href="/2023/10/19/%E5%B8%B8%E9%87%8F/"/>
    <url>/2023/10/19/%E5%B8%B8%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="关于常量"><a href="#关于常量" class="headerlink" title="关于常量"></a>关于常量</h1><h2 id="一-常量的申明"><a href="#一-常量的申明" class="headerlink" title="一.常量的申明"></a>一.常量的申明</h2><p>关键字 const</p><p>固定写法：const 变量类型 变量名 &#x3D;初始值；</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="二-常量的特点"><a href="#二-常量的特点" class="headerlink" title="二.常量的特点"></a>二.常量的特点</h2><p>1.必须初始化 </p><p>2.不能被修改</p><p>作用 申明一些常用不变的变量。</p><p><em>（ps：之后讲解了静态关键字static之后会回过头来讲解常量的特点）</em></p><p>Ps:关于取随机数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#">Random r= <span class="hljs-keyword">new</span> Random();<br><span class="hljs-built_in">int</span> i=r.Next(<span class="hljs-number">0</span>,<span class="hljs-number">101</span>);<br><span class="hljs-comment">//左包含，右不包含。随机生成。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>变量的本质</title>
    <link href="/2023/10/18/%E5%8F%98%E9%87%8F%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <url>/2023/10/18/%E5%8F%98%E9%87%8F%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="变量的本质及命名规范"><a href="#变量的本质及命名规范" class="headerlink" title="变量的本质及命名规范"></a>变量的本质及命名规范</h1><h2 id="一-变量的存储空间"><a href="#一-变量的存储空间" class="headerlink" title="一.变量的存储空间"></a>一.变量的存储空间</h2><p><strong>1byte(比特)&#x3D;8字节</strong></p><p><strong>1KB&#x3D;1024byte</strong></p><p><strong>1MB&#x3D;1024KB</strong></p><p><strong>1GB&#x3D;1024MB</strong></p><p><strong>1TB&#x3D;1024GB</strong></p><p>通过sizeof的方法，可以获取变量类型所占的内存空间（单位：字节）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> sbyteSize = <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">sbyte</span>);<br>Console.WriteLine(<span class="hljs-string">&quot;sbyte 所占的字节数为:&quot;</span>+sbyteSzie);<br><span class="hljs-comment">//打印出1。</span><br></code></pre></td></tr></table></figure><p><em><strong>(PS:字符串类型string无法测试出所占内存空间大小，即输入sizeof会报错，因为字符串类型可以储存一系列的字符串，长度是可以变化的。)</strong></em></p><h2 id="二-变量的本质"><a href="#二-变量的本质" class="headerlink" title="二.变量的本质"></a>二.变量的本质</h2><p>变量的本质是2进制→计算机中所有数据的本质是二进制，是一堆1和0；</p><p><strong>为什么是二进制？</strong></p><p>数据传递只能通过电信号，只有开和关两种状态，因此只能用0和1来表示这两种状态。</p><p>计算机中存储单位最小的为bit（位），它只能表示0和1两个数字。</p><p>1bit就是1个数字，要不是1要不是0。</p><p>为了方便数据表示：出现一个叫byte（字节）的单位，它是由8个bit组成的存储单位</p><p>所以我们一般说一个字节为8位。</p><p><strong>1byte&#x3D;0000 0000</strong> </p><p><u><em>二进制转十进制</em></u></p><p><u><em>十进制转二进制</em></u></p><p><u><em>自己会了就行，不作整理</em></u></p><h2 id="三-变量命名中必须遵守的规则"><a href="#三-变量命名中必须遵守的规则" class="headerlink" title="三.变量命名中必须遵守的规则"></a>三.变量命名中必须遵守的规则</h2><h3 id="1-不能做什么"><a href="#1-不能做什么" class="headerlink" title="1.不能做什么"></a>1.不能做什么</h3><p>1.不能重名</p><p>2.不能以数字开头</p><p>3.不能使用程序关键字命名</p><p>4.不能有特殊符号（下划线除外）</p><p>建议的命名规则：变量名要有含义→用英文或者拼音表示变量的作用</p><h3 id="2-常用命名规则"><a href="#2-常用命名规则" class="headerlink" title="2.常用命名规则"></a>2.常用命名规则</h3><p>驼峰命名法——首字母小写，之后单词首字母大写（变量）。</p><p>帕斯卡命名法——所有单词首字母都要大写。</p><p>ps：C#中对大小写是敏感的是区分的。</p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Csharp基础架构</title>
    <link href="/2023/10/15/Csharp%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/"/>
    <url>/2023/10/15/Csharp%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>    <span class="hljs-comment">//命名空间——像是工具包。（在学习面向对象相关知识点时会涉及）</span><br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>        <span class="hljs-comment">//类代码块——像是工具。（在学习面向对象相关知识点时会涉及）</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br><span class="hljs-function">            <span class="hljs-comment">//函数代码块 目前学习基础知识，所有代码都会写在改代码块中。</span></span><br>        &#123;<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<span class="hljs-comment">//在控制台打印出你好世界。</span><br>            Console.Write(<span class="hljs-string">&quot;Hello,world!&quot;</span>);<span class="hljs-comment">//与上面一样，区别是不换行。</span><br>            Console.ReadLine();<span class="hljs-comment">//检测玩家输入的代码，相当于scanf（）；</span><br>            Console.ReadKey();<span class="hljs-comment">//与上面相同，区别是如果在输入之后，玩家按任意键即结束输入。</span><br>            <span class="hljs-built_in">char</span> c=Console.ReadKey().KeyChar;<span class="hljs-comment">//得到玩家输入的内容，记录玩家的输入.</span><br>            <span class="hljs-comment">//ReadKey(true)不会输入的内容显示在控制台上。</span><br>        &#125;<br>    &#125;<br>&#125;<br>```<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>变量</title>
    <link href="/2023/10/15/%E5%8F%98%E9%87%8F/"/>
    <url>/2023/10/15/%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="关于变量"><a href="#关于变量" class="headerlink" title="关于变量"></a>关于变量</h1><h2 id="一-折叠代码"><a href="#一-折叠代码" class="headerlink" title="一.折叠代码"></a>一.折叠代码</h2><p>  主要作用是让我们在编程时，逻辑更加清晰。</p><p>eg：输入#region会自动补全。他是#region#endregion配对出现的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">namespace</span> 语法知识<br>&#123;<br>    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>        &#123;<br>            <span class="hljs-meta">#<span class="hljs-keyword">region</span> 折叠</span><br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>            Console.WriteLine(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>            <span class="hljs-comment">//在vs编译器中会自动折叠。</span><br>            <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br>            <span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;<br>            Consloe.WriteLine(<span class="hljs-string">&quot;变量i=&quot;</span>+i);<br>            <span class="hljs-comment">//字符串与变量之间通过+进行拼接打印。</span><br>            <span class="hljs-comment">//打印变量。</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而折叠代码的具体作用 是可以将中间包裹的代码折叠起来，避免代码太过于凌乱。</p><p>本质是编辑器提供给我们的预处理指令。</p><p>它只会在编辑时有用，发布了代码或者执行代码，它会被自动删除。</p><h2 id="二-如何申明变量"><a href="#二-如何申明变量" class="headerlink" title="二.如何申明变量"></a>二.如何申明变量</h2><h3 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h3><p>  可以变化的容器。变量就是用来存储各种不同类型数值的一个容器。不同的变量类型可以存储不同类型的值。（<em>使用一定要事先声明。）</em></p><h3 id="变量声明固定写法："><a href="#变量声明固定写法：" class="headerlink" title="变量声明固定写法："></a>变量声明固定写法：</h3><p> 变量类型+变量名&#x3D;初始值；eg：int i &#x3D;1；（尽量不要用中文取名）</p><p>变量类型有14种变化；变量名可以自定义，但是要按照一定的规则；初始值一定要和变量类型统一。</p><h4 id="关于变量类型"><a href="#关于变量类型" class="headerlink" title="关于变量类型"></a>关于变量类型</h4><h5 id="1-有符号的整形变量：是能存储一定范围的正负数包括0的类型"><a href="#1-有符号的整形变量：是能存储一定范围的正负数包括0的类型" class="headerlink" title="1.有符号的整形变量：是能存储一定范围的正负数包括0的类型"></a>1.有符号的整形变量：是能存储一定范围的正负数包括0的类型</h5><p>sbyte：-128-127</p><p>int：-21亿-21亿多</p><p>short：-32768-32767之间的数字</p><p>long：-九百万兆-九百万兆之间的数字</p><h5 id="2-无符号的整形变量：能存储一定范围的0和正数的变量类型。"><a href="#2-无符号的整形变量：能存储一定范围的0和正数的变量类型。" class="headerlink" title="2.无符号的整形变量：能存储一定范围的0和正数的变量类型。"></a>2.无符号的整形变量：能存储一定范围的0和正数的变量类型。</h5><p>byte:0-255;</p><p>uint :0-42亿多的范围；</p><p>ushort:0-65535之间的一个数字；</p><p>ulong：0-18百万兆之间的数字；</p><h5 id="3-浮点数（小数）"><a href="#3-浮点数（小数）" class="headerlink" title="3.浮点数（小数）"></a>3.浮点数（小数）</h5><p>float:存储7&#x2F;8位有效数字，根据编译器不同而定。</p><p><u><em>float数字声明后面一定要加f；</em></u></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">float</span> f =<span class="hljs-number">0.12324f</span>;<br>Console.WriteLine(f);<br><span class="hljs-comment">//打印出变量，并且有效数字从非零数来计算，并且四舍五入</span><br></code></pre></td></tr></table></figure><p>double 存储15-17位有效数字。</p><p><em><u>PS：在Csharp中声明小数默认double类型，因此如果要声明float类型需要在数字末尾加f；</u></em></p><p>decimal 存储27-28位有效数字，不建议使用，太大了</p><p><u><em>数字末尾要加m；</em></u></p><h5 id="4-特殊类型"><a href="#4-特殊类型" class="headerlink" title="4.特殊类型"></a>4.特殊类型</h5><p>bool：表示真假数据类型，只有两种类型：true or false；</p><p>char：用来存储单个字符的变量类型</p><p><em><u>要加单引号。</u></em></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">char</span> c=<span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-comment">//只能是一个字符，中文也可以。</span><br></code></pre></td></tr></table></figure><p>string：字符串类型，用来存储多个字符，没有上限。</p><p><em><u>要加双引号。</u></em></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> str=<span class="hljs-string">&quot;haihaiahi&quot;</span><br></code></pre></td></tr></table></figure><h2 id="三-为什么有那么多不同类型的变量"><a href="#三-为什么有那么多不同类型的变量" class="headerlink" title="三.为什么有那么多不同类型的变量"></a>三.为什么有那么多不同类型的变量</h2><p>不同的变量，存储的范围和类型不一样，本质是占用的内存空间不同。</p><p>选择不同的数据（变量）类型装在不同的数据之中。</p><p>初学者建议：数字用int，小数用float，字符串用string，真假用bool。</p>]]></content>
    
    
    <categories>
      
      <category>Csharp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/05/hello-world/"/>
    <url>/2023/10/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
